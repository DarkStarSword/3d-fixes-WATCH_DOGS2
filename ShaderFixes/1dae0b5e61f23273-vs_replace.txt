// HUD - multiple
// minmap icons far too deep - return to screen depth
// crosshair - move to crosshair depth
// video on main menu

// ---- Created with 3Dmigoto v1.2.52 on Sat Dec 31 04:12:43 2016

cbuffer Primitive : register(b0)
{
  float4 GeometryPickingID : packoffset(c0);
  float4 MaterialPickingID : packoffset(c1);
  float4 ModelPickingID : packoffset(c2);
  float4 PickingID : packoffset(c3);
  float4 ColorMultiplier : packoffset(c4);
  float4x4 SecondTextureUVTransform : packoffset(c5);
  float4x4 Transform : packoffset(c9);
  float4x4 UVTransform : packoffset(c13);
  float4 VideoTextureUnpack[8] : packoffset(c17);
  float3 GammaBrightnessContrastParams : packoffset(c25);
  float CustomExposureScale : packoffset(c25.w);
  float MipLevel : packoffset(c26);
  float Sharpness : packoffset(c26.y);
  float VolumeTextureSizeZ : packoffset(c26.z);
  bool SecondTextureAdditive : packoffset(c26.w);
  bool TextureIsOffscreenComposited : packoffset(c27);
}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "viewport.hlsl"
#include "crosshair.hlsl"
#include "hud.hlsl"

void main( 
  float4 v0 : position0,
  float4 v1 : color1,
  float4 v2 : texcoord2,
  out float4 o0 : TEXCOORD0,
  out float2 o1 : TEXCOORD1,
  out float4 o2 : SV_Position0)
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

  o0.xyzw = v1.zyxw;
  o1.xy = v2.xy;
  r0.x = dot(v0.xyzw, Transform._m00_m10_m20_m30);
  r0.y = dot(v0.xyzw, Transform._m01_m11_m21_m31);
  r0.z = dot(v0.xyzw, Transform._m03_m13_m23_m33);
  r0.xy = r0.xy * float2(2,2) + -r0.zz;
  o2.w = r0.z;
  o2.xy = float2(1,-1) * r0.xy;
  o2.z = dot(v0.xyzw, Transform._m02_m12_m22_m32);

float4 s = StereoParams.Load(0);
float tex_filter = IniParams[1].x;

do_hud_kill(o2);

if (o2.w != 1) { // Minimap icon, return to screen depth

	// Return to screen depth:
	// No longer doing this because it was inconsistent - instead just
	// unbinding the depth buffer on these draw calls so that the driver
	// doesn't apply the stereo correction
	// o2.x -= s.x * (o2.w - s.y);

	to_hud_depth(o2);

} else if (tex_filter == 1) {
	// Crosshair
	float crosshair_mode = IniParams[1].y;
	switch (crosshair_mode) {
		case 0: // auto
			if (v1.w > IniParams[1].z)
				o2.x += adjust_from_depth_buffer(0, 0);
			else
				o2 = 0;
			return;
		case 1: // on
			o2.x += adjust_from_depth_buffer(0, 0);
			return;
		case 2: // off
			o2 = 0;
			return;
	}
} else {
	to_hud_depth(o2);
}

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.52 on Sat Dec 31 04:12:43 2016
//
//
// Buffer Definitions: 
//
// cbuffer Primitive
// {
//
//   float4 GeometryPickingID;          // Offset:    0 Size:    16 [unused]
//   float4 MaterialPickingID;          // Offset:   16 Size:    16 [unused]
//   float4 ModelPickingID;             // Offset:   32 Size:    16 [unused]
//   float4 PickingID;                  // Offset:   48 Size:    16 [unused]
//   float4 ColorMultiplier;            // Offset:   64 Size:    16 [unused]
//   float4x4 SecondTextureUVTransform; // Offset:   80 Size:    64 [unused]
//   float4x4 Transform;                // Offset:  144 Size:    64
//   float4x4 UVTransform;              // Offset:  208 Size:    64 [unused]
//   float4 VideoTextureUnpack[8];      // Offset:  272 Size:   128 [unused]
//   float3 GammaBrightnessContrastParams;// Offset:  400 Size:    12 [unused]
//   float CustomExposureScale;         // Offset:  412 Size:     4 [unused]
//   float MipLevel;                    // Offset:  416 Size:     4 [unused]
//   float Sharpness;                   // Offset:  420 Size:     4 [unused]
//   float VolumeTextureSizeZ;          // Offset:  424 Size:     4 [unused]
//   bool SecondTextureAdditive;        // Offset:  428 Size:     4 [unused]
//   bool TextureIsOffscreenComposited; // Offset:  432 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// Primitive                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// position                 0   xyzw        0     NONE   float   xyzw
// color                    1   xyzw        1     NONE   float   xyzw
// texcoord                 2   xyzw        2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xy          1     NONE   float   xy  
// SV_Position              0   xyzw        2      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[13], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xy
dcl_output o0.xyzw
dcl_output o1.xy
dcl_output_siv o2.xyzw, position
dcl_temps 1
mov o0.xyzw, v1.zyxw
mov o1.xy, v2.xyxx
dp4 r0.x, v0.xyzw, cb0[9].xyzw
dp4 r0.y, v0.xyzw, cb0[10].xyzw
dp4 r0.z, v0.xyzw, cb0[12].xyzw
mad r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), -r0.zzzz
mov o2.w, r0.z
mul o2.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
dp4 o2.z, v0.xyzw, cb0[11].xyzw
ret 
// Approximately 10 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
