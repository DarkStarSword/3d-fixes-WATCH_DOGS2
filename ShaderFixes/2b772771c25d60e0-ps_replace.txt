// hlsltool.py --fix-wd2-unproject -i --only-autofixed --fxc /home/dss/fxc.exe 2b772771c25d60e0-ps_replace.txt
// ---- Created with 3Dmigoto v1.2.42 on Tue Dec 27 10:53:11 2016

cbuffer Global : register(b0)
{
  float4 EnvironmentLuminances : packoffset(c0);
  float4 FakeEarthShadowPlane : packoffset(c1);
  float4 GlobalLightsIntensity : packoffset(c2);
  float4 GlobalWeatherControl : packoffset(c3);
  float4 MaterialWetnessParams[22] : packoffset(c4);
  float4 WindGlobalTurbulence : packoffset(c26);
  float4 WindVelocityTextureCoverage : packoffset(c27);
  float4 WorldLoadingRingSizes[2] : packoffset(c28);

  struct
  {
    float debugValue0;
    float debugValue1;
    float debugValue2;
    float debugValue3;
  } DebugValues : packoffset(c30);

  float3 SunShadowDirection : packoffset(c31);
  float CrowdAnimationStartTime : packoffset(c31.w);
  float3 WindGlobalNoiseTextureChannelSel : packoffset(c32);
  float GlobalReflectionTextureBlendRatio : packoffset(c32.w);
  float3 WindGlobalNoiseTextureCoverage : packoffset(c33);
  float GlobalWaterLevel : packoffset(c33.w);

  struct
  {
    float time;
    float staticReflectionIntensity;
    float gameDeltaTime;
  } GlobalScalars : packoffset(c34);

  float RcpStaticReflectionExposureScale : packoffset(c34.w);
  float2 GlobalNoiseSampler2DSquareSize : packoffset(c35);
  float SandstormIntensity : packoffset(c35.z);
  float StaticReflectionIntensityDest : packoffset(c35.w);
  float2 WindNoiseDeltaVector : packoffset(c36);
  float TimeOfDay : packoffset(c36.z);
  float VertexAOIntensity : packoffset(c36.w);
  float2 WindVector : packoffset(c37);
}

cbuffer Viewport : register(b1)
{
  float4 CameraNearPlaneSize : packoffset(c0);
  float4x4 DepthTextureTransform : packoffset(c1);
  float4 FSMClipPlanes : packoffset(c5);
  float4 FacettedShadowCastParams : packoffset(c6);
  float4 FogValues0 : packoffset(c7);
  float4 FogValues1 : packoffset(c8);
  float4x4 InvProjectionMatrix : packoffset(c9);
  float4x4 InvProjectionMatrixDepth : packoffset(c13);
  float4x3 InvViewMatrix : packoffset(c17);
  float4x4 PreviousViewProjectionMatrix : packoffset(c20);
  float4x4 ProjectionMatrix : packoffset(c24);
  float4 RainOcclusionFadeParams : packoffset(c28);
  float4x4 RainOcclusionProjectionMatrix : packoffset(c29);
  float4 RainOcclusionShadowMapSize : packoffset(c33);
  float4 ReflectionVolumeDebugColors[15] : packoffset(c34);
  float4 VPosOffset : packoffset(c49);
  float4 VPosScale : packoffset(c50);
  float4x3 ViewMatrix : packoffset(c51);
  float4x4 ViewProjectionMatrix : packoffset(c54);
  float4x4 ViewRotProjectionMatrix : packoffset(c58);
  float4x4 ViewRotProjectionMatrixPure : packoffset(c62);
  float4 ViewportSize : packoffset(c66);

  struct
  {
    float near;
    float far;
    float view;
    float oneOverView;
  } CameraDistances : packoffset(c67);


  struct
  {
    float4x4 inverseTransform;
    float3 rcpFadeRangePositive;
    float textureArrayIndexAsFloat;
    float3 rcpFadeRangeNegative;
    float fadeFactor;
    float2 multipliers;
    uint parallaxCorrection;
    float padding0;
  } ReflectionVolumes[15] : packoffset(c68);

  float3 CameraDirection : packoffset(c173);
  float DefaultReflectionTextureArrayIndexAsFloat : packoffset(c173.w);
  float3 CameraPosition : packoffset(c174);
  float DynamicCubeMapReflectionTextureMaxMipIndex : packoffset(c174.w);
  float3 CullingCameraPosition : packoffset(c175);
  float ExposedWhitePointOverExposureScale : packoffset(c175.w);
  float3 FogColorVector : packoffset(c176);
  float ExposureScale : packoffset(c176.w);
  float3 OppositeFogColorDelta : packoffset(c177);
  float MaxParaboloidReflectionMipIndex : packoffset(c177.w);
  float3 SideFogColor : packoffset(c178);
  float MaxStaticReflectionMipIndex : packoffset(c178.w);
  float3 SunFogColorDelta : packoffset(c179);
  float MeasuredExposureScale : packoffset(c179.w);
  float3 TemporalFilteringParams : packoffset(c180);
  float RaindropRippleScale : packoffset(c180.w);
  float3 UncompressDepthWeights : packoffset(c181);
  float ReflectionScaleDistanceMul : packoffset(c181.w);
  float3 UncompressDepthWeightsWS : packoffset(c182);
  float ReflectionScaleStrength : packoffset(c182.w);
  float3 ViewPoint : packoffset(c183);
  float SkyParaboloidTextureMaxMipIndex : packoffset(c183.w);
  float2 DefaultReflectionMultipliers : packoffset(c184);
  bool UseOnlySkyReflection : packoffset(c184.z);
  float2 ReflectionGIControl : packoffset(c185);
  uint2 SelectedPixel : packoffset(c185.z);
}

cbuffer SkyBuffer : register(b2)
{

  struct
  {
    float4 m_lightIrradiance;
    float4 m_lightIrradianceWithoutCloudsCoverage;
    float4 m_lightDirection;
    float4 m_cloudLightVector;
    float4 m_cloudIrradiance;
    float4 m_environmentIrradianceSHRed;
    float4 m_environmentIrradianceSHGreen;
    float4 m_environmentIrradianceSHBlue;
    float4 m_environmentIrradianceAverage;
    float4 m_giDefaultProbeIrradiance[3];
    float4 m_giDefaultProbeTint[3];
    float4 m_giDirectEnvironmentIrradiance[3];
    float4 m_giBouncedEnvironmentIrradiance[4];
    float4 m_cloudAndSkyIrradianceSH[9];
    float4 m_skyOnlyIrradianceSH[9];
  } SkyLightStruct : packoffset(c0);

}

cbuffer LightData : register(b3)
{

  struct
  {
    float4x4 CascadedShadowProjections[4];
    float4 CascadedShadowSliceFadeParams;
    float4 CascadedBlurKernelMinSizes;
    float4 CascadedBlurKernelMaxSizes;
    float4 LightCapsuleDivLength;
    float4 LightFadingClipPlanes[8];
    float4 LightIESParams;
    float4 LightProjectedVideoUnpack[8];
    float4 LightShadowFactor;
    float4 LightShadowMapSize;
    float4x4 LightSpotShadowProjections;
    float4x4 LightVolumeTransform;
    float3 LightCapsuleMulLength;
    float3 LightDirection;
    float3 LightColor;
    float3 LightPivotPosition;
    float3 LightPosition;
    float2 LightCapsuleParams;
    float2 LightSpotConeFactors;
    float4 LightAttenuation;
    float2 LightSpotShadowAngleFactors;
    float LightSpotNearClipFactor;
    float CascadedShadowGrazingAngleScale;
  } LightDatas : packoffset(c0);

}

SamplerState Global__PreIntegratedSkinDiffuseTexture__SampObj___s : register(s0);
Texture2D<float4> Global__PreIntegratedSkinDiffuseTexture__TexObj__ : register(t0);
Texture2D<float4> Viewport__DepthVPSampler__TexObj__ : register(t1);
Texture2D<float4> DeferredLightingCommon__AlbedoTexture__TexObj__ : register(t2);
Texture2D<float4> DeferredLightingCommon__NormalTexture__TexObj__ : register(t3);
Texture2D<float4> DeferredLightingCommon__OtherTexture__TexObj__ : register(t4);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19;
  uint4 bitmask, uiDest;
  float4 fDest;

// WATCH_DOGS2 unprojection fix inserted by DarkStarSword's hlsltool.py:
// hlsltool.py --fix-wd2-unproject -i --only-autofixed --fxc /home/dss/fxc.exe 2b772771c25d60e0-ps_replace.txt

  r0.xy = v0.xy * VPosScale.zw + VPosOffset.zw;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0,0);
  r0.z = Viewport__DepthVPSampler__TexObj__.Load(r1.xyw).x;
  r0.w = 1;
  r2.x = dot(r0.zw, InvProjectionMatrix._m22_m32);
  r0.z = dot(r0.zw, InvProjectionMatrix._m23_m33);
  r0.z = -r2.x / r0.z;
  r2.z = -r0.z;
  r2.xy = r2.zz * r0.xy;

// Fix lights, note depth is negative (or could have used r0.z):
float4 s = StereoParams.Load(0);
r2.x -= s.x * (-r2.z - s.y) * InvProjectionMatrix._m00;

  r2.w = 1;
  r0.x = dot(r2.xyzw, InvViewMatrix._m00_m10_m20_m30);
  r0.y = dot(r2.xyzw, InvViewMatrix._m01_m11_m21_m31);
  r0.z = dot(r2.xyzw, InvViewMatrix._m02_m12_m22_m32);
  r2.xyzw = DeferredLightingCommon__AlbedoTexture__TexObj__.Load(r1.xyw).xyzw;
  r3.xyzw = DeferredLightingCommon__NormalTexture__TexObj__.Load(r1.xyw).xyzw;
  r1.xyzw = DeferredLightingCommon__OtherTexture__TexObj__.Load(r1.xyz).yxzw;
  r0.w = r1.w * 255 + 0.5;
  r0.w = floor(r0.w);
  r0.w = (uint)r0.w;
  r0.w = (uint)r0.w >> 5;
  r4.xyz = cmp((int3)r0.www == int3(1,4,0));
  r1.w = cmp(r2.w >= 0.75);
  r4.w = -0.75 + r2.w;
  r4.w = r4.w * -0.599999905 + 1;
  r1.w = r1.w ? r4.w : 1;
  r1.w = r4.y ? r1.w : r2.w;
  r1.w = r4.x ? 1 : r1.w;
  r5.yzw = r2.xyz * r1.www;
  if (r4.x != 0) {
    r1.w = r3.w * 0.5 + 0.5;
    r1.w = r1.w * 65535 + 0.5;
    r1.w = (uint)r1.w;
    r2.xy = (int2)r1.ww & int2(255,0);
    r2.xy = (uint2)r2.xy;
    r6.xw = float2(1.53186284e-005,0.00392156886) * r2.yx;
    r1.w = 255 * r2.w;
    r1.w = (uint)r1.w;
    r2.xy = (int2)r1.ww & int2(15,240);
    r2.xy = (uint2)r2.xy;
    r6.yz = float2(0.0666666701,0.00416666688) * r2.xy;
    r7.w = 0;
    r2.x = r1.z;
    r5.x = r5.y;
  } else {
    r1.w = r1.x * r1.x;
    r1.x = max(0.00100000005, r1.w);
    r1.w = cmp((int)r0.w == 2);
    if (r1.w != 0) {
      r1.w = r3.w * 0.5 + 0.5;
      r1.w = r1.w * 65535 + 0.5;
      r1.w = (uint)r1.w;
      r8.xy = (int2)r1.ww & int2(255,0);
      r8.xy = (uint2)r8.xy;
      r8.z = r1.y;
      r8.xyz = r8.xyz * float3(0.00784313772,3.06372567e-005,2) + float3(-1,-1,-1);
      r1.w = 1 + -r2.w;
      r1.w = r5.y * r1.w;
      r5.x = r1.w * 0.5 + r5.y;
      r1.w = dot(r8.xyz, r8.xyz);
      r1.w = rsqrt(r1.w);
      r6.xyw = r8.yzx * r1.www;
      r6.z = 0;
      r7.w = 0;
      r1.y = 0.5;
      r2.x = r1.z;
    } else {
      r1.w = cmp((int)r0.w == 3);
      if (r1.w != 0) {
        r1.w = r3.w * 0.5 + 0.5;
        r1.w = r1.w * 65535 + 0.5;
        r1.w = (uint)r1.w;
        r8.xyzw = (int4)r1.wwww & int4(0,2016,31,31);
        r8.xyzw = (uint4)r8.xyzw;
        r9.xyz = cmp(float3(1.25395,81.5471954,2568.0896) >= r8.wyx);
        r1.w = 0.00249675405 * r8.w;
        r10.xyz = r8.zyx * float3(0.0322580636,0.000496031775,1.57510076e-005) + float3(0.0549999997,0.0549999997,0.0549999997);
        r10.xyz = float3(0.947867334,0.947867334,0.947867334) * r10.xyz;
        r10.xyz = log2(r10.xyz);
        r10.xyz = float3(2.4000001,2.4000001,2.4000001) * r10.xyz;
        r10.xyz = exp2(r10.xyz);
        r6.w = r9.x ? r1.w : r10.x;
        r8.xy = float2(3.83925508e-005,1.21911819e-006) * r8.yx;
        r6.xy = r9.yz ? r8.xy : r10.yz;
        r6.z = 0;
        r7.w = 0;
        r2.x = r1.z;
      } else {
        if (r4.y != 0) {
          r1.w = r3.w * 32767 + 32767;
          r1.w = (uint)r1.w;
          r2.z = (int)r1.w & 255;
          r2.z = (uint)r2.z;
          r2.z = 0.0123199718 * r2.z;
          if (8 == 0) r1.w = 0; else if (8+8 < 32) {           r1.w = (uint)r1.w << (32-(8 + 8)); r1.w = (uint)r1.w >> (32-8);          } else r1.w = (uint)r1.w >> 8;
          r1.w = (uint)r1.w;
          r1.w = r1.w * 0.0246399436 + -3.14159274;
          sincos(r2.z, r8.x, r9.x);
          sincos(r1.w, r10.x, r11.x);
          r11.x = r11.x * r8.x;
          r11.y = r10.x * r8.x;
          r11.z = r9.x;
          r1.w = dot(r11.xyz, r11.xyz);
          r1.w = rsqrt(r1.w);
          r6.xyw = r11.yzx * r1.www;
          r7.w = saturate(0.25 * r2.w);
          r6.z = 0;
          r2.x = r1.z;
        } else {
          r1.w = cmp((int)r0.w == 5);
          r2.z = cmp(r3.z < 0.899999976);
          r8.xyz = r2.zzz ? float3(0,1,0) : float3(1,0,0);
          r9.xyz = r8.xyz * r3.zxy;
          r8.xyz = r3.yzx * r8.yzx + -r9.xyz;
          r2.z = dot(r8.xyz, r8.xyz);
          r2.z = rsqrt(r2.z);
          r8.xyz = r8.xyz * r2.zzz;
          r9.xyz = r8.yzx * r3.zxy;
          r9.xyz = r3.yzx * r8.zxy + -r9.xyz;
          r2.z = dot(r9.xyz, r9.xyz);
          r2.z = rsqrt(r2.z);
          r9.xyz = r9.xyz * r2.zzz;
          r2.z = r3.w * 2 + -1;
          r2.z = 3.14159274 * r2.z;
          sincos(r2.z, r10.x, r11.x);
          r8.xyz = r10.xxx * r8.xyz;
          r8.xyz = r9.xyz * r11.xxx + r8.xyz;
          r2.z = r3.w * 0.5 + 0.5;
          r2.z = r2.z * 65535 + 0.5;
          r2.z = (uint)r2.z;
          r2.z = (int)r2.z & 255;
          r2.z = (uint)r2.z;
          r2.z = 0.00392156886 * r2.z;
          r9.x = r0.w ? 0 : r2.z;
          r8.w = r1.z;
          r9.yzw = float3(0,0,0);
          r6.xyzw = r1.wwww ? r8.yzwx : r9.yzwx;
          r8.x = r2.w;
          r8.yz = float2(0,0);
          r2.xy = r1.ww ? r8.yx : r8.wz;
          r7.w = r2.y;
        }
      }
      r5.x = r5.y;
    }
  }
  r1.z = dot(r0.xyz, FakeEarthShadowPlane.xyz);
  r1.z = saturate(FakeEarthShadowPlane.w + r1.z);
  r1.z = r1.z * LightDatas.LightShadowFactor.x + LightDatas.LightShadowFactor.y;
  r1.w = cmp(0 < r1.z);
  r2.y = cmp(0 < r6.w);
  r2.y = r2.y ? r4.z : 0;
  r1.w = (int)r1.w | (int)r2.y;
  if (r1.w != 0) {
    r1.w = dot(r3.xyz, r3.xyz);
    r1.w = rsqrt(r1.w);
    r2.yzw = r3.xyz * r1.www;
    r0.xyz = CameraPosition.xyz + -r0.xyz;
    r1.w = dot(r0.xyz, r0.xyz);
    r1.w = rsqrt(r1.w);
    r3.xyz = r1.www * r0.xyz;
    r8.w = dot(SkyLightStruct.m_lightIrradiance.xyz, float3(0.212639004,0.715168655,0.0721923187));
    r3.w = dot(r2.yzw, SkyLightStruct.m_lightDirection.xyz);
    r4.z = saturate(r3.w);
    r4.w = cmp((int)r0.w == 2);
    r5.y = dot(r6.xyw, r6.xyw);
    r5.y = rsqrt(r5.y);
    r9.xyz = r6.wxy * r5.yyy;
    r5.y = dot(r9.xyz, SkyLightStruct.m_lightDirection.xyz);
    r5.y = 1 + r5.y;
    r5.y = saturate(0.5 * r5.y);
    r9.x = r5.y * r5.y;
    r5.y = r9.x * r5.y;
    r9.xyz = r4.www ? r6.wxy : r2.yzw;
    r5.y = r4.w ? r5.y : r4.z;
    if (r4.x != 0) {
      r10.xyzw = saturate(r6.wzxy);
      r2.x = saturate(r2.x);
      r11.xyz = log2(r5.xzw);
      r12.xyz = r11.xyz * r10.yyy;
      r12.xyz = float3(-12.7799997,-12.7799997,-12.7799997) * r12.xyz;
      r11.xyz = r11.xyz * float3(-0.0199999996,-0.0199999996,-0.0199999996) + r12.xyz;
      r4.x = cmp(r10.x == 0.000000);
      r9.w = 1 + -r2.x;
      r12.xyz = r9.www * r5.xzw;
      r12.xyz = float3(0.318309873,0.318309873,0.318309873) * r12.xyz;
      r13.xyz = r11.xyz * -r10.xxx;
      r13.xyz = exp2(r13.xyz);
      r13.xyz = r13.xyz * r12.xyz;
      r13.xyz = float3(0.444444448,0.444444448,0.444444448) * r13.xyz;
      r12.xyz = r4.xxx ? r12.xyz : r13.xyz;
      r12.w = 0.180000007;
      r9.w = 0.0799999982 * r10.w;
      r10.x = r10.x * 48.75 + 1.25;
      r1.x = saturate(r1.x);
      r10.y = r1.x * r1.x;
      r10.z = r10.z * r10.z;
      r10.yz = max(float2(0.00100000005,0.00100000005), r10.yz);
      r11.w = cmp(0 < r3.w);
      r13.x = cmp(r3.w < 0);
      r11.w = (int)-r11.w + (int)r13.x;
      r11.w = (int)r11.w;
      r13.x = r3.w * r3.w + -1;
      r13.x = r13.x * 0.666860044 + 1;
      r13.x = sqrt(r13.x);
      r11.w = r13.x * r11.w;
      r3.w = r3.w * 0.666860044 + -r11.w;
      r13.xyz = float3(0.666860044,0.666860044,0.666860044) * SkyLightStruct.m_lightDirection.xyz;
      r13.xyz = r3.www * r2.yzw + -r13.xyz;
      r14.xyz = -SkyLightStruct.m_lightDirection.xyz + -r13.xyz;
      r13.xyz = r10.yyy * r14.xyz + r13.xyz;
      r3.w = dot(r13.xyz, r13.xyz);
      r3.w = rsqrt(r3.w);
      r14.xyz = r13.xyz * r3.www;
      r11.w = dot(r3.xyz, r2.yzw);
      r13.w = cmp(0 < r11.w);
      r14.w = cmp(r11.w < 0);
      r13.w = (int)-r13.w + (int)r14.w;
      r13.w = (int)r13.w;
      r14.w = r11.w * r11.w + -1;
      r14.w = r14.w * 0.666860044 + 1;
      r14.w = sqrt(r14.w);
      r13.w = r14.w * r13.w;
      r13.w = r11.w * 0.666860044 + -r13.w;
      r15.xyz = float3(0.666860044,0.666860044,0.666860044) * r3.xyz;
      r15.xyz = r13.www * r2.yzw + -r15.xyz;
      r16.xyz = -r0.xyz * r1.www + -r15.xyz;
      r15.xyz = r10.yyy * r16.xyz + r15.xyz;
      r13.w = dot(r15.xyz, r15.xyz);
      r13.w = rsqrt(r13.w);
      r15.xyz = r15.xyz * r13.www;
      r13.w = dot(r2.yzw, r14.xyz);
      r13.w = -abs(r13.w) * abs(r13.w) + 1;
      r13.w = -r13.w * 0.444702327 + 1;
      r10.x = r10.x + r10.x;
      r13.w = sqrt(r13.w);
      r10.x = r10.x / r13.w;
      r11.w = saturate(r11.w);
      r16.xyz = r0.xyz * r1.www + SkyLightStruct.m_lightDirection.xyz;
      r13.w = dot(r16.xyz, r16.xyz);
      r13.w = rsqrt(r13.w);
      r16.xyz = r16.xyz * r13.www;
      r13.w = saturate(dot(r2.yzw, r16.xyz));
      r14.w = r10.y * r10.y;
      r13.w = r13.w * r13.w;
      r15.w = r10.y * r10.y + -1;
      r13.w = r13.w * r15.w + 1;
      r13.w = r13.w * r13.w;
      r13.w = 3.14159274 * r13.w;
      r13.w = r14.w / r13.w;
      r10.y = r10.y * 0.5 + 0.5;
      r14.w = r4.z * r4.z;
      r10.y = r10.y * r10.y;
      r15.w = -r4.z * r4.z + 1;
      r15.w = r15.w * r10.y;
      r14.w = max(1.00000005e-034, r14.w);
      r14.w = r15.w / r14.w;
      r14.w = 1 + r14.w;
      r14.w = sqrt(r14.w);
      r14.w = 1 + r14.w;
      r14.w = 2 / r14.w;
      r15.w = r11.w * r11.w;
      r11.w = -r11.w * r11.w + 1;
      r10.y = r11.w * r10.y;
      r11.w = max(1.00000005e-034, r15.w);
      r10.y = r10.y / r11.w;
      r10.y = 1 + r10.y;
      r10.y = sqrt(r10.y);
      r10.y = 1 + r10.y;
      r10.y = 2 / r10.y;
      r10.y = r14.w * r10.y;
      r16.xyz = r4.zzz * r4.zzz + float3(1.24869561,1.24878526,1.24869561);
      r16.xyz = sqrt(r16.xyz);
      r17.xyz = r16.zyz + -r4.zzz;
      r16.xyz = r16.xyz + r4.zzz;
      r18.xyz = r17.zyz * r17.zyz;
      r19.xyz = r16.zyz * r16.zyz;
      r19.xyz = r19.xyz + r19.xyz;
      r18.xyz = r18.xyz / r19.xyz;
      r16.xyz = r4.zzz * r16.xyz + float3(-1,-1,-1);
      r17.xyz = r4.zzz * r17.xyz + float3(1,1,1);
      r16.xyz = r16.xyz / r17.xyz;
      r16.xyz = r16.xyz * r16.xyz + float3(1,1,1);
      r16.xyz = r18.xyz * r16.xyz;
      r10.y = r13.w * r10.y;
      r16.xyz = r10.yyy * r16.xyz;
      r17.xyz = -r10.www * float3(0.0799999982,0.0799999982,0.0799999982) + r5.xzw;
      r17.xyz = r2.xxx * r17.xyz + r9.www;
      r9.w = saturate(dot(r2.yzw, -r15.xyz));
      r13.xyz = -r13.xyz * r3.www + -r15.xyz;
      r3.w = dot(r13.xyz, r13.xyz);
      r3.w = rsqrt(r3.w);
      r13.xyz = r13.xyz * r3.www;
      r3.w = dot(r13.xyz, -r14.xyz);
      r10.y = saturate(dot(r2.yzw, -r14.xyz));
      r10.w = saturate(dot(r2.yzw, r13.xyz));
      r11.w = r10.z * r10.z;
      r10.w = r10.w * r10.w;
      r13.x = r10.z * r10.z + -1;
      r10.w = r10.w * r13.x + 1;
      r10.w = r10.w * r10.w;
      r10.w = 3.14159274 * r10.w;
      r10.w = r11.w / r10.w;
      r10.z = r10.z * 0.5 + 0.5;
      r11.w = r10.y * r10.y;
      r10.z = r10.z * r10.z;
      r10.y = -r10.y * r10.y + 1;
      r10.y = r10.z * r10.y;
      r11.w = max(1.00000005e-034, r11.w);
      r10.y = r10.y / r11.w;
      r10.y = 1 + r10.y;
      r10.y = sqrt(r10.y);
      r10.y = 1 + r10.y;
      r10.y = 2 / r10.y;
      r11.w = r9.w * r9.w;
      r9.w = -r9.w * r9.w + 1;
      r9.w = r10.z * r9.w;
      r10.z = max(1.00000005e-034, r11.w);
      r9.w = r9.w / r10.z;
      r9.w = 1 + r9.w;
      r9.w = sqrt(r9.w);
      r9.w = 1 + r9.w;
      r9.w = 2 / r9.w;
      r9.w = r10.y * r9.w;
      r10.y = dot(r17.xyz, float3(0.333333343,0.333333343,0.333333343));
      r10.y = saturate(50 * r10.y);
      r3.w = 1 + -r3.w;
      r10.z = r3.w * r3.w;
      r10.z = r10.z * r10.z;
      r13.xyz = r10.yyy + -r17.xyz;
      r13.xyz = r13.xyz * r10.zzz;
      r13.xyz = r13.xyz * r3.www + r17.xyz;
      r3.w = r10.w * r9.w;
      r10.yzw = r3.www * r13.xyz;
      r11.xyz = -r11.xyz * r10.xxx;
      r11.xyz = exp2(r11.xyz);
      r11.xyz = r10.yzw * r11.xyz + r16.xyz;
      r10.xyz = r4.xxx ? r10.yzw : r11.xyz;
      r10.w = dot(r10.xyz, float3(0.212639004,0.715168655,0.0721923187));
      r11.xyzw = float4(0,0,0,0);
    } else {
      if (r4.w != 0) {
        r13.xyz = float3(0.318309873,0.318309873,0.318309873) * r5.xzw;
        r13.w = 0.0572957806;
        r3.w = 1 + -r2.x;
        r12.xyzw = r13.xyzw * r3.wwww;
      } else {
        r3.w = cmp((int)r0.w == 3);
        if (r3.w != 0) {
          r13.xyz = r0.xyz * r1.www + SkyLightStruct.m_lightDirection.xyz;
          r3.w = dot(r13.xyz, r13.xyz);
          r3.w = rsqrt(r3.w);
          r13.xyz = r13.xyz * r3.www;
          r3.w = saturate(dot(r13.xyz, r3.xyz));
          r4.x = 0.0799999982 * r1.y;
          r3.w = 1 + -r3.w;
          r9.w = r3.w * r3.w;
          r9.w = r9.w * r9.w;
          r13.x = -r1.y * 0.0799999982 + 1;
          r9.w = r13.x * r9.w;
          r3.w = r9.w * r3.w + r4.x;
          r4.x = saturate(r1.x + r1.x);
          r13.w = r4.x * -r3.w + 1;
          r13.xyz = r13.www * r5.xzw;
          r12.xyzw = float4(0.318309873,0.318309873,0.318309873,0.0572957806) * r13.xyzw;
        } else {
          if (r4.y != 0) {
            r13.xyz = r9.xyz + -r6.wxy;
            r14.xyz = r13.xyz * float3(0.100000001,0.100000001,0.100000001) + r6.wxy;
            r3.w = dot(r14.xyz, r14.xyz);
            r3.w = rsqrt(r3.w);
            r14.xyz = r14.xyz * r3.www;
            r13.xyz = r13.xyz * float3(0.300000012,0.300000012,0.300000012) + r6.wxy;
            r3.w = dot(r13.xyz, r13.xyz);
            r3.w = rsqrt(r3.w);
            r13.xyz = r13.xyz * r3.www;
            r3.w = dot(r6.wxy, SkyLightStruct.m_lightDirection.xyz);
            r4.x = dot(r14.xyz, SkyLightStruct.m_lightDirection.xyz);
            r9.w = dot(r13.xyz, SkyLightStruct.m_lightDirection.xyz);
            r7.z = r3.w * 0.5 + 0.5;
            r13.xy = r7.zw * float2(0.984375,0.984375) + float2(0.0078125,0.0078125);
            r13.x = Global__PreIntegratedSkinDiffuseTexture__TexObj__.SampleLevel(Global__PreIntegratedSkinDiffuseTexture__SampObj___s, r13.xy, 0).x;
            r7.y = r4.x * 0.5 + 0.5;
            r7.yz = r7.yw * float2(0.984375,0.984375) + float2(0.0078125,0.0078125);
            r13.y = Global__PreIntegratedSkinDiffuseTexture__TexObj__.SampleLevel(Global__PreIntegratedSkinDiffuseTexture__SampObj___s, r7.yz, 0).y;
            r7.x = r9.w * 0.5 + 0.5;
            r7.xy = r7.xw * float2(0.984375,0.984375) + float2(0.0078125,0.0078125);
            r13.z = Global__PreIntegratedSkinDiffuseTexture__TexObj__.SampleLevel(Global__PreIntegratedSkinDiffuseTexture__SampObj___s, r7.xy, 0).z;
            r13.xyz = r13.xyz * r5.xzw;
            r13.w = 0.0572957806;
            r12.xyzw = float4(0.318309873,0.318309873,0.318309873,1) * r13.xyzw;
          } else {
            r3.w = cmp((int)r0.w == 5);
            r4.x = dot(r6.wxy, SkyLightStruct.m_lightDirection.xyz);
            r4.x = -r4.x * r4.x + 1;
            r4.x = sqrt(r4.x);
            r13.xyz = float3(0.318309873,0.318309873,0.318309873) * r5.xzw;
            r13.w = 0.0572957806;
            r7.x = 1 + -r2.x;
            r13.xyzw = r13.xyzw * r7.xxxx;
            r14.xyzw = r13.xyzw * r4.xxxx;
            r14.xyzw = float4(0.5,0.5,0.5,0.5) * r14.xyzw;
            r4.x = 1 + -r6.z;
            r14.xyzw = r14.xyzw * r4.xxxx;
            r12.xyzw = r3.wwww ? r14.xyzw : r13.xyzw;
          }
        }
      }
      if (r4.w != 0) {
        r3.w = 0.0799999982 * r1.y;
        r7.xyz = -r1.yyy * float3(0.0799999982,0.0799999982,0.0799999982) + r5.xzw;
        r7.xyz = r2.xxx * r7.xyz + r3.www;
        r3.w = saturate(dot(r2.yzw, r3.xyz));
        r13.xyz = r0.xyz * r1.www + SkyLightStruct.m_lightDirection.xyz;
        r4.x = dot(r13.xyz, r13.xyz);
        r4.x = rsqrt(r4.x);
        r13.xyz = r13.xyz * r4.xxx;
        r4.x = dot(r13.xyz, SkyLightStruct.m_lightDirection.xyz);
        r9.w = saturate(dot(r2.yzw, r13.xyz));
        r13.x = r1.x * r1.x;
        r9.w = r9.w * r9.w;
        r13.y = r1.x * r1.x + -1;
        r9.w = r9.w * r13.y + 1;
        r9.w = r9.w * r9.w;
        r9.w = 3.14159274 * r9.w;
        r9.w = r13.x / r9.w;
        r13.x = r1.x * 0.5 + 0.5;
        r13.y = r4.z * r4.z;
        r13.x = r13.x * r13.x;
        r13.z = -r4.z * r4.z + 1;
        r13.z = r13.x * r13.z;
        r13.y = max(1.00000005e-034, r13.y);
        r13.y = r13.z / r13.y;
        r13.y = 1 + r13.y;
        r13.y = sqrt(r13.y);
        r13.y = 1 + r13.y;
        r13.y = 2 / r13.y;
        r13.z = r3.w * r3.w;
        r3.w = -r3.w * r3.w + 1;
        r3.w = r13.x * r3.w;
        r13.x = max(1.00000005e-034, r13.z);
        r3.w = r3.w / r13.x;
        r3.w = 1 + r3.w;
        r3.w = sqrt(r3.w);
        r3.w = 1 + r3.w;
        r3.w = 2 / r3.w;
        r3.w = r13.y * r3.w;
        r13.x = dot(r7.xyz, float3(0.333333343,0.333333343,0.333333343));
        r13.x = saturate(50 * r13.x);
        r4.x = 1 + -r4.x;
        r13.y = r4.x * r4.x;
        r13.y = r13.y * r13.y;
        r13.xzw = r13.xxx + -r7.xyz;
        r13.xyz = r13.xzw * r13.yyy;
        r7.xyz = r13.xyz * r4.xxx + r7.xyz;
        r3.w = r9.w * r3.w;
        r10.xyz = r3.www * r7.xyz;
        r10.w = dot(r10.xyz, float3(0.212639004,0.715168655,0.0721923187));
      } else {
        r3.w = cmp((int)r0.w == 3);
        if (r3.w != 0) {
          r7.xyz = r0.xyz * r1.www + SkyLightStruct.m_lightDirection.xyz;
          r3.w = dot(r7.xyz, r7.xyz);
          r3.w = rsqrt(r3.w);
          r7.xyz = r7.xyz * r3.www;
          r3.w = saturate(dot(r7.xyz, r3.xyz));
          r4.x = 0.0799999982 * r1.y;
          r3.w = 1 + -r3.w;
          r9.w = r3.w * r3.w;
          r9.w = r9.w * r9.w;
          r13.x = -r1.y * 0.0799999982 + 1;
          r9.w = r13.x * r9.w;
          r3.w = r9.w * r3.w + r4.x;
          r4.x = saturate(dot(r2.yzw, r7.xyz));
          r7.x = r4.x * r4.x;
          r7.yz = -r4.xx * r4.xx + float2(1.00000095,1);
          r7.x = r7.x / r7.y;
          r7.y = r7.z * r7.z;
          r7.z = r1.x * r1.x;
          r13.xy = r1.xx * r1.xx + float2(9.99999997e-007,1.99999999e-006);
          r9.w = r13.x * 4 + 1;
          r9.w = 3.14159274 * r9.w;
          r9.w = 1 / r9.w;
          r7.x = -r7.x / r13.y;
          r7.x = 1.44269502 * r7.x;
          r7.x = exp2(r7.x);
          r7.x = 4 * r7.x;
          r7.x = r7.x / r7.y;
          r7.x = 1 + r7.x;
          r7.x = r9.w * r7.x;
          r7.y = saturate(dot(r2.yzw, r3.xyz));
          r9.w = r7.y + r4.z;
          r7.y = -r4.z * r7.y + r9.w;
          r7.y = 4 * r7.y;
          r7.y = 1 / r7.y;
          r7.y = saturate(r7.y);
          r7.z = 2 / r7.z;
          r7.z = -2 + r7.z;
          r7.z = max(1.00000003e-022, r7.z);
          r4.x = log2(r4.x);
          r4.x = r7.z * r4.x;
          r4.x = exp2(r4.x);
          r7.z = 8 + r7.z;
          r4.x = r7.z * r4.x;
          r4.x = 0.0397887342 * r4.x;
          r4.x = min(1, r4.x);
          r7.z = saturate(r1.x + r1.x);
          r7.x = r7.x * r7.y + -r4.x;
          r4.x = r7.z * r7.x + r4.x;
          r13.xyz = r4.xxx * r3.www;
          r13.w = dot(r13.zzz, float3(0.212639004,0.715168655,0.0721923187));
          r14.xyz = r6.wxy;
          r14.w = 1;
          r10.xyzw = r14.xyzw * r13.xyzw;
        } else {
          if (r4.y != 0) {
            r7.xy = float2(0.0799999982,0.400000006) * r1.yx;
            r13.xyz = -r1.yyy * float3(0.0799999982,0.0799999982,0.0799999982) + r5.xzw;
            r13.xyz = r2.xxx * r13.xyz + r7.xxx;
            r3.w = saturate(dot(r2.yzw, r3.xyz));
            r14.xyz = r0.xyz * r1.www + SkyLightStruct.m_lightDirection.xyz;
            r4.x = dot(r14.xyz, r14.xyz);
            r4.x = rsqrt(r4.x);
            r14.xyz = r14.xyz * r4.xxx;
            r4.x = dot(r14.xyz, SkyLightStruct.m_lightDirection.xyz);
            r7.x = saturate(dot(r2.yzw, r14.xyz));
            r7.z = r1.x * r1.x;
            r7.x = r7.x * r7.x;
            r9.w = r1.x * r1.x + -1;
            r9.w = r7.x * r9.w + 1;
            r9.w = r9.w * r9.w;
            r9.w = 3.14159274 * r9.w;
            r7.z = r7.z / r9.w;
            r14.xy = r1.xx * float2(0.5,0.200000003) + float2(0.5,0.5);
            r9.w = r4.z * r4.z;
            r14.xy = r14.xy * r14.xy;
            r13.w = -r4.z * r4.z + 1;
            r14.zw = r14.xy * r13.ww;
            r9.w = max(1.00000005e-034, r9.w);
            r14.zw = r14.zw / r9.ww;
            r14.zw = float2(1,1) + r14.zw;
            r14.zw = sqrt(r14.zw);
            r14.zw = float2(1,1) + r14.zw;
            r9.w = r3.w * r3.w;
            r3.w = -r3.w * r3.w + 1;
            r14.xy = r14.xy * r3.ww;
            r3.w = max(1.00000005e-034, r9.w);
            r14.xy = r14.xy / r3.ww;
            r14.xy = float2(1,1) + r14.xy;
            r14.xy = sqrt(r14.xy);
            r14.xy = float2(1,1) + r14.xy;
            r14.xyzw = float4(2,2,2,2) / r14.xyzw;
            r14.xy = r14.zw * r14.xy;
            r3.w = dot(r13.xyz, float3(0.333333343,0.333333343,0.333333343));
            r3.w = saturate(50 * r3.w);
            r4.x = 1 + -r4.x;
            r9.w = r4.x * r4.x;
            r9.w = r9.w * r9.w;
            r15.xyz = r3.www + -r13.xyz;
            r15.xyz = r15.xyz * r9.www;
            r13.xyz = r15.xyz * r4.xxx + r13.xyz;
            r3.w = r14.x * r7.z;
            r15.xyz = r3.www * r13.xyz;
            r15.w = dot(r15.xyz, float3(0.212639004,0.715168655,0.0721923187));
            r3.w = r7.y * r7.y;
            r4.x = r7.y * r7.y + -1;
            r4.x = r7.x * r4.x + 1;
            r4.x = r4.x * r4.x;
            r4.x = 3.14159274 * r4.x;
            r3.w = r3.w / r4.x;
            r3.w = r3.w * r14.y;
            r13.xyz = r3.www * r13.xyz;
            r13.w = dot(r13.xyz, float3(0.212639004,0.715168655,0.0721923187));
            r13.xyzw = float4(0.150000006,0.150000006,0.150000006,0.150000006) * r13.xyzw;
            r10.xyzw = r15.xyzw * float4(0.850000024,0.850000024,0.850000024,0.850000024) + r13.xyzw;
          } else {
            r3.w = cmp((int)r0.w == 5);
            r4.x = saturate(dot(r5.xzw, float3(0.212639004,0.715168655,0.0721923187)));
            r4.x = r4.x * 1.66666663 + 1.33333337;
            r7.xyz = r6.wxy * r1.xxx;
            r7.xyz = r7.xyz * float3(0.25,0.25,0.25) + r2.yzw;
            r4.x = 1 / r4.x;
            r9.w = dot(-SkyLightStruct.m_lightDirection.xyz, r7.xyz);
            r13.x = r4.x * r4.x;
            r13.y = -r9.w * r9.w + 1;
            r13.y = -r13.x * r13.y + 1;
            r13.z = sqrt(r13.y);
            r9.w = r4.x * r9.w + -r13.z;
            r14.xyz = r9.www * r7.xyz;
            r14.xyz = r4.xxx * SkyLightStruct.m_lightDirection.xyz + r14.xyz;
            r9.w = cmp(0 < r13.y);
            r9.w = r9.w ? 1.000000 : 0;
            r13.yzw = r14.xyz * r9.www;
            r14.w = dot(-r3.xyz, r7.xyz);
            r15.x = -r14.w * r14.w + 1;
            r13.x = -r13.x * r15.x + 1;
            r15.x = sqrt(r13.x);
            r14.w = r4.x * r14.w + -r15.x;
            r7.xyz = r14.www * r7.xyz;
            r7.xyz = r4.xxx * r3.xyz + r7.xyz;
            r4.x = cmp(0 < r13.x);
            r4.x = r4.x ? 1.000000 : 0;
            r7.xyz = r7.xyz * r4.xxx;
            r0.xyz = r0.xyz * r1.www + SkyLightStruct.m_lightDirection.xyz;
            r1.w = dot(r0.xyz, r0.xyz);
            r1.w = rsqrt(r1.w);
            r0.xyz = r1.www * r0.xyz;
            r1.w = saturate(dot(r2.yzw, r3.xyz));
            r4.x = saturate(dot(r2.yzw, r0.xyz));
            r13.x = dot(r0.xyz, SkyLightStruct.m_lightDirection.xyz);
            r14.w = saturate(r13.x);
            r15.x = dot(r0.yzx, r6.xyw);
            r15.yzw = r6.ywx * r2.zwy;
            r15.yzw = r6.xyw * r2.wyz + -r15.yzw;
            r16.x = dot(r15.yzw, r15.yzw);
            r16.x = rsqrt(r16.x);
            r15.yzw = r16.xxx * r15.yzw;
            r0.x = dot(r0.xyz, r15.yzw);
            r0.yz = float2(0.0799999982,3.14159274) * r1.yx;
            r16.xyz = -r1.yyy * float3(0.0799999982,0.0799999982,0.0799999982) + r5.xzw;
            r16.xyz = r2.xxx * r16.xyz + r0.yyy;
            r0.y = dot(r16.xyz, float3(0.333333343,0.333333343,0.333333343));
            r0.y = saturate(50 * r0.y);
            r1.y = 1 + -r14.w;
            r14.w = r1.y * r1.y;
            r14.w = r14.w * r14.w;
            r17.xyz = r0.yyy + -r16.xyz;
            r18.xyz = r17.xyz * r14.www;
            r18.xyz = r18.xyz * r1.yyy + r16.xyz;
            r0.y = r1.x * r1.x;
            r1.y = r4.x * r4.x;
            r14.w = r15.x * r15.x;
            r14.w = r14.w / r0.y;
            r0.x = r0.x * r0.x + r14.w;
            r0.x = r4.x * r4.x + r0.x;
            r0.x = r0.x * r0.x;
            r0.x = r0.x * r0.z;
            r0.x = 1 / r0.x;
            r4.x = r4.z * r4.z;
            r14.w = -r4.z * r4.z + 1;
            r15.x = r14.w * r0.y;
            r4.x = max(1.00000005e-034, r4.x);
            r15.x = r15.x / r4.x;
            r15.x = 1 + r15.x;
            r15.x = sqrt(r15.x);
            r15.x = 1 + r15.x;
            r15.x = 2 / r15.x;
            r16.w = r1.w * r1.w;
            r1.w = -r1.w * r1.w + 1;
            r17.w = r1.w * r0.y;
            r16.w = max(1.00000005e-034, r16.w);
            r17.w = r17.w / r16.w;
            r17.w = 1 + r17.w;
            r17.w = sqrt(r17.w);
            r17.w = 1 + r17.w;
            r17.w = 2 / r17.w;
            r15.x = r17.w * r15.x;
            r0.x = r15.x * r0.x;
            r18.xyz = saturate(r0.xxx * r18.xyz);
            r18.xyz = r18.xyz * r7.www;
            r19.xyz = float3(0.25,0.25,0.25) * r18.xyz;
            r14.xyz = -r14.xyz * r9.www + -r7.xyz;
            r0.x = dot(r14.xyz, r14.xyz);
            r0.x = rsqrt(r0.x);
            r14.xyz = r14.xyz * r0.xxx;
            r0.x = saturate(dot(r2.yzw, -r13.yzw));
            r7.x = saturate(dot(r2.yzw, -r7.xyz));
            r2.y = saturate(dot(r2.yzw, r14.xyz));
            r2.z = saturate(dot(r14.xyz, -r13.yzw));
            r2.w = dot(r14.yzx, r6.xyw);
            r7.y = dot(r14.xyz, r15.yzw);
            r2.z = 1 + -r2.z;
            r7.z = r2.z * r2.z;
            r7.z = r7.z * r7.z;
            r13.yzw = r17.xyz * r7.zzz;
            r13.yzw = r13.yzw * r2.zzz + r16.xyz;
            r2.z = r2.w * r2.w;
            r2.z = r2.z / r0.y;
            r2.z = r7.y * r7.y + r2.z;
            r2.y = r2.y * r2.y + r2.z;
            r2.y = r2.y * r2.y;
            r0.z = r2.y * r0.z;
            r0.z = 1 / r0.z;
            r2.y = r0.x * r0.x;
            r0.x = -r0.x * r0.x + 1;
            r0.x = r0.y * r0.x;
            r2.y = max(1.00000005e-034, r2.y);
            r0.x = r0.x / r2.y;
            r0.x = 1 + r0.x;
            r0.x = sqrt(r0.x);
            r0.x = 1 + r0.x;
            r0.x = 2 / r0.x;
            r2.y = r7.x * r7.x;
            r2.z = -r7.x * r7.x + 1;
            r2.z = r2.z * r0.y;
            r2.y = max(1.00000005e-034, r2.y);
            r2.y = r2.z / r2.y;
            r2.y = 1 + r2.y;
            r2.y = sqrt(r2.y);
            r2.y = 1 + r2.y;
            r2.y = 2 / r2.y;
            r0.x = r2.y * r0.x;
            r0.x = r0.z * r0.x;
            r2.yzw = saturate(r0.xxx * r13.yzw);
            r7.xyz = sqrt(r5.xzw);
            r2.yzw = -r18.xyz * float3(0.25,0.25,0.25) + r2.yzw;
            r7.xyz = r7.xyz * r2.yzw + r19.xyz;
            r7.w = dot(r7.xyz, float3(0.212639004,0.715168655,0.0721923187));
            r0.x = r1.x * r1.x + -1;
            r0.x = r1.y * r0.x + 1;
            r0.x = r0.x * r0.x;
            r0.x = 3.14159274 * r0.x;
            r0.x = r0.y / r0.x;
            r0.y = r1.x * 0.5 + 0.5;
            r0.y = r0.y * r0.y;
            r0.z = r0.y * r14.w;
            r0.z = r0.z / r4.x;
            r0.z = 1 + r0.z;
            r0.z = sqrt(r0.z);
            r0.z = 1 + r0.z;
            r0.y = r0.y * r1.w;
            r0.y = r0.y / r16.w;
            r0.y = 1 + r0.y;
            r0.y = sqrt(r0.y);
            r0.y = 1 + r0.y;
            r0.yz = float2(2,2) / r0.yz;
            r0.y = r0.z * r0.y;
            r0.z = 1 + -r13.x;
            r1.x = r0.z * r0.z;
            r1.x = r1.x * r1.x;
            r1.xyw = r17.xyz * r1.xxx;
            r1.xyw = r1.xyw * r0.zzz + r16.xyz;
            r0.x = r0.x * r0.y;
            r13.xyz = r0.xxx * r1.xyw;
            r13.w = dot(r13.xyz, float3(0.212639004,0.715168655,0.0721923187));
            r10.xyzw = r3.wwww ? r7.xyzw : r13.xyzw;
          }
        }
      }
      if (r4.w != 0) {
        r11.xyzw = float4(0,0,0,0);
      } else {
        r0.x = cmp((int)r0.w == 3);
        if (r0.x != 0) {
          r11.xyzw = float4(0,0,0,0);
        } else {
          if (r4.y != 0) {
            r11.xyzw = float4(0,0,0,0);
          } else {
            r0.x = dot(r6.wxy, SkyLightStruct.m_lightDirection.xyz);
            r0.x = -r0.x * r0.x + 1;
            r0.x = sqrt(r0.x);
            r0.y = -1.5 * r6.z;
            r0.z = dot(r9.xyz, SkyLightStruct.m_lightDirection.xyz);
            r1.x = -r6.z * -1.5 + r0.z;
            r0.y = 1 / -r0.y;
            r0.y = saturate(r1.x * r0.y);
            r1.x = r0.y * -2 + 3;
            r0.y = r0.y * r0.y;
            r0.y = r1.x * r0.y;
            r7.xyz = float3(0.318309873,0.318309873,0.318309873) * r5.xzw;
            r7.w = 0.0572957806;
            r1.x = 1 + -r2.x;
            r2.xyzw = r7.xyzw * r1.xxxx;
            r2.xyzw = r2.xyzw * r0.yyyy;
            r2.xyzw = r2.xyzw * r0.xxxx;
            r2.xyzw = r2.xyzw * r6.zzzz;
            r2.xyzw = float4(0.25,0.25,0.25,0.25) * r2.xyzw;
            r0.xy = cmp((int2)r0.ww == int2(5,8));
            r1.y = max(9.99999997e-007, abs(r0.z));
            r1.y = rcp(r1.y);
            r0.z = r1.y * r0.z;
            r1.y = dot(r9.xyz, r3.xyz);
            r1.w = max(9.99999997e-007, abs(r1.y));
            r1.w = rcp(r1.w);
            r1.y = r1.y * r1.w;
            r0.z = cmp(r0.z == r1.y);
            r3.w = r0.z ? 0 : 1;
            r1.xyw = r6.wxy * r1.xxx;
            r3.xyz = r1.xyw * r3.www;
            r3.xyzw = float4(0.318309873,0.318309873,0.318309873,0.180000007) * r3.xyzw;
            r6.xyz = r6.www * r5.xzw;
            r7.xyzw = float4(0.0795774683,0.0795774683,0.0795774683,0.0143239452) * r6.xyzw;
            r3.xyzw = r0.yyyy ? r3.xyzw : r7.xyzw;
            r11.xyzw = r0.xxxx ? r2.xyzw : r3.xyzw;
          }
        }
      }
    }
    r0.x = r4.y ? 1 : r5.y;
    r0.y = dot(r11.xyz, float3(0.212639004,0.715168655,0.0721923187));
    r0.z = r6.w * r1.z;
    r0.y = r0.y + -r0.x;
    r0.y = r0.z * r0.y + r0.x;
    r0.x = r0.w ? r0.x : r0.y;
    r2.xyzw = r10.xyzw * r4.zzzz;
    r0.xyzw = r12.xyzw * r0.xxxx + r2.xyzw;
    r0.xyzw = r0.xyzw + r11.xyzw;
    r0.xyzw = r0.xyzw * r1.zzzz;
    r8.xyz = SkyLightStruct.m_lightIrradiance.xyz;
    r0.xyzw = r8.xyzw * r0.xyzw;
  } else {
    r0.xyzw = float4(0,0,0,0);
  }
  r0.xyz = ExposureScale * r0.xyz;
  r0.xyz = max(float3(0,0,0), r0.xyz);
  o0.xyz = min(float3(64512,64512,64512), r0.xyz);
  r0.x = ExposureScale * r0.w;
  r0.x = max(0, r0.x);
  o0.w = min(64512, r0.x);
  return;

}
