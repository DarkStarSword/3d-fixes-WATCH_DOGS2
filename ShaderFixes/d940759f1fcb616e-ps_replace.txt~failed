// hlsltool.py --fix-wd2-unproject -i --only-autofixed --fxc /home/dss/fxc.exe d940759f1fcb616e-ps_replace.txt
// ---- Created with 3Dmigoto v1.2.42 on Tue Dec 27 10:54:47 2016

cbuffer Global : register(b0)
{
  float4 EnvironmentLuminances : packoffset(c0);
  float4 FakeEarthShadowPlane : packoffset(c1);
  float4 GlobalLightsIntensity : packoffset(c2);
  float4 GlobalWeatherControl : packoffset(c3);
  float4 MaterialWetnessParams[22] : packoffset(c4);
  float4 WindGlobalTurbulence : packoffset(c26);
  float4 WindVelocityTextureCoverage : packoffset(c27);
  float4 WorldLoadingRingSizes[2] : packoffset(c28);

  struct
  {
    float debugValue0;
    float debugValue1;
    float debugValue2;
    float debugValue3;
  } DebugValues : packoffset(c30);

  float3 SunShadowDirection : packoffset(c31);
  float CrowdAnimationStartTime : packoffset(c31.w);
  float3 WindGlobalNoiseTextureChannelSel : packoffset(c32);
  float GlobalReflectionTextureBlendRatio : packoffset(c32.w);
  float3 WindGlobalNoiseTextureCoverage : packoffset(c33);
  float GlobalWaterLevel : packoffset(c33.w);

  struct
  {
    float time;
    float staticReflectionIntensity;
    float gameDeltaTime;
  } GlobalScalars : packoffset(c34);

  float RcpStaticReflectionExposureScale : packoffset(c34.w);
  float2 GlobalNoiseSampler2DSquareSize : packoffset(c35);
  float SandstormIntensity : packoffset(c35.z);
  float StaticReflectionIntensityDest : packoffset(c35.w);
  float2 WindNoiseDeltaVector : packoffset(c36);
  float TimeOfDay : packoffset(c36.z);
  float VertexAOIntensity : packoffset(c36.w);
  float2 WindVector : packoffset(c37);
}

cbuffer Viewport : register(b1)
{
  float4 CameraNearPlaneSize : packoffset(c0);
  float4x4 DepthTextureTransform : packoffset(c1);
  float4 FSMClipPlanes : packoffset(c5);
  float4 FacettedShadowCastParams : packoffset(c6);
  float4 FogValues0 : packoffset(c7);
  float4 FogValues1 : packoffset(c8);
  float4x4 InvProjectionMatrix : packoffset(c9);
  float4x4 InvProjectionMatrixDepth : packoffset(c13);
  float4x3 InvViewMatrix : packoffset(c17);
  float4x4 PreviousViewProjectionMatrix : packoffset(c20);
  float4x4 ProjectionMatrix : packoffset(c24);
  float4 RainOcclusionFadeParams : packoffset(c28);
  float4x4 RainOcclusionProjectionMatrix : packoffset(c29);
  float4 RainOcclusionShadowMapSize : packoffset(c33);
  float4 ReflectionVolumeDebugColors[15] : packoffset(c34);
  float4 VPosOffset : packoffset(c49);
  float4 VPosScale : packoffset(c50);
  float4x3 ViewMatrix : packoffset(c51);
  float4x4 ViewProjectionMatrix : packoffset(c54);
  float4x4 ViewRotProjectionMatrix : packoffset(c58);
  float4x4 ViewRotProjectionMatrixPure : packoffset(c62);
  float4 ViewportSize : packoffset(c66);

  struct
  {
    float near;
    float far;
    float view;
    float oneOverView;
  } CameraDistances : packoffset(c67);


  struct
  {
    float4x4 inverseTransform;
    float3 rcpFadeRangePositive;
    float textureArrayIndexAsFloat;
    float3 rcpFadeRangeNegative;
    float fadeFactor;
    float2 multipliers;
    uint parallaxCorrection;
    float padding0;
  } ReflectionVolumes[15] : packoffset(c68);

  float3 CameraDirection : packoffset(c173);
  float DefaultReflectionTextureArrayIndexAsFloat : packoffset(c173.w);
  float3 CameraPosition : packoffset(c174);
  float DynamicCubeMapReflectionTextureMaxMipIndex : packoffset(c174.w);
  float3 CullingCameraPosition : packoffset(c175);
  float ExposedWhitePointOverExposureScale : packoffset(c175.w);
  float3 FogColorVector : packoffset(c176);
  float ExposureScale : packoffset(c176.w);
  float3 OppositeFogColorDelta : packoffset(c177);
  float MaxParaboloidReflectionMipIndex : packoffset(c177.w);
  float3 SideFogColor : packoffset(c178);
  float MaxStaticReflectionMipIndex : packoffset(c178.w);
  float3 SunFogColorDelta : packoffset(c179);
  float MeasuredExposureScale : packoffset(c179.w);
  float3 TemporalFilteringParams : packoffset(c180);
  float RaindropRippleScale : packoffset(c180.w);
  float3 UncompressDepthWeights : packoffset(c181);
  float ReflectionScaleDistanceMul : packoffset(c181.w);
  float3 UncompressDepthWeightsWS : packoffset(c182);
  float ReflectionScaleStrength : packoffset(c182.w);
  float3 ViewPoint : packoffset(c183);
  float SkyParaboloidTextureMaxMipIndex : packoffset(c183.w);
  float2 DefaultReflectionMultipliers : packoffset(c184);
  bool UseOnlySkyReflection : packoffset(c184.z);
  float2 ReflectionGIControl : packoffset(c185);
  uint2 SelectedPixel : packoffset(c185.z);
}

cbuffer SkyBuffer : register(b2)
{

  struct
  {
    float4 m_lightIrradiance;
    float4 m_lightIrradianceWithoutCloudsCoverage;
    float4 m_lightDirection;
    float4 m_cloudLightVector;
    float4 m_cloudIrradiance;
    float4 m_environmentIrradianceSHRed;
    float4 m_environmentIrradianceSHGreen;
    float4 m_environmentIrradianceSHBlue;
    float4 m_environmentIrradianceAverage;
    float4 m_giDefaultProbeIrradiance[3];
    float4 m_giDefaultProbeTint[3];
    float4 m_giDirectEnvironmentIrradiance[3];
    float4 m_giBouncedEnvironmentIrradiance[4];
    float4 m_cloudAndSkyIrradianceSH[9];
    float4 m_skyOnlyIrradianceSH[9];
  } SkyLightStruct : packoffset(c0);

}

cbuffer LightData : register(b3)
{

  struct
  {
    float4x4 CascadedShadowProjections[4];
    float4 CascadedShadowSliceFadeParams;
    float4 CascadedBlurKernelMinSizes;
    float4 CascadedBlurKernelMaxSizes;
    float4 LightCapsuleDivLength;
    float4 LightFadingClipPlanes[8];
    float4 LightIESParams;
    float4 LightProjectedVideoUnpack[8];
    float4 LightShadowFactor;
    float4 LightShadowMapSize;
    float4x4 LightSpotShadowProjections;
    float4x4 LightVolumeTransform;
    float3 LightCapsuleMulLength;
    float3 LightDirection;
    float3 LightColor;
    float3 LightPivotPosition;
    float3 LightPosition;
    float2 LightCapsuleParams;
    float2 LightSpotConeFactors;
    float4 LightAttenuation;
    float2 LightSpotShadowAngleFactors;
    float LightSpotNearClipFactor;
    float CascadedShadowGrazingAngleScale;
  } LightDatas : packoffset(c0);

}

SamplerState Global__PreIntegratedSkinDiffuseTexture__SampObj___s : register(s0);
SamplerState ColorClamp_s : register(s1);
SamplerState ColorWrap_s : register(s2);
Texture2D<float4> Global__PreIntegratedSkinDiffuseTexture__TexObj__ : register(t0);
Texture2D<float2> Global__IBLBRDFTexture : register(t1);
Texture2D<float4> Viewport__DepthVPSampler__TexObj__ : register(t2);
Texture2D<float4> Viewport__SkyParaboloidTexture : register(t3);
TextureCubeArray<float4> Viewport__DynamicCubeMapReflectionTextureArray : register(t4);
Texture2D<float4> DeferredLightingCommon__AlbedoTexture__TexObj__ : register(t5);
Texture2D<float4> DeferredLightingCommon__NormalTexture__TexObj__ : register(t6);
Texture2D<float4> DeferredLightingCommon__OtherTexture__TexObj__ : register(t7);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21;
  uint4 bitmask, uiDest;
  float4 fDest;

// WATCH_DOGS2 unprojection fix inserted by DarkStarSword's hlsltool.py:
// hlsltool.py --fix-wd2-unproject -i --only-autofixed --fxc /home/dss/fxc.exe d940759f1fcb616e-ps_replace.txt

  r0.xy = v0.xy * VPosScale.zw + VPosOffset.zw;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0,0);
  r0.z = Viewport__DepthVPSampler__TexObj__.Load(r1.xyw).x;
  r0.w = 1;
  r2.x = dot(r0.zw, InvProjectionMatrix._m22_m32);
  r0.z = dot(r0.zw, InvProjectionMatrix._m23_m33);
  r0.z = -r2.x / r0.z;
  r2.z = -r0.z;
  r2.xy = r2.zz * r0.xy;

// Fix lights, note depth is negative (or could have used r0.z):
float4 s = StereoParams.Load(0);
r2.x -= s.x * (-r2.z - s.y) * InvProjectionMatrix._m00;

  r2.w = 1;
  r0.x = dot(r2.xyzw, InvViewMatrix._m00_m10_m20_m30);
  r0.y = dot(r2.xyzw, InvViewMatrix._m01_m11_m21_m31);
  r0.z = dot(r2.xyzw, InvViewMatrix._m02_m12_m22_m32);
  r2.xyzw = DeferredLightingCommon__AlbedoTexture__TexObj__.Load(r1.xyw).wxyz;
  r3.xyzw = DeferredLightingCommon__NormalTexture__TexObj__.Load(r1.xyw).xyzw;
  r1.xyzw = DeferredLightingCommon__OtherTexture__TexObj__.Load(r1.xyz).zyxw;
  r4.x = r1.w * 255 + 0.5;
  r4.x = floor(r4.x);
  r4.x = (uint)r4.x;
  r4.x = (uint)r4.x >> 5;
  r4.y = dot(r3.xyz, r3.xyz);
  r4.y = rsqrt(r4.y);
  r4.yzw = r4.yyy * r3.xyz;
  r5.xyz = cmp((int3)r4.xxx == int3(1,4,0));
  r5.w = cmp(r2.x >= 0.75);
  r6.x = -0.75 + r2.x;
  r6.x = r6.x * -0.599999905 + 1;
  r5.w = r5.w ? r6.x : 1;
  r5.w = r5.y ? r5.w : r2.x;
  r5.w = r5.x ? 1 : r5.w;
  r6.xyz = CameraPosition.xyz + -r0.xyz;
  r6.w = dot(r6.xyz, r6.xyz);
  r6.w = rsqrt(r6.w);
  r7.xyz = r6.xyz * r6.www;
  r8.yzw = r5.www * r2.yzw;
  if (r5.x != 0) {
    r2.w = r3.w * 0.5 + 0.5;
    r2.w = r2.w * 65535 + 0.5;
    r2.w = (uint)r2.w;
    r9.xy = (int2)r2.ww & int2(255,0);
    r9.xy = (uint2)r9.xy;
    r9.xz = float2(0.00392156886,1.53186284e-005) * r9.xy;
    r2.w = 255 * r2.x;
    r2.w = (uint)r2.w;
    r10.xy = (int2)r2.ww & int2(15,240);
    r10.xy = (uint2)r10.xy;
    r9.yw = float2(0.00416666688,0.0666666701) * r10.yx;
    r10.w = 0;
    r8.x = r8.y;
    r11.x = 0;
  } else {
    r2.w = r1.y * r1.y;
    r1.y = max(0.00100000005, r2.w);
    r2.w = cmp((int)r4.x == 2);
    if (r2.w != 0) {
      r2.w = r3.w * 0.5 + 0.5;
      r2.w = r2.w * 65535 + 0.5;
      r2.w = (uint)r2.w;
      r12.xy = (int2)r2.ww & int2(255,0);
      r12.xy = (uint2)r12.xy;
      r12.z = r1.z;
      r12.xyz = r12.xyz * float3(0.00784313772,3.06372567e-005,2) + float3(-1,-1,-1);
      r2.w = 1 + -r2.x;
      r2.w = r8.y * r2.w;
      r8.x = r2.w * 0.5 + r8.y;
      r2.w = dot(r12.xyz, r12.xyz);
      r2.w = rsqrt(r2.w);
      r9.xzw = r12.xyz * r2.www;
      r9.y = 0;
      r1.z = 0.5;
      r10.w = 0;
      r11.x = 0;
    } else {
      r2.w = cmp((int)r4.x == 3);
      if (r2.w != 0) {
        r2.w = r3.w * 0.5 + 0.5;
        r2.w = r2.w * 65535 + 0.5;
        r2.w = (uint)r2.w;
        r12.xyzw = (int4)r2.wwww & int4(0,2016,31,31);
        r12.xyzw = (uint4)r12.xyzw;
        r13.xyz = cmp(float3(1.25395,81.5471954,2568.0896) >= r12.wyx);
        r2.w = 0.00249675405 * r12.w;
        r14.xyz = r12.zyx * float3(0.0322580636,0.000496031775,1.57510076e-005) + float3(0.0549999997,0.0549999997,0.0549999997);
        r14.xyz = float3(0.947867334,0.947867334,0.947867334) * r14.xyz;
        r14.xyz = log2(r14.xyz);
        r14.xyz = float3(2.4000001,2.4000001,2.4000001) * r14.xyz;
        r14.xyz = exp2(r14.xyz);
        r9.x = r13.x ? r2.w : r14.x;
        r12.xy = float2(3.83925508e-005,1.21911819e-006) * r12.yx;
        r9.zw = r13.yz ? r12.xy : r14.yz;
        r9.y = 0;
        r10.w = 0;
        r11.x = 0;
      } else {
        if (r5.y != 0) {
          r2.w = r3.w * 32767 + 32767;
          r2.w = (uint)r2.w;
          r7.w = (int)r2.w & 255;
          r7.w = (uint)r7.w;
          r7.w = 0.0123199718 * r7.w;
          if (8 == 0) r2.w = 0; else if (8+8 < 32) {           r2.w = (uint)r2.w << (32-(8 + 8)); r2.w = (uint)r2.w >> (32-8);          } else r2.w = (uint)r2.w >> 8;
          r2.w = (uint)r2.w;
          r2.w = r2.w * 0.0246399436 + -3.14159274;
          sincos(r7.w, r12.x, r13.x);
          sincos(r2.w, r14.x, r15.x);
          r15.x = r15.x * r12.x;
          r15.y = r14.x * r12.x;
          r15.z = r13.x;
          r2.w = dot(r15.xyz, r15.xyz);
          r2.w = rsqrt(r2.w);
          r9.xzw = r15.xyz * r2.www;
          r10.w = saturate(0.25 * r2.x);
          r9.y = 0;
          r11.x = 0;
        } else {
          r2.w = cmp((int)r4.x == 5);
          r7.w = cmp(r3.z < 0.899999976);
          r12.xyz = r7.www ? float3(0,1,0) : float3(1,0,0);
          r13.xyz = r12.xyz * r3.zxy;
          r12.xyz = r3.yzx * r12.yzx + -r13.xyz;
          r7.w = dot(r12.xyz, r12.xyz);
          r7.w = rsqrt(r7.w);
          r12.xyz = r12.xyz * r7.www;
          r13.xyz = r12.yzx * r3.zxy;
          r3.xyz = r3.yzx * r12.zxy + -r13.xyz;
          r7.w = dot(r3.xyz, r3.xyz);
          r7.w = rsqrt(r7.w);
          r3.xyz = r7.www * r3.xyz;
          r7.w = r3.w * 2 + -1;
          r7.w = 3.14159274 * r7.w;
          sincos(r7.w, r13.x, r14.x);
          r12.xyz = r13.xxx * r12.xyz;
          r12.xyz = r3.xyz * r14.xxx + r12.xyz;
          r3.x = r3.w * 0.5 + 0.5;
          r3.x = r3.x * 65535 + 0.5;
          r3.x = (uint)r3.x;
          r3.xy = (int2)r3.xx & int2(255,0);
          r3.xy = (uint2)r3.xy;
          r3.x = 0.00392156886 * r3.x;
          r3.z = r3.y * 3.06372567e-005 + -1;
          r3.xy = r4.xx ? float2(0,0) : r3.xz;
          r12.w = r1.x;
          r3.z = 0;
          r9.xyzw = r2.wwww ? r12.xwyz : r3.xzzz;
          r2.yz = float2(0,0);
          r3.w = r12.w;
          r11.xyz = r2.www ? r2.zxy : r3.yzw;
          r10.w = r11.y;
          r1.x = r11.z;
        }
      }
      r8.x = r8.y;
    }
  }
  r2.x = dot(r0.xyz, FakeEarthShadowPlane.xyz);
  r2.x = saturate(FakeEarthShadowPlane.w + r2.x);
  r2.x = r2.x * LightDatas.LightShadowFactor.x + LightDatas.LightShadowFactor.y;
  r2.y = cmp(0 < r2.x);
  r2.z = cmp(0 < r9.x);
  r2.z = r2.z ? r5.z : 0;
  r2.y = (int)r2.z | (int)r2.y;
  if (r2.y != 0) {
    r3.w = dot(SkyLightStruct.m_lightIrradiance.xyz, float3(0.212639004,0.715168655,0.0721923187));
    r2.y = dot(r4.yzw, SkyLightStruct.m_lightDirection.xyz);
    r2.z = saturate(r2.y);
    r2.w = cmp((int)r4.x == 2);
    r5.z = dot(r9.xzw, r9.xzw);
    r5.z = rsqrt(r5.z);
    r11.yzw = r9.xzw * r5.zzz;
    r5.z = dot(r11.yzw, SkyLightStruct.m_lightDirection.xyz);
    r5.z = 1 + r5.z;
    r5.z = saturate(0.5 * r5.z);
    r7.w = r5.z * r5.z;
    r5.z = r7.w * r5.z;
    r11.yzw = r2.www ? r9.xzw : r4.yzw;
    r5.z = r2.w ? r5.z : r2.z;
    if (r5.x != 0) {
      r12.xyzw = saturate(r9.xyzw);
      r13.xy = saturate(r1.xy);
      r14.xyz = log2(r8.xzw);
      r15.xyz = r14.xyz * r12.yyy;
      r15.xyz = float3(-12.7799997,-12.7799997,-12.7799997) * r15.xyz;
      r14.xyz = r14.xyz * float3(-0.0199999996,-0.0199999996,-0.0199999996) + r15.xyz;
      r7.w = cmp(r12.x == 0.000000);
      r8.y = 1 + -r13.x;
      r15.xyz = r8.xzw * r8.yyy;
      r15.xyz = float3(0.318309873,0.318309873,0.318309873) * r15.xyz;
      r16.xyz = r14.xyz * -r12.xxx;
      r16.xyz = exp2(r16.xyz);
      r16.xyz = r16.xyz * r15.xyz;
      r16.xyz = float3(0.444444448,0.444444448,0.444444448) * r16.xyz;
      r15.xyz = r7.www ? r15.xyz : r16.xyz;
      r15.w = 0.180000007;
      r8.y = 0.0799999982 * r12.w;
      r12.x = r12.x * 48.75 + 1.25;
      r12.y = r13.y * r13.y;
      r12.z = r12.z * r12.z;
      r12.yz = max(float2(0.00100000005,0.00100000005), r12.yz);
      r13.y = cmp(0 < r2.y);
      r13.z = cmp(r2.y < 0);
      r13.y = (int)-r13.y + (int)r13.z;
      r13.y = (int)r13.y;
      r13.z = r2.y * r2.y + -1;
      r13.z = r13.z * 0.666860044 + 1;
      r13.z = sqrt(r13.z);
      r13.y = r13.y * r13.z;
      r2.y = r2.y * 0.666860044 + -r13.y;
      r13.yzw = float3(0.666860044,0.666860044,0.666860044) * SkyLightStruct.m_lightDirection.xyz;
      r13.yzw = r2.yyy * r4.yzw + -r13.yzw;
      r16.xyz = -SkyLightStruct.m_lightDirection.xyz + -r13.yzw;
      r13.yzw = r12.yyy * r16.xyz + r13.yzw;
      r2.y = dot(r13.yzw, r13.yzw);
      r2.y = rsqrt(r2.y);
      r16.xyz = r13.yzw * r2.yyy;
      r14.w = dot(r7.xyz, r4.yzw);
      r16.w = cmp(0 < r14.w);
      r17.x = cmp(r14.w < 0);
      r16.w = (int)-r16.w + (int)r17.x;
      r16.w = (int)r16.w;
      r17.x = r14.w * r14.w + -1;
      r17.x = r17.x * 0.666860044 + 1;
      r17.x = sqrt(r17.x);
      r16.w = r17.x * r16.w;
      r16.w = r14.w * 0.666860044 + -r16.w;
      r17.xyz = float3(0.666860044,0.666860044,0.666860044) * r7.xyz;
      r17.xyz = r16.www * r4.yzw + -r17.xyz;
      r18.xyz = -r6.xyz * r6.www + -r17.xyz;
      r17.xyz = r12.yyy * r18.xyz + r17.xyz;
      r16.w = dot(r17.xyz, r17.xyz);
      r16.w = rsqrt(r16.w);
      r17.xyz = r17.xyz * r16.www;
      r16.w = dot(r4.yzw, r16.xyz);
      r16.w = -abs(r16.w) * abs(r16.w) + 1;
      r16.w = -r16.w * 0.444702327 + 1;
      r12.x = r12.x + r12.x;
      r16.w = sqrt(r16.w);
      r12.x = r12.x / r16.w;
      r14.w = saturate(r14.w);
      r18.xyz = r6.xyz * r6.www + SkyLightStruct.m_lightDirection.xyz;
      r16.w = dot(r18.xyz, r18.xyz);
      r16.w = rsqrt(r16.w);
      r18.xyz = r18.xyz * r16.www;
      r16.w = saturate(dot(r4.yzw, r18.xyz));
      r17.w = r12.y * r12.y;
      r16.w = r16.w * r16.w;
      r18.x = r12.y * r12.y + -1;
      r16.w = r16.w * r18.x + 1;
      r16.w = r16.w * r16.w;
      r16.w = 3.14159274 * r16.w;
      r16.w = r17.w / r16.w;
      r12.y = r12.y * 0.5 + 0.5;
      r17.w = r2.z * r2.z;
      r12.y = r12.y * r12.y;
      r18.x = -r2.z * r2.z + 1;
      r18.x = r18.x * r12.y;
      r17.w = max(1.00000005e-034, r17.w);
      r17.w = r18.x / r17.w;
      r17.w = 1 + r17.w;
      r17.w = sqrt(r17.w);
      r17.w = 1 + r17.w;
      r17.w = 2 / r17.w;
      r18.x = r14.w * r14.w;
      r14.w = -r14.w * r14.w + 1;
      r12.y = r14.w * r12.y;
      r14.w = max(1.00000005e-034, r18.x);
      r12.y = r12.y / r14.w;
      r12.y = 1 + r12.y;
      r12.y = sqrt(r12.y);
      r12.y = 1 + r12.y;
      r12.y = 2 / r12.y;
      r12.y = r17.w * r12.y;
      r18.xyz = r2.zzz * r2.zzz + float3(1.24869561,1.24878526,1.24869561);
      r18.xyz = sqrt(r18.xyz);
      r19.xyz = r18.zyz + -r2.zzz;
      r18.xyz = r18.xyz + r2.zzz;
      r20.xyz = r19.zyz * r19.zyz;
      r21.xyz = r18.zyz * r18.zyz;
      r21.xyz = r21.xyz + r21.xyz;
      r20.xyz = r20.xyz / r21.xyz;
      r18.xyz = r2.zzz * r18.xyz + float3(-1,-1,-1);
      r19.xyz = r2.zzz * r19.xyz + float3(1,1,1);
      r18.xyz = r18.xyz / r19.xyz;
      r18.xyz = r18.xyz * r18.xyz + float3(1,1,1);
      r18.xyz = r20.xyz * r18.xyz;
      r12.y = r16.w * r12.y;
      r18.xyz = r12.yyy * r18.xyz;
      r19.xyz = -r12.www * float3(0.0799999982,0.0799999982,0.0799999982) + r8.xzw;
      r19.xyz = r13.xxx * r19.xyz + r8.yyy;
      r8.y = saturate(dot(r4.yzw, -r17.xyz));
      r13.xyz = -r13.yzw * r2.yyy + -r17.xyz;
      r2.y = dot(r13.xyz, r13.xyz);
      r2.y = rsqrt(r2.y);
      r13.xyz = r13.xyz * r2.yyy;
      r2.y = dot(r13.xyz, -r16.xyz);
      r12.y = saturate(dot(r4.yzw, -r16.xyz));
      r12.w = saturate(dot(r4.yzw, r13.xyz));
      r13.x = r12.z * r12.z;
      r12.w = r12.w * r12.w;
      r13.y = r12.z * r12.z + -1;
      r12.w = r12.w * r13.y + 1;
      r12.w = r12.w * r12.w;
      r12.w = 3.14159274 * r12.w;
      r12.w = r13.x / r12.w;
      r12.z = r12.z * 0.5 + 0.5;
      r13.x = r12.y * r12.y;
      r12.z = r12.z * r12.z;
      r12.y = -r12.y * r12.y + 1;
      r12.y = r12.z * r12.y;
      r13.x = max(1.00000005e-034, r13.x);
      r12.y = r12.y / r13.x;
      r12.y = 1 + r12.y;
      r12.y = sqrt(r12.y);
      r12.y = 1 + r12.y;
      r12.y = 2 / r12.y;
      r13.x = r8.y * r8.y;
      r8.y = -r8.y * r8.y + 1;
      r8.y = r12.z * r8.y;
      r12.z = max(1.00000005e-034, r13.x);
      r8.y = r8.y / r12.z;
      r8.y = 1 + r8.y;
      r8.y = sqrt(r8.y);
      r8.y = 1 + r8.y;
      r8.y = 2 / r8.y;
      r8.y = r12.y * r8.y;
      r12.y = dot(r19.xyz, float3(0.333333343,0.333333343,0.333333343));
      r12.y = saturate(50 * r12.y);
      r2.y = 1 + -r2.y;
      r12.z = r2.y * r2.y;
      r12.z = r12.z * r12.z;
      r13.xyz = r12.yyy + -r19.xyz;
      r13.xyz = r13.xyz * r12.zzz;
      r13.xyz = r13.xyz * r2.yyy + r19.xyz;
      r2.y = r12.w * r8.y;
      r12.yzw = r2.yyy * r13.xyz;
      r13.xyz = -r14.xyz * r12.xxx;
      r13.xyz = exp2(r13.xyz);
      r13.xyz = r12.yzw * r13.xyz + r18.xyz;
      r12.xyz = r7.www ? r12.yzw : r13.xyz;
      r12.w = dot(r12.xyz, float3(0.212639004,0.715168655,0.0721923187));
      r13.xyzw = float4(0,0,0,0);
    } else {
      if (r2.w != 0) {
        r14.xyz = float3(0.318309873,0.318309873,0.318309873) * r8.xzw;
        r14.w = 0.0572957806;
        r2.y = 1 + -r1.x;
        r15.xyzw = r14.xyzw * r2.yyyy;
      } else {
        r2.y = cmp((int)r4.x == 3);
        if (r2.y != 0) {
          r14.xyz = r6.xyz * r6.www + SkyLightStruct.m_lightDirection.xyz;
          r2.y = dot(r14.xyz, r14.xyz);
          r2.y = rsqrt(r2.y);
          r14.xyz = r14.xyz * r2.yyy;
          r2.y = saturate(dot(r14.xyz, r7.xyz));
          r7.w = 0.0799999982 * r1.z;
          r2.y = 1 + -r2.y;
          r8.y = r2.y * r2.y;
          r8.y = r8.y * r8.y;
          r14.x = -r1.z * 0.0799999982 + 1;
          r8.y = r14.x * r8.y;
          r2.y = r8.y * r2.y + r7.w;
          r7.w = saturate(r1.y + r1.y);
          r14.w = r7.w * -r2.y + 1;
          r14.xyz = r14.www * r8.xzw;
          r15.xyzw = float4(0.318309873,0.318309873,0.318309873,0.0572957806) * r14.xyzw;
        } else {
          if (r5.y != 0) {
            r14.xyz = r11.yzw + -r9.xzw;
            r16.xyz = r14.xyz * float3(0.100000001,0.100000001,0.100000001) + r9.xzw;
            r2.y = dot(r16.xyz, r16.xyz);
            r2.y = rsqrt(r2.y);
            r16.xyz = r16.xyz * r2.yyy;
            r14.xyz = r14.xyz * float3(0.300000012,0.300000012,0.300000012) + r9.xzw;
            r2.y = dot(r14.xyz, r14.xyz);
            r2.y = rsqrt(r2.y);
            r14.xyz = r14.xyz * r2.yyy;
            r2.y = dot(r9.xzw, SkyLightStruct.m_lightDirection.xyz);
            r7.w = dot(r16.xyz, SkyLightStruct.m_lightDirection.xyz);
            r8.y = dot(r14.xyz, SkyLightStruct.m_lightDirection.xyz);
            r10.z = r2.y * 0.5 + 0.5;
            r14.xy = r10.zw * float2(0.984375,0.984375) + float2(0.0078125,0.0078125);
            r14.x = Global__PreIntegratedSkinDiffuseTexture__TexObj__.SampleLevel(Global__PreIntegratedSkinDiffuseTexture__SampObj___s, r14.xy, 0).x;
            r10.y = r7.w * 0.5 + 0.5;
            r10.yz = r10.yw * float2(0.984375,0.984375) + float2(0.0078125,0.0078125);
            r14.y = Global__PreIntegratedSkinDiffuseTexture__TexObj__.SampleLevel(Global__PreIntegratedSkinDiffuseTexture__SampObj___s, r10.yz, 0).y;
            r10.x = r8.y * 0.5 + 0.5;
            r10.xy = r10.xw * float2(0.984375,0.984375) + float2(0.0078125,0.0078125);
            r14.z = Global__PreIntegratedSkinDiffuseTexture__TexObj__.SampleLevel(Global__PreIntegratedSkinDiffuseTexture__SampObj___s, r10.xy, 0).z;
            r14.xyz = r14.xyz * r8.xzw;
            r14.w = 0.0572957806;
            r15.xyzw = float4(0.318309873,0.318309873,0.318309873,1) * r14.xyzw;
          } else {
            r2.y = cmp((int)r4.x == 5);
            r7.w = dot(r9.xzw, SkyLightStruct.m_lightDirection.xyz);
            r7.w = -r7.w * r7.w + 1;
            r7.w = sqrt(r7.w);
            r14.xyz = float3(0.318309873,0.318309873,0.318309873) * r8.xzw;
            r14.w = 0.0572957806;
            r8.y = 1 + -r1.x;
            r14.xyzw = r14.xyzw * r8.yyyy;
            r16.xyzw = r14.xyzw * r7.wwww;
            r16.xyzw = float4(0.5,0.5,0.5,0.5) * r16.xyzw;
            r7.w = 1 + -r9.y;
            r16.xyzw = r16.xyzw * r7.wwww;
            r15.xyzw = r2.yyyy ? r16.xyzw : r14.xyzw;
          }
        }
      }
      if (r2.w != 0) {
        r2.y = 0.0799999982 * r1.z;
        r10.xyz = -r1.zzz * float3(0.0799999982,0.0799999982,0.0799999982) + r8.xzw;
        r10.xyz = r1.xxx * r10.xyz + r2.yyy;
        r2.y = saturate(dot(r4.yzw, r7.xyz));
        r14.xyz = r6.xyz * r6.www + SkyLightStruct.m_lightDirection.xyz;
        r7.w = dot(r14.xyz, r14.xyz);
        r7.w = rsqrt(r7.w);
        r14.xyz = r14.xyz * r7.www;
        r7.w = dot(r14.xyz, SkyLightStruct.m_lightDirection.xyz);
        r8.y = saturate(dot(r4.yzw, r14.xyz));
        r14.x = r1.y * r1.y;
        r8.y = r8.y * r8.y;
        r14.y = r1.y * r1.y + -1;
        r8.y = r8.y * r14.y + 1;
        r8.y = r8.y * r8.y;
        r8.y = 3.14159274 * r8.y;
        r8.y = r14.x / r8.y;
        r14.x = r1.y * 0.5 + 0.5;
        r14.y = r2.z * r2.z;
        r14.x = r14.x * r14.x;
        r14.z = -r2.z * r2.z + 1;
        r14.z = r14.x * r14.z;
        r14.y = max(1.00000005e-034, r14.y);
        r14.y = r14.z / r14.y;
        r14.y = 1 + r14.y;
        r14.y = sqrt(r14.y);
        r14.y = 1 + r14.y;
        r14.y = 2 / r14.y;
        r14.z = r2.y * r2.y;
        r2.y = -r2.y * r2.y + 1;
        r2.y = r14.x * r2.y;
        r14.x = max(1.00000005e-034, r14.z);
        r2.y = r2.y / r14.x;
        r2.y = 1 + r2.y;
        r2.y = sqrt(r2.y);
        r2.y = 1 + r2.y;
        r2.y = 2 / r2.y;
        r2.y = r14.y * r2.y;
        r14.x = dot(r10.xyz, float3(0.333333343,0.333333343,0.333333343));
        r14.x = saturate(50 * r14.x);
        r7.w = 1 + -r7.w;
        r14.y = r7.w * r7.w;
        r14.y = r14.y * r14.y;
        r14.xzw = r14.xxx + -r10.xyz;
        r14.xyz = r14.xzw * r14.yyy;
        r10.xyz = r14.xyz * r7.www + r10.xyz;
        r2.y = r8.y * r2.y;
        r12.xyz = r2.yyy * r10.xyz;
        r12.w = dot(r12.xyz, float3(0.212639004,0.715168655,0.0721923187));
      } else {
        r2.y = cmp((int)r4.x == 3);
        if (r2.y != 0) {
          r10.xyz = r6.xyz * r6.www + SkyLightStruct.m_lightDirection.xyz;
          r2.y = dot(r10.xyz, r10.xyz);
          r2.y = rsqrt(r2.y);
          r10.xyz = r10.xyz * r2.yyy;
          r2.y = saturate(dot(r10.xyz, r7.xyz));
          r7.w = 0.0799999982 * r1.z;
          r2.y = 1 + -r2.y;
          r8.y = r2.y * r2.y;
          r8.y = r8.y * r8.y;
          r14.x = -r1.z * 0.0799999982 + 1;
          r8.y = r14.x * r8.y;
          r2.y = r8.y * r2.y + r7.w;
          r7.w = saturate(dot(r4.yzw, r10.xyz));
          r8.y = r7.w * r7.w;
          r10.xy = -r7.ww * r7.ww + float2(1.00000095,1);
          r8.y = r8.y / r10.x;
          r10.x = r10.y * r10.y;
          r10.y = r1.y * r1.y;
          r14.xy = r1.yy * r1.yy + float2(9.99999997e-007,1.99999999e-006);
          r10.z = r14.x * 4 + 1;
          r10.z = 3.14159274 * r10.z;
          r10.z = 1 / r10.z;
          r8.y = -r8.y / r14.y;
          r8.y = 1.44269502 * r8.y;
          r8.y = exp2(r8.y);
          r8.y = 4 * r8.y;
          r8.y = r8.y / r10.x;
          r8.y = 1 + r8.y;
          r8.y = r10.z * r8.y;
          r10.x = saturate(dot(r4.yzw, r7.xyz));
          r10.z = r10.x + r2.z;
          r10.x = -r2.z * r10.x + r10.z;
          r10.x = 4 * r10.x;
          r10.x = 1 / r10.x;
          r10.x = saturate(r10.x);
          r10.y = 2 / r10.y;
          r10.y = -2 + r10.y;
          r10.y = max(1.00000003e-022, r10.y);
          r7.w = log2(r7.w);
          r7.w = r10.y * r7.w;
          r7.w = exp2(r7.w);
          r10.y = 8 + r10.y;
          r7.w = r10.y * r7.w;
          r7.w = 0.0397887342 * r7.w;
          r7.w = min(1, r7.w);
          r10.y = saturate(r1.y + r1.y);
          r8.y = r8.y * r10.x + -r7.w;
          r7.w = r10.y * r8.y + r7.w;
          r14.xyz = r7.www * r2.yyy;
          r14.w = dot(r14.zzz, float3(0.212639004,0.715168655,0.0721923187));
          r16.xyz = r9.xzw;
          r16.w = 1;
          r12.xyzw = r16.xyzw * r14.xyzw;
        } else {
          if (r5.y != 0) {
            r10.xy = float2(0.0799999982,0.400000006) * r1.zy;
            r14.xyz = -r1.zzz * float3(0.0799999982,0.0799999982,0.0799999982) + r8.xzw;
            r14.xyz = r1.xxx * r14.xyz + r10.xxx;
            r2.y = saturate(dot(r4.yzw, r7.xyz));
            r16.xyz = r6.xyz * r6.www + SkyLightStruct.m_lightDirection.xyz;
            r7.w = dot(r16.xyz, r16.xyz);
            r7.w = rsqrt(r7.w);
            r16.xyz = r16.xyz * r7.www;
            r7.w = dot(r16.xyz, SkyLightStruct.m_lightDirection.xyz);
            r8.y = saturate(dot(r4.yzw, r16.xyz));
            r10.x = r1.y * r1.y;
            r8.y = r8.y * r8.y;
            r10.z = r1.y * r1.y + -1;
            r10.z = r8.y * r10.z + 1;
            r10.z = r10.z * r10.z;
            r10.z = 3.14159274 * r10.z;
            r10.x = r10.x / r10.z;
            r16.xy = r1.yy * float2(0.5,0.200000003) + float2(0.5,0.5);
            r10.z = r2.z * r2.z;
            r16.xy = r16.xy * r16.xy;
            r14.w = -r2.z * r2.z + 1;
            r16.zw = r16.xy * r14.ww;
            r10.z = max(1.00000005e-034, r10.z);
            r16.zw = r16.zw / r10.zz;
            r16.zw = float2(1,1) + r16.zw;
            r16.zw = sqrt(r16.zw);
            r16.zw = float2(1,1) + r16.zw;
            r10.z = r2.y * r2.y;
            r2.y = -r2.y * r2.y + 1;
            r16.xy = r16.xy * r2.yy;
            r2.y = max(1.00000005e-034, r10.z);
            r16.xy = r16.xy / r2.yy;
            r16.xy = float2(1,1) + r16.xy;
            r16.xy = sqrt(r16.xy);
            r16.xy = float2(1,1) + r16.xy;
            r16.xyzw = float4(2,2,2,2) / r16.xyzw;
            r16.xy = r16.zw * r16.xy;
            r2.y = dot(r14.xyz, float3(0.333333343,0.333333343,0.333333343));
            r2.y = saturate(50 * r2.y);
            r7.w = 1 + -r7.w;
            r10.z = r7.w * r7.w;
            r10.z = r10.z * r10.z;
            r17.xyz = r2.yyy + -r14.xyz;
            r17.xyz = r17.xyz * r10.zzz;
            r14.xyz = r17.xyz * r7.www + r14.xyz;
            r2.y = r16.x * r10.x;
            r17.xyz = r2.yyy * r14.xyz;
            r17.w = dot(r17.xyz, float3(0.212639004,0.715168655,0.0721923187));
            r2.y = r10.y * r10.y;
            r7.w = r10.y * r10.y + -1;
            r7.w = r8.y * r7.w + 1;
            r7.w = r7.w * r7.w;
            r7.w = 3.14159274 * r7.w;
            r2.y = r2.y / r7.w;
            r2.y = r2.y * r16.y;
            r14.xyz = r2.yyy * r14.xyz;
            r14.w = dot(r14.xyz, float3(0.212639004,0.715168655,0.0721923187));
            r14.xyzw = float4(0.150000006,0.150000006,0.150000006,0.150000006) * r14.xyzw;
            r12.xyzw = r17.xyzw * float4(0.850000024,0.850000024,0.850000024,0.850000024) + r14.xyzw;
          } else {
            r2.y = cmp((int)r4.x == 5);
            r7.w = saturate(dot(r8.xzw, float3(0.212639004,0.715168655,0.0721923187)));
            r7.w = r7.w * 1.66666663 + 1.33333337;
            r10.xyz = r9.xzw * r1.yyy;
            r10.xyz = r10.xyz * float3(0.25,0.25,0.25) + r4.yzw;
            r7.w = 1 / r7.w;
            r8.y = dot(-SkyLightStruct.m_lightDirection.xyz, r10.xyz);
            r14.x = r7.w * r7.w;
            r14.y = -r8.y * r8.y + 1;
            r14.y = -r14.x * r14.y + 1;
            r14.z = sqrt(r14.y);
            r8.y = r7.w * r8.y + -r14.z;
            r16.xyz = r8.yyy * r10.xyz;
            r16.xyz = r7.www * SkyLightStruct.m_lightDirection.xyz + r16.xyz;
            r8.y = cmp(0 < r14.y);
            r8.y = r8.y ? 1.000000 : 0;
            r14.yzw = r16.xyz * r8.yyy;
            r16.w = dot(-r7.xyz, r10.xyz);
            r17.x = -r16.w * r16.w + 1;
            r14.x = -r14.x * r17.x + 1;
            r17.x = sqrt(r14.x);
            r16.w = r7.w * r16.w + -r17.x;
            r10.xyz = r16.www * r10.xyz;
            r10.xyz = r7.www * r7.xyz + r10.xyz;
            r7.w = cmp(0 < r14.x);
            r7.w = r7.w ? 1.000000 : 0;
            r10.xyz = r10.xyz * r7.www;
            r6.xyz = r6.xyz * r6.www + SkyLightStruct.m_lightDirection.xyz;
            r6.w = dot(r6.xyz, r6.xyz);
            r6.w = rsqrt(r6.w);
            r6.xyz = r6.xyz * r6.www;
            r6.w = saturate(dot(r4.yzw, r7.xyz));
            r7.w = saturate(dot(r4.yzw, r6.xyz));
            r14.x = dot(r6.xyz, SkyLightStruct.m_lightDirection.xyz);
            r16.w = saturate(r14.x);
            r17.x = dot(r6.xyz, r9.xzw);
            r17.yzw = r9.wxz * r4.zwy;
            r17.yzw = r9.zwx * r4.wyz + -r17.yzw;
            r18.x = dot(r17.yzw, r17.yzw);
            r18.x = rsqrt(r18.x);
            r17.yzw = r18.xxx * r17.yzw;
            r6.x = dot(r6.xyz, r17.yzw);
            r6.yz = float2(0.0799999982,3.14159274) * r1.zy;
            r18.xyz = -r1.zzz * float3(0.0799999982,0.0799999982,0.0799999982) + r8.xzw;
            r18.xyz = r1.xxx * r18.xyz + r6.yyy;
            r6.y = dot(r18.xyz, float3(0.333333343,0.333333343,0.333333343));
            r6.y = saturate(50 * r6.y);
            r16.w = 1 + -r16.w;
            r18.w = r16.w * r16.w;
            r18.w = r18.w * r18.w;
            r19.xyz = r6.yyy + -r18.xyz;
            r20.xyz = r19.xyz * r18.www;
            r20.xyz = r20.xyz * r16.www + r18.xyz;
            r6.y = r1.y * r1.y;
            r16.w = r7.w * r7.w;
            r17.x = r17.x * r17.x;
            r17.x = r17.x / r6.y;
            r6.x = r6.x * r6.x + r17.x;
            r6.x = r7.w * r7.w + r6.x;
            r6.x = r6.x * r6.x;
            r6.x = r6.x * r6.z;
            r6.x = 1 / r6.x;
            r7.w = r2.z * r2.z;
            r17.x = -r2.z * r2.z + 1;
            r18.w = r17.x * r6.y;
            r7.w = max(1.00000005e-034, r7.w);
            r18.w = r18.w / r7.w;
            r18.w = 1 + r18.w;
            r18.w = sqrt(r18.w);
            r18.w = 1 + r18.w;
            r18.w = 2 / r18.w;
            r19.w = r6.w * r6.w;
            r6.w = -r6.w * r6.w + 1;
            r20.w = r6.y * r6.w;
            r19.w = max(1.00000005e-034, r19.w);
            r20.w = r20.w / r19.w;
            r20.w = 1 + r20.w;
            r20.w = sqrt(r20.w);
            r20.w = 1 + r20.w;
            r20.w = 2 / r20.w;
            r18.w = r20.w * r18.w;
            r6.x = r18.w * r6.x;
            r20.xyz = saturate(r6.xxx * r20.xyz);
            r20.xyz = r20.xyz * r10.www;
            r21.xyz = float3(0.25,0.25,0.25) * r20.xyz;
            r16.xyz = -r16.xyz * r8.yyy + -r10.xyz;
            r6.x = dot(r16.xyz, r16.xyz);
            r6.x = rsqrt(r6.x);
            r16.xyz = r16.xyz * r6.xxx;
            r6.x = saturate(dot(r4.yzw, -r14.yzw));
            r8.y = saturate(dot(r4.yzw, -r10.xyz));
            r10.x = saturate(dot(r4.yzw, r16.xyz));
            r10.y = saturate(dot(r16.xyz, -r14.yzw));
            r10.z = dot(r16.xyz, r9.xzw);
            r10.w = dot(r16.xyz, r17.yzw);
            r10.y = 1 + -r10.y;
            r14.y = r10.y * r10.y;
            r14.y = r14.y * r14.y;
            r14.yzw = r19.xyz * r14.yyy;
            r14.yzw = r14.yzw * r10.yyy + r18.xyz;
            r10.y = r10.z * r10.z;
            r10.y = r10.y / r6.y;
            r10.y = r10.w * r10.w + r10.y;
            r10.x = r10.x * r10.x + r10.y;
            r10.x = r10.x * r10.x;
            r6.z = r10.x * r6.z;
            r6.z = 1 / r6.z;
            r10.x = r6.x * r6.x;
            r6.x = -r6.x * r6.x + 1;
            r6.x = r6.y * r6.x;
            r10.x = max(1.00000005e-034, r10.x);
            r6.x = r6.x / r10.x;
            r6.x = 1 + r6.x;
            r6.x = sqrt(r6.x);
            r6.x = 1 + r6.x;
            r6.x = 2 / r6.x;
            r10.x = r8.y * r8.y;
            r8.y = -r8.y * r8.y + 1;
            r8.y = r8.y * r6.y;
            r10.x = max(1.00000005e-034, r10.x);
            r8.y = r8.y / r10.x;
            r8.y = 1 + r8.y;
            r8.y = sqrt(r8.y);
            r8.y = 1 + r8.y;
            r8.y = 2 / r8.y;
            r6.x = r8.y * r6.x;
            r6.x = r6.z * r6.x;
            r10.xyz = saturate(r6.xxx * r14.yzw);
            r14.yzw = sqrt(r8.xzw);
            r10.xyz = -r20.xyz * float3(0.25,0.25,0.25) + r10.xyz;
            r10.xyz = r14.yzw * r10.xyz + r21.xyz;
            r10.w = dot(r10.xyz, float3(0.212639004,0.715168655,0.0721923187));
            r6.x = r1.y * r1.y + -1;
            r6.x = r16.w * r6.x + 1;
            r6.x = r6.x * r6.x;
            r6.x = 3.14159274 * r6.x;
            r6.x = r6.y / r6.x;
            r6.y = r1.y * 0.5 + 0.5;
            r6.y = r6.y * r6.y;
            r6.z = r6.y * r17.x;
            r6.z = r6.z / r7.w;
            r6.z = 1 + r6.z;
            r6.z = sqrt(r6.z);
            r6.z = 1 + r6.z;
            r6.y = r6.y * r6.w;
            r6.y = r6.y / r19.w;
            r6.y = 1 + r6.y;
            r6.y = sqrt(r6.y);
            r6.y = 1 + r6.y;
            r6.yz = float2(2,2) / r6.yz;
            r6.y = r6.z * r6.y;
            r6.z = 1 + -r14.x;
            r6.xw = r6.xz * r6.yz;
            r6.w = r6.w * r6.w;
            r14.xyz = r19.xyz * r6.www;
            r14.xyz = r14.xyz * r6.zzz + r18.xyz;
            r6.xyz = r14.xyz * r6.xxx;
            r6.w = dot(r6.xyz, float3(0.212639004,0.715168655,0.0721923187));
            r12.xyzw = r2.yyyy ? r10.xyzw : r6.xyzw;
          }
        }
      }
      if (r2.w != 0) {
        r13.xyzw = float4(0,0,0,0);
      } else {
        r2.y = cmp((int)r4.x == 3);
        if (r2.y != 0) {
          r13.xyzw = float4(0,0,0,0);
        } else {
          if (r5.y != 0) {
            r13.xyzw = float4(0,0,0,0);
          } else {
            r2.y = dot(r9.xzw, SkyLightStruct.m_lightDirection.xyz);
            r2.y = -r2.y * r2.y + 1;
            r2.y = sqrt(r2.y);
            r2.w = -1.5 * r9.y;
            r6.x = dot(r11.yzw, SkyLightStruct.m_lightDirection.xyz);
            r6.y = -r9.y * -1.5 + r6.x;
            r2.w = 1 / -r2.w;
            r2.w = saturate(r6.y * r2.w);
            r6.y = r2.w * -2 + 3;
            r2.w = r2.w * r2.w;
            r2.w = r6.y * r2.w;
            r10.xyz = float3(0.318309873,0.318309873,0.318309873) * r8.xzw;
            r10.w = 0.0572957806;
            r6.y = 1 + -r1.x;
            r10.xyzw = r10.xyzw * r6.yyyy;
            r10.xyzw = r10.xyzw * r2.wwww;
            r10.xyzw = r10.xyzw * r2.yyyy;
            r10.xyzw = r10.xyzw * r9.yyyy;
            r10.xyzw = float4(0.25,0.25,0.25,0.25) * r10.xyzw;
            r2.yw = cmp((int2)r4.xx == int2(5,8));
            r6.z = max(9.99999997e-007, abs(r6.x));
            r6.z = rcp(r6.z);
            r6.x = r6.x * r6.z;
            r6.z = dot(r11.yzw, r7.xyz);
            r6.w = max(9.99999997e-007, abs(r6.z));
            r6.w = rcp(r6.w);
            r6.z = r6.z * r6.w;
            r6.x = cmp(r6.z == r6.x);
            r14.w = r6.x ? 0 : 1;
            r6.xyz = r9.xzw * r6.yyy;
            r14.xyz = r6.xyz * r14.www;
            r6.xyzw = float4(0.318309873,0.318309873,0.318309873,0.180000007) * r14.xyzw;
            r14.xyz = r9.xxx * r8.xzw;
            r14.w = r9.x;
            r14.xyzw = float4(0.0795774683,0.0795774683,0.0795774683,0.0143239452) * r14.xyzw;
            r6.xyzw = r2.wwww ? r6.xyzw : r14.xyzw;
            r13.xyzw = r2.yyyy ? r10.xyzw : r6.xyzw;
          }
        }
      }
    }
    r2.y = r5.y ? 1 : r5.z;
    r2.w = dot(r13.xyz, float3(0.212639004,0.715168655,0.0721923187));
    r5.y = r9.x * r2.x;
    r2.w = r2.w + -r2.y;
    r2.w = r5.y * r2.w + r2.y;
    r2.y = r4.x ? r2.y : r2.w;
    r6.xyzw = r12.xyzw * r2.zzzz;
    r6.xyzw = r15.xyzw * r2.yyyy + r6.xyzw;
    r6.xyzw = r6.xyzw + r13.xyzw;
    r2.xyzw = r6.xyzw * r2.xxxx;
    r3.xyz = SkyLightStruct.m_lightIrradiance.xyz;
    r2.xyzw = r3.xyzw * r2.xyzw;
  } else {
    r2.xyzw = float4(0,0,0,0);
  }
  if (r5.x != 0) {
    r9.xyzw = saturate(r9.xyzw);
    r1.xyz = saturate(r1.xyz);
    r3.x = r1.y * r1.y;
    r3.w = r9.z * r9.z;
    r3.yw = max(float2(0.00100000005,0.00100000005), r3.xw);
    r5.x = dot(-r7.xyz, r4.yzw);
    r5.x = r5.x + r5.x;
    r5.xyz = r4.yzw * -r5.xxx + -r7.xyz;
    r6.x = dot(r4.yzw, r5.xyz);
    r6.x = -abs(r6.x) * abs(r6.x) + 1;
    r6.x = -r6.x * 0.444702327 + 1;
    r6.y = r9.x + r9.x;
    r6.x = sqrt(r6.x);
    r6.x = r6.y / r6.x;
    r6.yzw = log2(r8.xzw);
    r10.xyz = r6.yzw * r9.yyy;
    r10.xyz = float3(-12.7799997,-12.7799997,-12.7799997) * r10.xyz;
    r6.yzw = r6.yzw * float3(-0.0199999996,-0.0199999996,-0.0199999996) + r10.xyz;
    r7.w = cmp(r9.x == 0.000000);
    r8.y = r3.y * r3.y;
    r8.y = 2 / r8.y;
    r8.y = -2 + r8.y;
    r8.y = max(1.00000003e-022, r8.y);
    r8.y = sqrt(r8.y);
    r8.y = -10 / r8.y;
    r8.y = exp2(r8.y);
    r8.y = -0.000980000012 + r8.y;
    r8.y = saturate(1.00795019 * r8.y);
    r8.y = 1 + -r8.y;
    if (UseOnlySkyReflection == 0) {
      r9.y = DynamicCubeMapReflectionTextureMaxMipIndex * r8.y;
      r0.w = 1;
      r10.xyzw = float4(0,0,0,0);
      r11.yz = float2(1,0);
      while (true) {
        r11.w = cmp((uint)r11.z >= 15);
        if (r11.w != 0) break;
        r11.w = (int)r11.z * 7;
        r12.x = dot(r0.xyzw, ReflectionVolumes[r11.z]._m00_m10_m20_m30);
        r12.y = dot(r0.xyzw, ReflectionVolumes[r11.z]._m01_m11_m21_m31);
        r12.z = dot(r0.xyzw, ReflectionVolumes[r11.z]._m02_m12_m22_m32);
        r13.xyz = cmp(r12.xyz >= float3(0,0,0));
        r13.xyz = r13.xyz ? ReflectionVolumes[r11.z].xyz : ReflectionVolumes[r11.z].xyz;
        r12.xyz = float3(1,1,1) + -abs(r12.xyz);
        r12.xyz = saturate(r12.xyz * r13.xyz);
        r12.x = r12.x * r12.y;
        r12.x = r12.x * r12.z;
        r12.y = cmp(0 < r12.x);
        if (r12.y != 0) {
          r13.x = dot(r5.xyz, ReflectionVolumes[r11.z]._m00_m10_m20);
          r13.y = dot(r5.xyz, ReflectionVolumes[r11.z]._m01_m11_m21);
          r13.z = dot(r5.xyz, ReflectionVolumes[r11.z]._m02_m12_m22);
          r12.x = ReflectionVolumes[r11.z] * r12.x;
          r13.w = ReflectionVolumes[r11.z];
          r13.xyzw = Viewport__DynamicCubeMapReflectionTextureArray.SampleLevel(ColorWrap_s, r13.xyzw, r9.y).xyzw;
          r13.xyzw = ReflectionVolumes[r11.z].xxxy * r13.xyzw;
          r11.w = min(r12.x, r11.y);
          r12.xyzw = r13.xyzw * r11.wwww + r10.xyzw;
          r11.w = r11.y + -r11.w;
          r13.x = cmp(0 >= r11.w);
          if (r13.x != 0) {
            r10.xyzw = r12.xyzw;
            r11.y = r11.w;
            break;
          }
          r10.xyzw = r12.xyzw;
          r11.y = r11.w;
        }
        r11.z = (int)r11.z + 1;
      }
    } else {
      r10.xyzw = float4(0,0,0,0);
      r11.y = 1;
    }
    r9.y = r11.y + r10.w;
    r10.w = cmp(0 < r9.y);
    if (r10.w != 0) {
      r8.y = SkyParaboloidTextureMaxMipIndex * r8.y;
      r10.w = r5.z + -abs(r5.z);
      r10.w = r11.y * r10.w + abs(r5.z);
      r10.w = r10.w * 2 + 2;
      r11.yz = float2(-1,1) / r10.ww;
      r11.yz = r11.yz * r5.yx;
      r11.yz = r11.yz * float2(0.949999988,0.949999988) + float2(0.5,0.5);
      r11.yzw = Viewport__SkyParaboloidTexture.SampleLevel(ColorClamp_s, r11.yz, r8.y).xyz;
      r12.xyz = saturate(r11.yzw);
      r11.yzw = UseOnlySkyReflection ? r12.xyz : r11.yzw;
      r11.yzw = r11.yzw / ExposureScale;
      r10.xyz = r11.yzw * r9.yyy + r10.xyz;
    }
    r8.y = 0.0799999982 * r1.z;
    r9.y = dot(r8.yyy, float3(0.333333343,0.333333343,0.333333343));
    r9.y = 50 * r9.y;
    r9.y = min(1, r9.y);
    r3.x = saturate(dot(r4.yzw, r7.xyz));
    r11.yz = Global__IBLBRDFTexture.SampleLevel(ColorClamp_s, r3.xy, 0).xy;
    r8.y = r8.y * r11.y + r11.z;
    r8.y = r8.y * r9.y;
    r10.xyz = r10.xyz * r8.yyy;
    r10.xyz = r10.xyz * r5.www;
    r3.y = r3.y + r3.w;
    r3.z = min(1, r3.y);
    r3.y = r3.z * r3.z;
    r3.y = 2 / r3.y;
    r3.y = -2 + r3.y;
    r3.y = max(1.00000003e-022, r3.y);
    r3.y = sqrt(r3.y);
    r3.y = -10 / r3.y;
    r3.y = exp2(r3.y);
    r3.y = -0.000980000012 + r3.y;
    r3.y = 1.00795019 * r3.y;
    r3.y = max(0, r3.y);
    r3.y = 1 + -r3.y;
    if (UseOnlySkyReflection == 0) {
      r3.w = DynamicCubeMapReflectionTextureMaxMipIndex * r3.y;
      r0.w = 1;
      r12.xyzw = float4(0,0,0,0);
      r8.y = 1;
      r9.y = 0;
      while (true) {
        r10.w = cmp((uint)r9.y >= 15);
        if (r10.w != 0) break;
        r10.w = (int)r9.y * 7;
        r13.x = dot(r0.xyzw, ReflectionVolumes[r9.y]._m00_m10_m20_m30);
        r13.y = dot(r0.xyzw, ReflectionVolumes[r9.y]._m01_m11_m21_m31);
        r13.z = dot(r0.xyzw, ReflectionVolumes[r9.y]._m02_m12_m22_m32);
        r11.yzw = cmp(r13.xyz >= float3(0,0,0));
        r11.yzw = r11.yzw ? ReflectionVolumes[r9.y].xyz : ReflectionVolumes[r9.y].xyz;
        r13.xyz = float3(1,1,1) + -abs(r13.xyz);
        r11.yzw = saturate(r13.xyz * r11.yzw);
        r11.y = r11.y * r11.z;
        r11.y = r11.y * r11.w;
        r11.z = cmp(0 < r11.y);
        if (r11.z != 0) {
          r13.x = dot(r5.xyz, ReflectionVolumes[r9.y]._m00_m10_m20);
          r13.y = dot(r5.xyz, ReflectionVolumes[r9.y]._m01_m11_m21);
          r13.z = dot(r5.xyz, ReflectionVolumes[r9.y]._m02_m12_m22);
          r11.y = ReflectionVolumes[r9.y] * r11.y;
          r13.w = ReflectionVolumes[r9.y];
          r13.xyzw = Viewport__DynamicCubeMapReflectionTextureArray.SampleLevel(ColorWrap_s, r13.xyzw, r3.w).xyzw;
          r13.xyzw = ReflectionVolumes[r9.y].xxxy * r13.xyzw;
          r10.w = min(r11.y, r8.y);
          r13.xyzw = r13.xyzw * r10.wwww + r12.xyzw;
          r10.w = -r10.w + r8.y;
          r11.y = cmp(0 >= r10.w);
          if (r11.y != 0) {
            r12.xyzw = r13.xyzw;
            r8.y = r10.w;
            break;
          }
          r12.xyzw = r13.xyzw;
          r8.y = r10.w;
        }
        r9.y = (int)r9.y + 1;
      }
    } else {
      r12.xyzw = float4(0,0,0,0);
      r8.y = 1;
    }
    r3.w = r12.w + r8.y;
    r9.y = cmp(0 < r3.w);
    if (r9.y != 0) {
      r3.y = SkyParaboloidTextureMaxMipIndex * r3.y;
      r9.y = r5.z + -abs(r5.z);
      r5.z = r8.y * r9.y + abs(r5.z);
      r5.z = r5.z * 2 + 2;
      r11.yz = float2(-1,1) / r5.zz;
      r5.xy = r11.yz * r5.yx;
      r5.xy = r5.xy * float2(0.949999988,0.949999988) + float2(0.5,0.5);
      r5.xyz = Viewport__SkyParaboloidTexture.SampleLevel(ColorClamp_s, r5.xy, r3.y).xyz;
      r11.yzw = saturate(r5.xyz);
      r5.xyz = UseOnlySkyReflection ? r11.yzw : r5.xyz;
      r5.xyz = r5.xyz / ExposureScale;
      r12.xyz = r5.xyz * r3.www + r12.xyz;
    }
    r3.y = 0.0799999982 * r9.w;
    r5.xyz = -r9.www * float3(0.0799999982,0.0799999982,0.0799999982) + r8.xzw;
    r5.xyz = r1.xxx * r5.xyz + r3.yyy;
    r3.y = dot(r5.xyz, float3(0.333333343,0.333333343,0.333333343));
    r3.y = saturate(50 * r3.y);
    r3.xz = Global__IBLBRDFTexture.SampleLevel(ColorClamp_s, r3.xz, 0).xy;
    r3.xzw = r5.xyz * r3.xxx + r3.zzz;
    r3.xyz = r3.xzw * r3.yyy;
    r3.xyz = r12.xyz * r3.xyz;
    r3.xyz = r3.xyz * r5.www;
    r5.xyz = -r6.yzw * r6.xxx;
    r5.xyz = exp2(r5.xyz);
    r5.xyz = r3.xyz * r5.xyz + r10.xyz;
    r3.xyz = r7.www ? r3.xyz : r5.xyz;
    r3.w = dot(r3.xyz, float3(0.212639004,0.715168655,0.0721923187));
  } else {
    r4.x = cmp((int)r4.x == 5);
    if (r4.x != 0) {
      r4.x = dot(-r7.xyz, r4.yzw);
      r4.x = r4.x + r4.x;
      r5.xyz = r4.yzw * -r4.xxx + -r7.xyz;
      r4.x = dot(r5.xyz, r9.xzw);
      r5.x = dot(r5.xyz, r4.yzw);
      r5.xyz = r5.xxx * r4.yzw;
      r5.xyz = r9.xzw * r4.xxx + r5.xyz;
      r4.x = dot(r9.xzw, r7.xyz);
      r4.x = -r4.x * r4.x + 1;
      r4.x = sqrt(r4.x);
      r6.x = r1.y * r1.y;
      r6.x = 2 / r6.x;
      r6.x = -2 + r6.x;
      r6.x = max(1.00000003e-022, r6.x);
      r6.x = sqrt(r6.x);
      r6.x = -10 / r6.x;
      r6.x = exp2(r6.x);
      r6.x = -0.000980000012 + r6.x;
      r6.x = saturate(1.00795019 * r6.x);
      r6.x = 1 + -r6.x;
      if (UseOnlySkyReflection == 0) {
        r6.y = DynamicCubeMapReflectionTextureMaxMipIndex * r6.x;
        r0.w = 1;
        r9.xyzw = float4(0,0,0,0);
        r6.zw = float2(1,0);
        while (true) {
          r7.w = cmp((uint)r6.w >= 15);
          if (r7.w != 0) break;
          r7.w = (int)r6.w * 7;
          r10.x = dot(r0.xyzw, ReflectionVolumes[r6.w]._m00_m10_m20_m30);
          r10.y = dot(r0.xyzw, ReflectionVolumes[r6.w]._m01_m11_m21_m31);
          r10.z = dot(r0.xyzw, ReflectionVolumes[r6.w]._m02_m12_m22_m32);
          r11.yzw = cmp(r10.xyz >= float3(0,0,0));
          r11.yzw = r11.yzw ? ReflectionVolumes[r6.w].xyz : ReflectionVolumes[r6.w].xyz;
          r10.xyz = float3(1,1,1) + -abs(r10.xyz);
          r10.xyz = saturate(r10.xyz * r11.yzw);
          r8.y = r10.x * r10.y;
          r8.y = r8.y * r10.z;
          r10.x = cmp(0 < r8.y);
          if (r10.x != 0) {
            r10.x = dot(r5.xyz, ReflectionVolumes[r6.w]._m00_m10_m20);
            r10.y = dot(r5.xyz, ReflectionVolumes[r6.w]._m01_m11_m21);
            r10.z = dot(r5.xyz, ReflectionVolumes[r6.w]._m02_m12_m22);
            r8.y = ReflectionVolumes[r6.w] * r8.y;
            r10.w = ReflectionVolumes[r6.w];
            r10.xyzw = Viewport__DynamicCubeMapReflectionTextureArray.SampleLevel(ColorWrap_s, r10.xyzw, r6.y).xyzw;
            r10.xyzw = ReflectionVolumes[r6.w].xxxy * r10.xyzw;
            r7.w = min(r8.y, r6.z);
            r10.xyzw = r10.xyzw * r7.wwww + r9.xyzw;
            r7.w = -r7.w + r6.z;
            r8.y = cmp(0 >= r7.w);
            if (r8.y != 0) {
              r9.xyzw = r10.xyzw;
              r6.z = r7.w;
              break;
            }
            r9.xyzw = r10.xyzw;
            r6.z = r7.w;
          }
          r6.w = (int)r6.w + 1;
        }
      } else {
        r9.xyzw = float4(0,0,0,0);
        r6.z = 1;
      }
      r6.y = r9.w + r6.z;
      r6.w = cmp(0 < r6.y);
      if (r6.w != 0) {
        r6.x = SkyParaboloidTextureMaxMipIndex * r6.x;
        r6.w = r5.z + -abs(r5.z);
        r5.z = r6.z * r6.w + abs(r5.z);
        r5.z = r5.z * 2 + 2;
        r6.zw = float2(-1,1) / r5.zz;
        r5.xy = r6.zw * r5.yx;
        r5.xy = r5.xy * float2(0.949999988,0.949999988) + float2(0.5,0.5);
        r5.xyz = Viewport__SkyParaboloidTexture.SampleLevel(ColorClamp_s, r5.xy, r6.x).xyz;
        r6.xzw = saturate(r5.xyz);
        r5.xyz = UseOnlySkyReflection ? r6.xzw : r5.xyz;
        r5.xyz = r5.xyz / ExposureScale;
        r9.xyz = r5.xyz * r6.yyy + r9.xyz;
      }
      r5.xyz = sqrt(r8.xzw);
      r6.x = dot(r8.xzw, float3(0.212639004,0.715168655,0.0721923187));
      r5.xyz = r5.xyz * float3(4,4,4) + -r5.www;
      r5.xyz = r6.xxx * r5.xyz + r5.www;
      r5.xyz = r9.xyz * r5.xyz;
      r6.x = 0.0799999982 * r1.z;
      r6.yzw = -r1.zzz * float3(0.0799999982,0.0799999982,0.0799999982) + r8.xzw;
      r6.xyz = r1.xxx * r6.yzw + r6.xxx;
      r6.w = dot(r6.xyz, float3(0.333333343,0.333333343,0.333333343));
      r6.w = saturate(50 * r6.w);
      r1.w = saturate(dot(r4.yzw, r7.xyz));
      r9.xy = Global__IBLBRDFTexture.SampleLevel(ColorClamp_s, r1.wy, 0).xy;
      r6.xyz = r6.xyz * r9.xxx + r9.yyy;
      r6.xyz = r6.xyz * r6.www;
      r6.xyz = r6.xyz * r4.xxx;
      r3.xyz = r6.xyz * r5.xyz;
      r3.w = dot(r3.xyz, float3(0.212639004,0.715168655,0.0721923187));
    } else {
      r4.x = saturate(r11.x + r1.y);
      r5.x = dot(-r7.xyz, r4.yzw);
      r5.x = r5.x + r5.x;
      r5.xyz = r4.yzw * -r5.xxx + -r7.xyz;
      r4.x = r4.x * r4.x;
      r4.x = 2 / r4.x;
      r4.x = -2 + r4.x;
      r4.x = max(1.00000003e-022, r4.x);
      r4.x = sqrt(r4.x);
      r4.x = -10 / r4.x;
      r4.x = exp2(r4.x);
      r4.x = -0.000980000012 + r4.x;
      r4.x = saturate(1.00795019 * r4.x);
      r4.x = 1 + -r4.x;
      if (UseOnlySkyReflection == 0) {
        r6.x = DynamicCubeMapReflectionTextureMaxMipIndex * r4.x;
        r0.w = 1;
        r9.xyzw = float4(0,0,0,0);
        r6.yz = float2(1,0);
        while (true) {
          r6.w = cmp((uint)r6.z >= 15);
          if (r6.w != 0) break;
          r6.w = (int)r6.z * 7;
          r10.x = dot(r0.xyzw, ReflectionVolumes[r6.z]._m00_m10_m20_m30);
          r10.y = dot(r0.xyzw, ReflectionVolumes[r6.z]._m01_m11_m21_m31);
          r10.z = dot(r0.xyzw, ReflectionVolumes[r6.z]._m02_m12_m22_m32);
          r11.xyz = cmp(r10.xyz >= float3(0,0,0));
          r11.xyz = r11.xyz ? ReflectionVolumes[r6.z].xyz : ReflectionVolumes[r6.z].xyz;
          r10.xyz = float3(1,1,1) + -abs(r10.xyz);
          r10.xyz = saturate(r10.xyz * r11.xyz);
          r7.w = r10.x * r10.y;
          r7.w = r7.w * r10.z;
          r8.y = cmp(0 < r7.w);
          if (r8.y != 0) {
            r10.x = dot(r5.xyz, ReflectionVolumes[r6.z]._m00_m10_m20);
            r10.y = dot(r5.xyz, ReflectionVolumes[r6.z]._m01_m11_m21);
            r10.z = dot(r5.xyz, ReflectionVolumes[r6.z]._m02_m12_m22);
            r7.w = ReflectionVolumes[r6.z] * r7.w;
            r10.w = ReflectionVolumes[r6.z];
            r10.xyzw = Viewport__DynamicCubeMapReflectionTextureArray.SampleLevel(ColorWrap_s, r10.xyzw, r6.x).xyzw;
            r10.xyzw = ReflectionVolumes[r6.z].xxxy * r10.xyzw;
            r6.w = min(r7.w, r6.y);
            r10.xyzw = r10.xyzw * r6.wwww + r9.xyzw;
            r6.w = r6.y + -r6.w;
            r7.w = cmp(0 >= r6.w);
            if (r7.w != 0) {
              r9.xyzw = r10.xyzw;
              r6.y = r6.w;
              break;
            }
            r9.xyzw = r10.xyzw;
            r6.y = r6.w;
          }
          r6.z = (int)r6.z + 1;
        }
      } else {
        r9.xyzw = float4(0,0,0,0);
        r6.y = 1;
      }
      r0.x = r9.w + r6.y;
      r0.y = cmp(0 < r0.x);
      if (r0.y != 0) {
        r0.y = SkyParaboloidTextureMaxMipIndex * r4.x;
        r0.z = r5.z + -abs(r5.z);
        r0.z = r6.y * r0.z + abs(r5.z);
        r0.z = r0.z * 2 + 2;
        r0.zw = float2(-1,1) / r0.zz;
        r0.zw = r5.yx * r0.zw;
        r0.zw = r0.zw * float2(0.949999988,0.949999988) + float2(0.5,0.5);
        r0.yzw = Viewport__SkyParaboloidTexture.SampleLevel(ColorClamp_s, r0.zw, r0.y).xyz;
        r5.xyz = saturate(r0.yzw);
        r0.yzw = UseOnlySkyReflection ? r5.xyz : r0.yzw;
        r0.yzw = r0.yzw / ExposureScale;
        r9.xyz = r0.yzw * r0.xxx + r9.xyz;
      }
      r0.x = 0.0799999982 * r1.z;
      r0.yzw = -r1.zzz * float3(0.0799999982,0.0799999982,0.0799999982) + r8.xzw;
      r0.xyz = r1.xxx * r0.yzw + r0.xxx;
      r0.w = dot(r0.xyz, float3(0.333333343,0.333333343,0.333333343));
      r0.w = saturate(50 * r0.w);
      r1.w = saturate(dot(r4.yzw, r7.xyz));
      r1.xy = Global__IBLBRDFTexture.SampleLevel(ColorClamp_s, r1.wy, 0).xy;
      r0.xyz = r0.xyz * r1.xxx + r1.yyy;
      r0.xyz = r0.xyz * r0.www;
      r0.xyz = r9.xyz * r0.xyz;
      r3.xyz = r0.xyz * r5.www;
      r3.w = dot(r3.xyz, float3(0.212639004,0.715168655,0.0721923187));
    }
  }
  r0.xyzw = r3.wxyz + r2.wxyz;
  r0.xyzw = ExposureScale * r0.xyzw;
  r0.xyzw = max(float4(0,0,0,0), r0.xyzw);
  o0.xyzw = min(float4(64512,64512,64512,64512), r0.yzwx);
  return;

}

/****************************** COMPILE ERRORS ******************************
C:\games\WATCH_DOGS2\bin\ShaderFixes\d940759f1fcb616e-ps_replace.txt(1056,30-70): error X3018: invalid subscript '_m00_m10_m20_m30'
C:\games\WATCH_DOGS2\bin\ShaderFixes\d940759f1fcb616e-ps_replace.txt(1056,17-71): error X3013: 'dot': no matching 2 parameter intrinsic function
C:\games\WATCH_DOGS2\bin\ShaderFixes\d940759f1fcb616e-ps_replace.txt(1056,17-71): error X3013: Possible intrinsic functions are:
C:\games\WATCH_DOGS2\bin\ShaderFixes\d940759f1fcb616e-ps_replace.txt(1056,17-71): error X3013:     dot(floatM|halfM|doubleM|min10floatM|min16floatM|intM|uintM|min12intM|min16intM|min16uintM, floatM|halfM|doubleM|min10floatM|min16floatM|intM|uintM|min12intM|min16intM|min16uintM)

compilation failed; no code produced
****************************** COMPILE ERRORS ******************************/
