//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.42 on Tue Dec 27 11:17:42 2016
//
//
// Buffer Definitions: 
//
// cbuffer Global
// {
//
//   float4 EnvironmentLuminances;      // Offset:    0 Size:    16 [unused]
//   float4 FakeEarthShadowPlane;       // Offset:   16 Size:    16 [unused]
//   float4 GlobalLightsIntensity;      // Offset:   32 Size:    16 [unused]
//   float4 GlobalWeatherControl;       // Offset:   48 Size:    16 [unused]
//   float4 MaterialWetnessParams[22];  // Offset:   64 Size:   352 [unused]
//   float4 WindGlobalTurbulence;       // Offset:  416 Size:    16 [unused]
//   float4 WindVelocityTextureCoverage;// Offset:  432 Size:    16
//   float4 WorldLoadingRingSizes[2];   // Offset:  448 Size:    32 [unused]
//   
//   struct SGlobalDebugValues
//   {
//       
//       float debugValue0;             // Offset:  480
//       float debugValue1;             // Offset:  484
//       float debugValue2;             // Offset:  488
//       float debugValue3;             // Offset:  492
//
//   } DebugValues;                     // Offset:  480 Size:    16 [unused]
//   float3 SunShadowDirection;         // Offset:  496 Size:    12 [unused]
//   float CrowdAnimationStartTime;     // Offset:  508 Size:     4 [unused]
//   float3 WindGlobalNoiseTextureChannelSel;// Offset:  512 Size:    12
//   float GlobalReflectionTextureBlendRatio;// Offset:  524 Size:     4 [unused]
//   float3 WindGlobalNoiseTextureCoverage;// Offset:  528 Size:    12
//   float GlobalWaterLevel;            // Offset:  540 Size:     4 [unused]
//   
//   struct SGlobalScalars
//   {
//       
//       float time;                    // Offset:  544
//       float staticReflectionIntensity;// Offset:  548
//       float gameDeltaTime;           // Offset:  552
//
//   } GlobalScalars;                   // Offset:  544 Size:    12 [unused]
//   float RcpStaticReflectionExposureScale;// Offset:  556 Size:     4 [unused]
//   float2 GlobalNoiseSampler2DSquareSize;// Offset:  560 Size:     8 [unused]
//   float SandstormIntensity;          // Offset:  568 Size:     4 [unused]
//   float StaticReflectionIntensityDest;// Offset:  572 Size:     4 [unused]
//   float2 WindNoiseDeltaVector;       // Offset:  576 Size:     8
//   float TimeOfDay;                   // Offset:  584 Size:     4 [unused]
//   float VertexAOIntensity;           // Offset:  588 Size:     4 [unused]
//   float2 WindVector;                 // Offset:  592 Size:     8
//
// }
//
// cbuffer Viewport
// {
//
//   float4 CameraNearPlaneSize;        // Offset:    0 Size:    16 [unused]
//   float4x4 DepthTextureTransform;    // Offset:   16 Size:    64 [unused]
//   float4 FSMClipPlanes;              // Offset:   80 Size:    16 [unused]
//   float4 FacettedShadowCastParams;   // Offset:   96 Size:    16 [unused]
//   float4 FogValues0;                 // Offset:  112 Size:    16 [unused]
//   float4 FogValues1;                 // Offset:  128 Size:    16 [unused]
//   float4x4 InvProjectionMatrix;      // Offset:  144 Size:    64
//   float4x4 InvProjectionMatrixDepth; // Offset:  208 Size:    64 [unused]
//   float4x3 InvViewMatrix;            // Offset:  272 Size:    48
//   float4x4 PreviousViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4x4 ProjectionMatrix;         // Offset:  384 Size:    64 [unused]
//   float4 RainOcclusionFadeParams;    // Offset:  448 Size:    16 [unused]
//   float4x4 RainOcclusionProjectionMatrix;// Offset:  464 Size:    64 [unused]
//   float4 RainOcclusionShadowMapSize; // Offset:  528 Size:    16 [unused]
//   float4 ReflectionVolumeDebugColors[15];// Offset:  544 Size:   240 [unused]
//   float4 VPosOffset;                 // Offset:  784 Size:    16 [unused]
//   float4 VPosScale;                  // Offset:  800 Size:    16 [unused]
//   float4x3 ViewMatrix;               // Offset:  816 Size:    48
//   float4x4 ViewProjectionMatrix;     // Offset:  864 Size:    64 [unused]
//   float4x4 ViewRotProjectionMatrix;  // Offset:  928 Size:    64
//   float4x4 ViewRotProjectionMatrixPure;// Offset:  992 Size:    64 [unused]
//   float4 ViewportSize;               // Offset: 1056 Size:    16
//   
//   struct SCameraDistances
//   {
//       
//       float near;                    // Offset: 1072
//       float far;                     // Offset: 1076
//       float view;                    // Offset: 1080
//       float oneOverView;             // Offset: 1084
//
//   } CameraDistances;                 // Offset: 1072 Size:    16 [unused]
//   
//   struct SReflectionVolume
//   {
//       
//       float4x4 inverseTransform;     // Offset: 1088
//       float3 rcpFadeRangePositive;   // Offset: 1152
//       float textureArrayIndexAsFloat;// Offset: 1164
//       float3 rcpFadeRangeNegative;   // Offset: 1168
//       float fadeFactor;              // Offset: 1180
//       float2 multipliers;            // Offset: 1184
//       uint parallaxCorrection;       // Offset: 1192
//       float padding0;                // Offset: 1196
//
//   } ReflectionVolumes[15];           // Offset: 1088 Size:  1680 [unused]
//   float3 CameraDirection;            // Offset: 2768 Size:    12
//   float DefaultReflectionTextureArrayIndexAsFloat;// Offset: 2780 Size:     4 [unused]
//   float3 CameraPosition;             // Offset: 2784 Size:    12
//   float DynamicCubeMapReflectionTextureMaxMipIndex;// Offset: 2796 Size:     4 [unused]
//   float3 CullingCameraPosition;      // Offset: 2800 Size:    12 [unused]
//   float ExposedWhitePointOverExposureScale;// Offset: 2812 Size:     4 [unused]
//   float3 FogColorVector;             // Offset: 2816 Size:    12 [unused]
//   float ExposureScale;               // Offset: 2828 Size:     4 [unused]
//   float3 OppositeFogColorDelta;      // Offset: 2832 Size:    12 [unused]
//   float MaxParaboloidReflectionMipIndex;// Offset: 2844 Size:     4 [unused]
//   float3 SideFogColor;               // Offset: 2848 Size:    12 [unused]
//   float MaxStaticReflectionMipIndex; // Offset: 2860 Size:     4 [unused]
//   float3 SunFogColorDelta;           // Offset: 2864 Size:    12 [unused]
//   float MeasuredExposureScale;       // Offset: 2876 Size:     4 [unused]
//   float3 TemporalFilteringParams;    // Offset: 2880 Size:    12 [unused]
//   float RaindropRippleScale;         // Offset: 2892 Size:     4 [unused]
//   float3 UncompressDepthWeights;     // Offset: 2896 Size:    12 [unused]
//   float ReflectionScaleDistanceMul;  // Offset: 2908 Size:     4 [unused]
//   float3 UncompressDepthWeightsWS;   // Offset: 2912 Size:    12 [unused]
//   float ReflectionScaleStrength;     // Offset: 2924 Size:     4 [unused]
//   float3 ViewPoint;                  // Offset: 2928 Size:    12 [unused]
//   float SkyParaboloidTextureMaxMipIndex;// Offset: 2940 Size:     4 [unused]
//   float2 DefaultReflectionMultipliers;// Offset: 2944 Size:     8 [unused]
//   bool UseOnlySkyReflection;         // Offset: 2952 Size:     4 [unused]
//   float2 ReflectionGIControl;        // Offset: 2960 Size:     8 [unused]
//   uint2 SelectedPixel;               // Offset: 2968 Size:     8 [unused]
//
// }
//
// cbuffer MaterialWD2Confetti
// {
//
//   float4 MaterialPickingID;          // Offset:    0 Size:    16 [unused]
//   float4 DiffuseColors[10];          // Offset:   16 Size:   160 [unused]
//   float4 TextureAtlasSize;           // Offset:  176 Size:    16 [unused]
//   float3 EmissiveIntensity;          // Offset:  192 Size:    12 [unused]
//   float AlphaTestValue;              // Offset:  204 Size:     4 [unused]
//   float2 VisualSizeScale;            // Offset:  208 Size:     8
//   float BendDisplacement;            // Offset:  216 Size:     4 [unused]
//   float DiffuseColorCount;           // Offset:  220 Size:     4 [unused]
//   float Metalness;                   // Offset:  224 Size:     4 [unused]
//   float NormalIntensity;             // Offset:  228 Size:     4 [unused]
//   float OmniSpotAttenuation;         // Offset:  232 Size:     4 [unused]
//   float Reflectance;                 // Offset:  236 Size:     4 [unused]
//   float Roughness;                   // Offset:  240 Size:     4 [unused]
//   float SunLightAttenuation;         // Offset:  244 Size:     4 [unused]
//   float TextureAtlasAnimFrames;      // Offset:  248 Size:     4 [unused]
//   float TextureAtlasSelection;       // Offset:  252 Size:     4 [unused]
//   float Translucency;                // Offset:  256 Size:     4 [unused]
//   float TransparencyAlpha;           // Offset:  260 Size:     4 [unused]
//   float VelocitySizeFactor;          // Offset:  264 Size:     4
//   int BlendingType;                  // Offset:  268 Size:     4 [unused]
//   int GeometryOrientation;           // Offset:  272 Size:     4
//   int SortingLayerBias;              // Offset:  276 Size:     4 [unused]
//   int TextureAtlasMode;              // Offset:  280 Size:     4 [unused]
//   bool AlphaFadeInEnabled;           // Offset:  284 Size:     4 [unused]
//   bool AlphaFadeOutEnabled;          // Offset:  288 Size:     4 [unused]
//   bool AlphaTestEnabled;             // Offset:  292 Size:     4 [unused]
//   bool IsLit;                        // Offset:  296 Size:     4 [unused]
//   bool RandomTextureRotation;        // Offset:  300 Size:     4 [unused]
//
// }
//
// cbuffer ConfettiGlobal
// {
//
//   struct SConfettiGlobalParameters
//   {
//       
//       float4 m_uvToView;             // Offset:    0
//       float4 m_depthBufferToViewSpace;// Offset:   16
//       float4 m_deltaTime;            // Offset:   32
//       float4x4 m_viewToWorldMatrix;  // Offset:   48
//       float4 m_frustumPlanes[4];     // Offset:  112
//       float m_topViewHeightFieldSize;// Offset:  176
//       uint m_baseRandomIndex;        // Offset:  180
//       uint m_numVehiclesAroundCamera;// Offset:  184
//       uint m_numKillShapes;          // Offset:  188
//       float4 m_forceTopDepthSphere;  // Offset:  192
//       float4 m_killShapePoints[32];  // Offset:  208
//       uint4 m_killShapes[10];        // Offset:  720
//       
//       struct SConfettiSystemVehicleInfo
//       {
//           
//           float4x4 m_transform;      // Offset:  880
//           float4x4 m_invTransform;   // Offset:  944
//           float4 m_size;             // Offset: 1008
//           float4 m_velocity;         // Offset: 1024
//           float4 m_angularVelocity;  // Offset: 1040
//
//       } m_vehiclesAroundCamera[32];  // Offset:  880
//
//   } ConfettiGlobalParams;            // Offset:    0 Size:  6512
//
// }
//
// cbuffer ConfettiEmitterSettings
// {
//
//   float3 AirDragForBigParticlesParams;// Offset:    0 Size:    12
//   float AlwaysStickDistanceSquared;  // Offset:   12 Size:     4 [unused]
//   float3 EmissionRadii;              // Offset:   16 Size:    12
//   float BounceNormalRestitution;     // Offset:   28 Size:     4
//   float3 EnvironmentSpawningOffset;  // Offset:   32 Size:    12 [unused]
//   float BounceTangentialRestitution; // Offset:   44 Size:     4
//   float2 EmissionDelayWindSpeedRange;// Offset:   48 Size:     8 [unused]
//   float CollisionRadius;             // Offset:   56 Size:     4
//   float EmissionDelayBase;           // Offset:   60 Size:     4
//   float2 EnvironmentSpawningRadius;  // Offset:   64 Size:     8 [unused]
//   float EmissionDelayVariance;       // Offset:   72 Size:     4
//   float EmissionDelayWindScale;      // Offset:   76 Size:     4 [unused]
//   float2 EnvironmentSpawningStretch; // Offset:   80 Size:     8 [unused]
//   float EmissionLength;              // Offset:   88 Size:     4
//   float EmissionMinWindSpeed;        // Offset:   92 Size:     4
//   float2 ParticleFadeInTime;         // Offset:   96 Size:     8
//   float EmissionSpeed;               // Offset:  104 Size:     4
//   float EmissionSpeedVariance;       // Offset:  108 Size:     4
//   float2 ParticleFadeOutTime;        // Offset:  112 Size:     8
//   float EmitDirectionSign;           // Offset:  120 Size:     4
//   float EnvironmentSpawningMinDistanceSquared;// Offset:  124 Size:     4 [unused]
//   float2 ParticleFadeScaleControl;   // Offset:  128 Size:     8
//   float EnvironmentSpawningVerticalRange;// Offset:  136 Size:     4 [unused]
//   float GravityAcceleration;         // Offset:  140 Size:     4
//   float LifetimeAfterImpact;         // Offset:  144 Size:     4
//   float LifetimeBase;                // Offset:  148 Size:     4
//   float LifetimeVariance;            // Offset:  152 Size:     4
//   float MinContactExtractionScale;   // Offset:  156 Size:     4
//   float NormalAirDrag;               // Offset:  160 Size:     4 [unused]
//   float NormalExcentricityScale1;    // Offset:  164 Size:     4 [unused]
//   float NormalExcentricityScale2;    // Offset:  168 Size:     4 [unused]
//   float NormalExcentricityScale3;    // Offset:  172 Size:     4 [unused]
//   float NormalExcentricityScaleVariance;// Offset:  176 Size:     4 [unused]
//   float ParticleSize;                // Offset:  180 Size:     4
//   float ParticleSizeVariance;        // Offset:  184 Size:     4
//   float SlaveEmissionDirectionVariance;// Offset:  188 Size:     4 [unused]
//   float SpawnFluidVelocityUsageScale;// Offset:  192 Size:     4
//   float StaticFrictionCollisionRadius;// Offset:  196 Size:     4 [unused]
//   float StickingMaxSpeedSquared;     // Offset:  200 Size:     4 [unused]
//   float SurfaceExtractionMaxNormalSpeed;// Offset:  204 Size:     4
//   float TangentAirDrag;              // Offset:  208 Size:     4
//   float TrianglePhysicalBodyRadius;  // Offset:  212 Size:     4 [unused]
//   float VehicleContactOffsetForVelocitySampling;// Offset:  216 Size:     4
//   float VisibilityLifeExtensionSquareRadius;// Offset:  220 Size:     4
//   float WindFactor;                  // Offset:  224 Size:     4
//   uint EmitDirectionAxis;            // Offset:  228 Size:     4
//   uint MaxNumVehiclesForSpawning;    // Offset:  232 Size:     4 [unused]
//   uint NumEmittedParticles;          // Offset:  236 Size:     4
//   uint NumParticlesInTheAir;         // Offset:  240 Size:     4 [unused]
//   uint NumParticlesOnTheGround;      // Offset:  244 Size:     4 [unused]
//   uint NumParticlesOnVehicles;       // Offset:  248 Size:     4 [unused]
//   bool EmitAwayFromCenter;           // Offset:  252 Size:     4
//   bool EmitFromUpperHalf;            // Offset:  256 Size:     4
//   bool EnableCollisionDetection;     // Offset:  260 Size:     4
//   bool EnableDestructionOnImpact;    // Offset:  264 Size:     4
//   bool EnableParticleRecycling;      // Offset:  268 Size:     4
//   bool EnvironmentSpawningHalfVolume;// Offset:  272 Size:     4 [unused]
//   bool EnvironmentSpawningUniformDistribution;// Offset:  276 Size:     4 [unused]
//   bool IgnoreInitialVelocityDirection;// Offset:  280 Size:     4
//
// }
//
// cbuffer ConfettiEmitterSimulation
// {
//
//   float4x4 LocalTransform;           // Offset:    0 Size:    64
//   float RcpSlaveMultiplexFactor;     // Offset:   64 Size:     4 [unused]
//   uint MasterParticleCount;          // Offset:   68 Size:     4 [unused]
//   uint ParticleCount;                // Offset:   72 Size:     4
//   uint ParticleCountPerInstance;     // Offset:   76 Size:     4
//   bool IsSlaveMultiplexFactorLessThan2;// Offset:   80 Size:     4 [unused]
//
// }
//
// Resource bind info for ConfettiGlobal__RandomVectors
// {
//
//   float3 $Element;                   // Offset:    0 Size:    12
//
// }
//
// Resource bind info for ConfettiSystemInstanceData__InstanceData
// {
//
//   struct SConfettiSystemInstanceInfo
//   {
//       
//       float4x4 m_localToWorld;       // Offset:    0
//       float3 m_initialVelocity;      // Offset:   64
//       uint m_bounceAndDrag;          // Offset:   76
//       float m_emissionSpeedMultiplier;// Offset:   80
//       float m_emissionDelayMultiplier;// Offset:   84
//       uint m_unused1;                // Offset:   88
//       uint m_unused2;                // Offset:   92
//       uint m_maxRecyclingCount;      // Offset:   96
//       uint m_textureSelAndFlags;     // Offset:  100
//       float m_sizeMultiplier;        // Offset:  104
//       uint m_debugIDs;               // Offset:  108
//
//   } $Element;                        // Offset:    0 Size:   112
//
// }
//
// Resource bind info for ConfettiEmitterSimulation__DynamicStates
// {
//
//   struct SParticleDynamicState
//   {
//       
//       float3 position1;              // Offset:    0
//       float3 position2;              // Offset:   12
//       float3 position3;              // Offset:   24
//       float3 velocity1;              // Offset:   36
//       float3 velocity2;              // Offset:   48
//       float3 velocity3;              // Offset:   60
//       float lifetime;                // Offset:   72
//       float emissionDelay;           // Offset:   76
//       uint recycleCount;             // Offset:   80
//
//   } $Element;                        // Offset:    0 Size:    84
//
// }
//
// Resource bind info for ConfettiEmitterSimulation__StaticStates
// {
//
//   struct SParticleStaticState
//   {
//       
//       uint bounceDragAndSize;        // Offset:    0
//       uint textureSelAndRandomValue; // Offset:    4
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for ConfettiEmitterSimulation__OutParticleInstances
// {
//
//   struct SGraphicParticle
//   {
//       
//       float3 position;               // Offset:    0
//       float3 bitangent;              // Offset:   12
//       float3 tangent;                // Offset:   24
//       uint fadeFactors;              // Offset:   36
//       uint textureSelAndRandomValue; // Offset:   40
//       uint speedAndSize;             // Offset:   44
//
//   } $Element;                        // Offset:    0 Size:    48
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// Global__WindGlobalNoiseTexture__SampObj__    sampler      NA          NA    0        1
// Global__WindVelocityTexture__SampObj__    sampler      NA          NA    1        1
// ColorClamp2D                      sampler      NA          NA    2        1
// Global__WindGlobalNoiseTexture__TexObj__    texture  float4          2d    0        1
// Global__WindVelocityTexture__TexObj__    texture  float4          2d    1        1
// ConfettiGlobal__DepthBlendedGBuffer__TexObj__    texture  float4          2d    2        1
// ConfettiGlobal__DepthGBuffer__TexObj__    texture  float4          2d    3        1
// ConfettiGlobal__RandomVectors     texture  struct         r/o    4        1
// ConfettiSystemInstanceData__InstanceData    texture  struct         r/o    5        1
// ConfettiEmitterSimulation__DynamicStates        UAV  struct         r/w    0        1
// ConfettiEmitterSimulation__StaticStates        UAV  struct         r/w    1        1
// ConfettiEmitterSimulation__OutParticleInstances        UAV  struct         r/w    2        1
// ConfettiEmitterSimulation__IndirectDrawBuffer        UAV    byte         r/w    3        1
// Global                            cbuffer      NA          NA    0        1
// Viewport                          cbuffer      NA          NA    1        1
// MaterialWD2Confetti               cbuffer      NA          NA    2        1
// ConfettiGlobal                    cbuffer      NA          NA    3        1
// ConfettiEmitterSettings           cbuffer      NA          NA    4        1
// ConfettiEmitterSimulation         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer cb0[38], immediateIndexed
dcl_constantbuffer cb1[175], immediateIndexed
dcl_constantbuffer cb2[18], immediateIndexed
dcl_constantbuffer cb3[407], dynamicIndexed
dcl_constantbuffer cb4[18], immediateIndexed
dcl_constantbuffer cb5[5], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_structured t4, 12 
dcl_resource_structured t5, 112 
dcl_uav_structured u0, 84
dcl_uav_structured u1, 8
dcl_uav_structured u2, 48
dcl_uav_raw u3
dcl_input vThreadID.x
dcl_temps 14
dcl_thread_group 64, 1, 1
ult r0.x, vThreadID.x, cb5[4].z
if_nz r0.x
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r0.xyz, vThreadID.x, l(72), u0.xyzx
  mul r0.w, cb4[9].z, l(0.500000)
  imul null, r1.x, vThreadID.x, l(4999)
  udiv null, r1.x, r1.x, l(5000)
  ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r1.x, r1.x, l(0), t4.xxxx
  mad r0.w, r0.w, r1.x, cb4[9].y
  ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r1.x, vThreadID.x, l(0), u1.xxxx
  f16tof32 r1.x, r1.x
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r1.yzw, vThreadID.x, l(0), u0.xxyz
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r2.xyz, vThreadID.x, l(36), u0.xyzx
  utof r2.w, vThreadID.x
  utof r3.x, cb5[4].w
  div r2.w, r2.w, r3.x
  ftou r2.w, r2.w
  ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r3.z, r2.w, l(96), t5.xxxx
  ult r3.w, r0.z, r3.z
  mov r3.xy, l(0,-1.000000,0,0)
  movc r0.xyz, r3.wwww, r3.xyzx, r0.xyzx
  ge r3.x, r0.y, l(0.000000)
  if_nz r3.x
    add r0.y, r0.y, -cb3[2].x
    lt r3.x, r0.y, l(0.000000)
    ge r3.y, l(0.000000), cb4[5].w
    and r3.x, r3.y, r3.x
    if_nz r3.x
      ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r3.x, r2.w, l(100), t5.xxxx
      and r3.y, r3.x, l(1)
      if_nz r3.y
        ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r4.xyzw, r2.w, l(0), t5.xyzw
        ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r5.xyzw, r2.w, l(16), t5.xyzw
        ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r6.xyzw, r2.w, l(32), t5.xyzw
        mul r7.xyzw, r4.yyyy, cb5[1].xyzw
        mad r7.xyzw, cb5[0].xyzw, r4.xxxx, r7.xyzw
        mad r7.xyzw, cb5[2].xyzw, r4.zzzz, r7.xyzw
        mad r4.xyzw, cb5[3].xyzw, r4.wwww, r7.xyzw
        mul r7.xyzw, r5.yyyy, cb5[1].xyzw
        mad r7.xyzw, cb5[0].xyzw, r5.xxxx, r7.xyzw
        mad r7.xyzw, cb5[2].xyzw, r5.zzzz, r7.xyzw
        mad r5.xyzw, cb5[3].xyzw, r5.wwww, r7.xyzw
        mul r7.xyzw, r6.yyyy, cb5[1].xyzw
        mad r7.xyzw, cb5[0].xyzw, r6.xxxx, r7.xyzw
        mad r7.xyzw, cb5[2].xyzw, r6.zzzz, r7.xyzw
        mad r6.xyzw, cb5[3].xywz, r6.wwww, r7.xywz
        ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r7.xyzw, r2.w, l(64), t5.xyzw
        mul r3.y, cb4[11].z, l(0.500000)
        imad r8.xy, vThreadID.xxxx, l(4357, 517, 0, 0), cb3[11].yyyy
        udiv null, r8.xy, r8.xyxx, l(5000, 5000, 0, 0)
        ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r3.z, r8.x, l(0), t4.xxxx
        mad r3.y, r3.y, r3.z, cb4[11].y
        max r3.y, r3.y, l(0.001000)
        ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r3.z, r2.w, l(104), t5.xxxx
        mul r1.x, r3.z, r3.y
        ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r3.y, r8.y, l(0), t4.xxxx
        mul r3.y, r3.y, l(65534.000000)
        add r3.y, |r3.y|, l(1.000000)
        ftou r3.y, r3.y
        udiv null, r3.z, vThreadID.x, cb5[4].w
        ult r3.z, r3.z, cb4[14].w
        if_nz r3.z
          imad r3.z, vThreadID.x, l(5519), cb3[11].y
          udiv null, r3.z, r3.z, l(5000)
          ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r8.xyz, r3.z, l(0), t4.xyzx
          add r3.z, |r8.z|, l(0.000010)
          sqrt r3.z, r3.z
          mul r8.zw, r3.zzzz, cb4[1].xxxy
          dp2 r9.x, r8.xyxx, r8.xyxx
          rsq r9.x, r9.x
          mul r9.xyzw, r8.xxyy, r9.xxxx
          lt r10.x, |r9.w|, |r9.y|
          mul r9.xyzw, r8.xyxy, |r9.xyzw|
          movc r8.xy, r10.xxxx, r9.xyxx, r9.zwzz
          mul r8.xy, r8.zwzz, r8.xyxx
          mul r9.y, r3.z, cb4[5].z
          movc r9.z, cb4[16].x, |r8.y|, r8.y
          mov r9.x, r8.x
          mov r9.w, l(1.000000)
          dp4 r8.x, r9.xyzw, r4.xyzw
          dp4 r8.y, r9.xyzw, r5.xyzw
          dp4 r8.z, r9.xywz, r6.xyzw
          if_nz cb4[15].w
            imad r3.z, vThreadID.x, l(5419), cb3[11].y
            udiv null, r3.z, r3.z, l(5000)
            ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r3.z, r3.z, l(0), t4.xxxx
            mul r3.z, r3.z, cb4[6].w
            mad r3.z, r3.z, l(0.500000), cb4[6].z
            mov r6.x, r4.w
            mov r6.y, r5.w
            add r9.xyz, -r6.xyzx, r8.xyzx
            dp3 r9.w, r9.xyzx, r9.xyzx
            rsq r9.w, r9.w
            mul r9.xyz, r9.wwww, r9.xyzx
            mul r9.xyz, r3.zzzz, r9.xyzx
          else 
            mov r10.x, r4.x
            mov r10.y, r5.x
            mov r10.z, r6.x
            mov r3.z, cb4[14].y
            mul r10.xyz, r10.xyzx, icb[r3.z + 0].xxxx
            mov r11.x, r4.y
            mov r11.y, r5.y
            mov r11.z, r6.y
            mad r10.xyz, icb[r3.z + 0].yyyy, r11.xyzx, r10.xyzx
            mov r6.x, r4.z
            mov r6.y, r5.z
            mad r10.xyz, icb[r3.z + 0].zzzz, r6.xywx, r10.xyzx
            mov r6.x, r4.w
            mov r6.y, r5.w
            mad r10.xyz, icb[r3.z + 0].wwww, r6.xyzx, r10.xyzx
            mul r10.xyz, r10.xyzx, cb4[7].zzzz
            mul r3.z, cb4[6].w, l(0.500000)
            imad r9.w, vThreadID.x, l(5739), cb3[11].y
            udiv null, r9.w, r9.w, l(5000)
            ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r9.w, r9.w, l(0), t4.xxxx
            mad r3.z, r3.z, r9.w, cb4[6].z
            mul r10.xyz, r3.zzzz, r10.xyzx
            mad r11.xy, r8.xyxx, cb0[27].xyxx, cb0[27].zwzz
            add r11.zw, |r11.xxxy|, l(0.000000, 0.000000, -1.000000, -1.000000)
            mul_sat r11.zw, r11.zzzw, l(0.000000, 0.000000, -10.000000, -10.000000)
            mad r11.xy, r11.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            sample_l_indexable(texture2d)(float,float,float,float) r11.xy, r11.xyxx, t1.xyzw, s1, l(0.000000)
            mad r12.xy, r8.xyxx, cb0[33].xxxx, cb0[33].yzyy
            sample_l_indexable(texture2d)(float,float,float,float) r12.xyz, r12.xyxx, t0.xyzw, s0, l(0.000000)
            dp3 r3.z, r12.xyzx, cb0[32].xyzx
            mad r12.xy, cb0[36].xyxx, r3.zzzz, cb0[37].xyxx
            mul r3.z, r11.w, r11.z
            mul r3.z, r3.z, l(0.900000)
            mov r12.z, l(0)
            add r11.xy, r11.xyxx, -r12.xyxx
            mov r11.z, l(0)
            mad r11.xyz, r3.zzzz, r11.xyzx, r12.xyzx
            mul r3.z, cb4[14].x, l(0.125000)
            mul r11.xyz, r11.xyzx, r3.zzzz
            add r3.z, -cb4[12].x, l(1.000000)
            mul r10.xyz, r10.xyzx, r3.zzzz
            mad r9.xyz, cb4[12].xxxx, r11.xyzx, r10.xyzx
          endif 
        else 
          mov r10.x, r4.x
          mov r10.y, r5.x
          mov r10.z, r6.x
          mov r3.z, cb4[14].y
          mul r10.xyz, r10.xyzx, icb[r3.z + 0].xxxx
          mov r11.x, r4.y
          mov r11.y, r5.y
          mov r11.z, r6.y
          mad r10.xyz, icb[r3.z + 0].yyyy, r11.xyzx, r10.xyzx
          mov r6.x, r4.z
          mov r6.y, r5.z
          mad r4.xyz, icb[r3.z + 0].zzzz, r6.xywx, r10.xyzx
          mov r6.x, r4.w
          mov r6.y, r5.w
          mad r4.xyz, icb[r3.z + 0].wwww, r6.xyzx, r4.xyzx
          mul r4.xyz, r4.xyzx, cb4[7].zzzz
          mul r3.z, cb4[6].w, l(0.500000)
          imad r4.w, vThreadID.x, l(5739), cb3[11].y
          udiv null, r4.w, r4.w, l(5000)
          ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r4.w, r4.w, l(0), t4.xxxx
          mad r3.z, r3.z, r4.w, cb4[6].z
          mul r4.xyz, r3.zzzz, r4.xyzx
          add r5.xy, |cb0[27].zwzz|, l(-1.000000, -1.000000, 0.000000, 0.000000)
          mul_sat r5.xy, r5.xyxx, l(-10.000000, -10.000000, 0.000000, 0.000000)
          mad r5.zw, cb0[27].zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
          sample_l_indexable(texture2d)(float,float,float,float) r5.zw, r5.zwzz, t1.zwxy, s1, l(0.000000)
          sample_l_indexable(texture2d)(float,float,float,float) r6.xyz, cb0[33].yzyy, t0.xyzw, s0, l(0.000000)
          dp3 r3.z, r6.xyzx, cb0[32].xyzx
          mad r6.xy, cb0[36].xyxx, r3.zzzz, cb0[37].xyxx
          mul r3.z, r5.y, r5.x
          mul r3.z, r3.z, l(0.900000)
          mov r6.z, l(0)
          add r5.xy, r5.zwzz, -r6.xyxx
          mov r5.z, l(0)
          mad r5.xyz, r3.zzzz, r5.xyzx, r6.xyzx
          mul r3.z, cb4[14].x, l(0.125000)
          mul r5.xyz, r5.xyzx, r3.zzzz
          add r3.z, -cb4[12].x, l(1.000000)
          mul r4.xyz, r4.xyzx, r3.zzzz
          mad r9.xyz, cb4[12].xxxx, r5.xyzx, r4.xyzx
          mov r8.xyz, l(0,0,-10000.000000,0)
        endif 
        ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r3.z, r2.w, l(80), t5.xxxx
        mul r4.xyz, r3.zzzz, r9.xyzx
        dp3 r4.w, r7.xyzx, r7.xyzx
        sqrt r4.w, r4.w
        mul r4.xyz, r4.wwww, r4.xyzx
        mad r5.xyz, r9.xyzx, r3.zzzz, r7.xyzx
        movc r2.xyz, cb4[17].zzzz, r4.xyzx, r5.xyzx
        f32tof16 r3.z, r1.x
        bfi r4.x, l(16), l(0), r3.z, r7.w
        and r3.x, r3.x, l(0xffff0000)
        or r4.y, r3.y, r3.x
        store_structured u1.xy, vThreadID.x, l(0), r4.xyxx
        mov r0.x, r0.w
      else 
        mov r8.xyz, r1.yzwy
      endif 
    else 
      mov r8.xyz, r1.yzwy
    endif 
    mov r3.x, l(0)
  else 
    lt r3.y, l(0.000000), r0.x
    lt r3.z, r1.w, l(-0.200000)
    add r4.xyz, r1.yzwy, -cb1[174].xyzx
    dp3 r4.w, r4.xyzx, cb1[173].xyzx
    lt r4.w, r4.w, l(0.000000)
    dp3 r4.x, r4.xyzx, r4.xyzx
    lt r4.x, cb4[13].w, r4.x
    or r4.x, r4.x, r4.w
    add r4.y, r0.w, -cb4[6].x
    lt r4.y, r4.y, r0.x
    or r4.x, r4.y, r4.x
    ge r4.y, cb4[7].x, r0.x
    or r4.x, r4.y, r4.x
    add r4.y, r0.x, -cb3[2].x
    movc r4.x, r4.x, r4.y, r0.x
    movc r3.z, r3.z, l(0), r4.x
    movc r0.x, r3.y, r3.z, r0.x
    lt r3.x, l(0.000000), r0.x
    if_nz r3.x
      mov r8.xyz, r1.yzwy
    else 
      ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r3.y, r2.w, l(100), t5.xxxx
      and r3.y, r3.y, l(2)
      ine r3.y, r3.y, l(0)
      ine r3.z, cb4[16].w, l(0)
      and r3.y, r3.z, r3.y
      udiv null, r3.z, vThreadID.x, cb5[4].w
      or r3.y, r3.w, r3.y
      uge r3.z, r3.z, cb4[14].w
      or r3.y, r3.z, r3.y
      if_nz r3.y
        mul r3.y, cb4[4].z, l(0.500000)
        imad r3.z, vThreadID.x, l(3677), cb3[11].y
        udiv null, r3.z, r3.z, l(5000)
        ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r3.z, r3.z, l(0), t4.xxxx
        mad r3.y, r3.y, r3.z, cb4[3].w
        max r3.y, r3.y, l(0.000000)
        ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r2.w, r2.w, l(84), t5.xxxx
        mul r0.y, r2.w, r3.y
      endif 
      mov r8.xyz, l(0,0,-10000.000000,0)
      mov r2.xyz, l(0,0,0,0)
      mov r0.x, l(0)
    endif 
  endif 
  if_nz r3.x
    lt r2.w, l(0.000000), cb3[2].x
    if_nz r2.w
      mad r2.w, r1.x, cb4[0].x, cb4[0].y
      max r2.w, r2.w, l(0.000000)
      mad r2.w, r2.w, cb4[0].z, l(1.000000)
      ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r3.x, vThreadID.x, l(0), u1.xxxx
      ubfe r3.x, l(8), l(16), r3.x
      utof r3.x, r3.x
      mul r2.w, r2.w, r3.x
      mul r2.w, r2.w, l(0.015625)
      mad r3.xy, r8.xyxx, cb0[27].xyxx, cb0[27].zwzz
      add r3.zw, |r3.xxxy|, l(0.000000, 0.000000, -1.000000, -1.000000)
      mul_sat r3.zw, r3.zzzw, l(0.000000, 0.000000, -10.000000, -10.000000)
      mad r3.xy, r3.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      sample_l_indexable(texture2d)(float,float,float,float) r3.xy, r3.xyxx, t1.xyzw, s1, l(0.000000)
      mad r4.xy, r8.xyxx, cb0[33].xxxx, cb0[33].yzyy
      sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r4.xyxx, t0.xyzw, s0, l(0.000000)
      dp3 r4.x, r4.xyzx, cb0[32].xyzx
      mad r4.xy, cb0[36].xyxx, r4.xxxx, cb0[37].xyxx
      mul r3.z, r3.w, r3.z
      mul r3.z, r3.z, l(0.900000)
      mov r4.z, l(0)
      add r5.xy, r3.xyxx, -r4.xyxx
      mov r5.z, l(0)
      mad r3.xyz, r3.zzzz, r5.xyzx, r4.xyzx
      mul r3.w, cb4[14].x, l(0.125000)
      mad r3.xyz, r3.wwww, r3.xyzx, -r2.xyzx
      mul r3.xyz, r2.wwww, r3.xyzx
      mul r4.xy, r3.xyxx, cb4[13].xxxx
      mad r4.z, cb4[13].x, r3.z, cb4[8].w
      mad r3.xyz, cb3[2].xxxx, r4.xyzx, r2.xyzx
      mad r8.xyz, r3.xyzx, cb3[2].xxxx, r1.yzwy
      if_nz cb4[16].y
        add r4.xyz, r8.xyzx, -cb1[174].xyzx
        mov r4.w, l(1.000000)
        dp4 r5.x, r4.xyzw, cb1[58].xyzw
        dp4 r5.y, r4.xyzw, cb1[59].xyzw
        dp4 r2.w, r4.xyzw, cb1[61].xyzw
        lt r3.w, l(0.000100), r2.w
        div r5.zw, r5.xxxy, r2.wwww
        lt r6.xy, l(-1.000000, -1.000000, 0.000000, 0.000000), r5.zwzz
        lt r6.zw, r5.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
        and r2.w, r6.z, r6.x
        and r2.w, r6.y, r2.w
        and r6.z, r6.w, r2.w
        mad r7.xy, r5.zwzz, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        add r7.z, -r7.y, l(1.000000)
        mad r7.xy, r7.xzxx, cb1[66].xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
        movc r6.xy, r6.zzzz, r7.xyxx, l(-1000.000000,-1000.000000,0,0)
        movc r6.xyz, r3.wwww, r6.xyzx, l(-1000.000000,-1000.000000,0,0)
        if_nz r6.z
          movc r5.xy, r3.wwww, r5.zwzz, r5.xyxx
          round_ni r7.yz, r6.yyxy
          add r9.xyzw, r7.zyzy, l(1.000000, 1.000000, 0.500000, 0.500000)
          mad r5.xy, r5.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
          add r5.z, -r5.y, l(1.000000)
          gather4_indexable(texture2d)(float,float,float,float) r10.xyzw, r5.xzxx, t3.xyzw, s2.x
          gather4_indexable(texture2d)(float,float,float,float) r5.xyzw, r5.xzxx, t2.xyzw, s2.x
          max r5.xyzw, r5.wzyx, r10.wzyx
          div r10.xy, r9.zwzz, cb1[66].xyxx
          add r10.z, -r10.y, l(1.000000)
          mad r10.xy, r10.xzxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
          mov r10.z, r5.x
          mov r10.w, l(1.000000)
          dp4 r11.x, r10.xyzw, cb1[9].xyzw
          dp4 r11.y, r10.xyzw, cb1[10].xyzw
          dp4 r11.z, r10.xyzw, cb1[11].xyzw
          dp4 r11.w, r10.xyzw, cb1[12].xyzw
          div r10.xyzw, r11.xyzw, r11.wwww
          mov r7.xw, r9.xxxy
          add r9.xyzw, r7.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
          div r11.xy, r9.xyxx, cb1[66].xyxx
          add r11.z, -r11.y, l(1.000000)
          mad r11.xy, r11.xzxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
          mov r11.z, r5.y
          mov r11.w, l(1.000000)
          dp4 r12.x, r11.xyzw, cb1[9].xyzw
          dp4 r12.y, r11.xyzw, cb1[10].xyzw
          dp4 r12.z, r11.xyzw, cb1[11].xyzw
          dp4 r12.w, r11.xyzw, cb1[12].xyzw
          div r11.xyzw, r12.xyzw, r12.wwww
          add r7.xw, r7.zzzy, l(1.500000, 0.000000, 0.000000, 1.500000)
          div r12.xy, r7.xwxx, cb1[66].xyxx
          add r12.z, -r12.y, l(1.000000)
          mad r12.xy, r12.xzxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
          mov r12.z, r5.z
          mov r12.w, l(1.000000)
          dp4 r13.x, r12.xyzw, cb1[9].xyzw
          dp4 r13.y, r12.xyzw, cb1[10].xyzw
          dp4 r13.z, r12.xyzw, cb1[11].xyzw
          dp4 r13.w, r12.xyzw, cb1[12].xyzw
          div r12.xyzw, r13.xyzw, r13.wwww
          div r9.xy, r9.zwzz, cb1[66].xyxx
          add r9.z, -r9.y, l(1.000000)
          mad r9.xy, r9.xzxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
          mov r9.z, r5.w
          mov r9.w, l(1.000000)
          dp4 r13.x, r9.xyzw, cb1[9].xyzw
          dp4 r13.y, r9.xyzw, cb1[10].xyzw
          dp4 r13.z, r9.xyzw, cb1[11].xyzw
          dp4 r13.w, r9.xyzw, cb1[12].xyzw
          div r9.xyzw, r13.xyzw, r13.wwww
          dp4 r13.y, r10.xyzw, cb1[17].xyzw
          dp4 r13.z, r10.xyzw, cb1[18].xyzw
          dp4 r13.x, r10.xyzw, cb1[19].xyzw
          dp4 r10.z, r11.xyzw, cb1[17].xyzw
          dp4 r10.x, r11.xyzw, cb1[18].xyzw
          dp4 r10.y, r11.xyzw, cb1[19].xyzw
          dp4 r11.z, r12.xyzw, cb1[17].xyzw
          dp4 r11.x, r12.xyzw, cb1[18].xyzw
          dp4 r11.y, r12.xyzw, cb1[19].xyzw
          dp4 r12.y, r9.xyzw, cb1[17].xyzw
          dp4 r12.z, r9.xyzw, cb1[18].xyzw
          dp4 r12.x, r9.xyzw, cb1[19].xyzw
          add r6.xy, r6.xyxx, -r7.zyzz
          add r7.xy, -r6.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
          mul r5.yz, r5.yyzy, r6.xxxx
          mad r5.xy, r7.xxxx, r5.xwxx, r5.yzyy
          mul r2.w, r5.y, r6.y
          mad r5.x, r7.y, r5.x, r2.w
          mov r5.yw, l(0,1.000000,0,1.000000)
          dp2 r2.w, r5.xyxx, cb1[11].zwzz
          dp2 r3.w, r5.xyxx, cb1[12].zwzz
          div r2.w, -r2.w, r3.w
          mov r8.w, l(1.000000)
          dp4 r5.x, r8.xyzw, cb1[51].xyzw
          dp4 r5.y, r8.xyzw, cb1[52].xyzw
          dp4 r5.z, r8.xyzw, cb1[53].xyzw
          div r2.w, -r2.w, r5.z
          mul r5.xyz, r2.wwww, r5.xyzx
          dp4 r7.x, r5.xyzw, cb1[17].xyzw
          dp4 r7.y, r5.xyzw, cb1[18].xyzw
          dp4 r7.z, r5.xyzw, cb1[19].xyzw
          lt r2.w, r6.y, r6.x
          add r5.xyz, -r13.zxyz, r11.xyzx
          add r6.xyw, -r13.zxzy, r10.xyxz
          mul r9.xyz, r5.yzxy, r6.xywx
          mad r6.xyw, r5.xyxz, r6.ywyx, -r9.xyxz
          dp3 r3.w, r6.xywx, r6.xywx
          rsq r3.w, r3.w
          mul r6.xyw, r3.wwww, r6.xyxw
          add r9.xyz, -r13.xyzx, r12.xyzx
          mul r10.xyz, r5.xyzx, r9.xyzx
          mad r5.xyz, r9.zxyz, r5.yzxy, -r10.xyzx
          dp3 r3.w, r5.xyzx, r5.xyzx
          rsq r3.w, r3.w
          mul r5.xyz, r3.wwww, r5.xyzx
          movc r5.xyz, r2.wwww, r6.xywx, r5.xyzx
        else 
          mov r7.xyz, l(0,0,0,0)
          mov r5.xyz, l(0,0,1.000000,0)
        endif 
        add r6.xyw, -r7.xyxz, r8.xyxz
        dp3 r2.w, r6.xywx, r5.xyzx
        movc r2.w, r6.z, r2.w, l(100000.000000)
        mad r2.w, -r1.x, cb4[3].z, r2.w
        mov r8.w, l(1.000000)
        mov r6.xyz, l(0,0,0,0)
        mov r3.w, l(0)
        mov r4.w, l(0)
        loop 
          uge r5.w, r3.w, cb3[11].z
          mov r4.w, l(0)
          breakc_nz r5.w
          imul null, r5.w, r3.w, l(11)
          mul r7.xyz, l(1.050000, 1.050000, 1.050000, 0.000000), cb3[r5.w + 63].xyzx
          dp4 r9.x, r8.xyzw, cb3[r5.w + 59].xyzw
          dp4 r9.y, r8.xyzw, cb3[r5.w + 60].xyzw
          dp4 r6.w, r8.xyzw, cb3[r5.w + 61].xyzw
          add r9.z, r6.w, cb4[13].z
          ge r7.xyz, r7.xyzx, |r9.xyzx|
          and r6.w, r7.y, r7.x
          and r6.w, r7.z, r6.w
          if_nz r6.w
            mov r7.z, -cb3[r5.w + 55].w
            mov r7.x, -cb3[r5.w + 56].w
            mov r7.y, -cb3[r5.w + 57].w
            add r7.xyz, r7.xyzx, r8.yzxy
            mul r9.xyz, r7.xyzx, cb3[r5.w + 65].zxyz
            mad r7.xyz, cb3[r5.w + 65].yzxy, r7.yzxy, -r9.xyzx
            add r6.xyz, r7.xyzx, cb3[r5.w + 64].xyzx
            mov r7.xyz, r6.xyzx
            mov r4.w, l(-1)
            break 
          else 
            mov r6.xyz, l(0,0,0,0)
          endif 
          iadd r3.w, r3.w, l(1)
          mov r4.w, r6.w
        endloop 
        and r6.xyz, r6.xyzx, r4.wwww
        lt r3.w, r2.w, l(0.000000)
        lt r4.w, l(-0.300000), r2.w
        and r3.w, r3.w, r4.w
        add r3.xyz, r3.xyzx, -r6.xyzx
        dp3 r4.w, r3.xyzx, r5.xyzx
        dp3 r4.x, r4.xyzx, r5.xyzx
        add_sat r4.x, r4.x, -cb4[9].w
        add_sat r4.x, r4.x, cb4[9].w
        dp3 r4.y, r6.xyzx, r6.xyzx
        min r4.y, r4.y, l(1.000000)
        add r4.z, -r4.x, l(1.000000)
        mad r4.x, r4.y, r4.z, r4.x
        lt r4.y, r4.w, cb4[12].w
        mul r4.x, r4.x, r4.x
        mul r2.w, r2.w, r4.x
        mad r7.xyz, -r2.wwww, r5.xyzx, r8.xyzx
        movc r4.xyz, r4.yyyy, r7.xyzx, r8.xyzx
        lt r2.w, r4.w, l(0.000000)
        if_nz r2.w
          mul r7.xyz, r5.xyzx, r4.wwww
          mad r3.xyz, -r4.wwww, r5.xyzx, r3.xyzx
          ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r2.w, vThreadID.x, l(0), u1.xxxx
          ushr r2.w, r2.w, l(24)
          utof r2.w, r2.w
          mul r2.w, r2.w, cb4[1].w
          mul r2.w, r2.w, l(0.015625)
          mad r5.xyz, -r2.wwww, r7.xyzx, r6.xyzx
          mad r3.xyz, cb4[2].wwww, r3.xyzx, r5.xyzx
          mad r3.xyz, -r3.xyzx, cb3[2].xxxx, r4.xyzx
        else 
          mov r3.xyz, r1.yzwy
        endif 
        movc r8.xyz, r3.wwww, r4.xyzx, r8.xyzx
        movc r1.yzw, r3.wwww, r3.xxyz, r1.yyzw
        min r2.w, r0.x, cb4[9].x
        movc r2.w, cb4[16].z, r2.w, r0.x
        movc r0.x, r3.w, r2.w, r0.x
      endif 
      div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), cb3[2].x
      add r1.yzw, -r1.yyzw, r8.xxyz
      mul r2.xyz, r2.wwww, r1.yzwy
    endif 
    max r1.y, cb2[13].y, cb2[13].x
    mov r8.w, l(1.000000)
    dp4 r1.z, r8.xyzw, cb3[7].xyzw
    mad r1.z, -r1.x, r1.y, r1.z
    dp4 r1.w, r8.xyzw, cb3[8].xyzw
    mad r1.w, -r1.x, r1.y, r1.w
    lt r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    and r1.z, r1.w, r1.z
    dp4 r1.w, r8.xyzw, cb3[9].xyzw
    mad r1.w, -r1.x, r1.y, r1.w
    lt r1.w, r1.w, l(0.000000)
    and r1.z, r1.w, r1.z
    dp4 r1.w, r8.xyzw, cb3[10].xyzw
    mad r1.y, -r1.x, r1.y, r1.w
    lt r1.y, r1.y, l(0.000000)
    and r1.y, r1.y, r1.z
    if_nz r1.y
      dp3 r1.y, r2.xyzx, r2.xyzx
      sqrt r3.x, r1.y
      imm_atomic_iadd r4.x, u3, l(4), l(1)
      add r1.yzw, r8.xxyz, -cb1[174].xxyz
      dp3 r2.w, r1.yzwy, r1.yzwy
      rsq r2.w, r2.w
      mul r1.yzw, r1.yyzw, r2.wwww
      mov r5.y, cb1[19].y
      mov r5.z, cb1[17].y
      mov r5.x, cb1[18].y
      mul r4.yzw, r1.wwyz, r5.xxyz
      mad r5.xyz, r1.zwyz, r5.yzxy, -r4.yzwy
      mul r4.yzw, r1.zzwy, r5.zzxy
      mad r3.yzw, r5.yyzx, r1.wwyz, -r4.yyzw
      ieq r2.w, cb2[17].x, l(2)
      lt r4.y, l(0.000000), r3.x
      div r6.xyz, r2.xyzx, r3.xxxx
      movc r4.yzw, r4.yyyy, r6.xxyz, l(0,0,0,-0.001000)
      dp3 r6.x, r4.yzwy, r5.xyzx
      dp3 r6.y, r4.yzwy, r3.yzwy
      mul r6.yzw, r3.yyzw, r6.yyyy
      mad r6.xyz, r5.xyzx, r6.xxxx, r6.yzwy
      dp3 r6.w, r6.xyzx, r6.xyzx
      rsq r6.w, r6.w
      mul r6.xyz, r6.wwww, r6.xyzx
      mul r7.xyz, r1.zwyz, r6.zxyz
      mad r7.yzw, r6.yyzx, r1.wwyz, -r7.xxyz
      add r9.x, -cb2[16].z, l(10.000000)
      max r9.x, r9.x, l(1.000000)
      dp3 r1.y, r4.yzwy, r1.yzwy
      mad_sat r1.y, -r9.x, |r1.y|, r9.x
      mul r7.x, r1.y, r3.x
      mov r6.w, r7.y
      mov r5.w, r3.y
      movc r5.xyzw, r2.wwww, r6.zxyw, r5.zxyw
      movc r1.yzw, r2.wwww, r7.xxzw, r3.xxzw
      mov r8.w, r5.w
      store_structured u2.xyzw, r4.x, l(0), r8.xyzw
      mov r3.xy, r1.zwzz
      mov r3.zw, r5.yyyz
      store_structured u2.xyzw, r4.x, l(16), r3.xyzw
      add r0.w, -r0.x, r0.w
      mul_sat r0.w, r0.w, cb4[6].y
      mul_sat r1.z, r0.x, cb4[7].y
      add_sat r1.w, r0.w, cb4[8].x
      mul r1.x, r1.w, r1.x
      add_sat r1.w, r1.z, cb4[8].y
      mul r1.x, r1.w, r1.x
      f32tof16 r0.w, r0.w
      f32tof16 r1.z, r1.z
      imad r5.y, r0.w, l(0x00010000), r1.z
      ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r5.z, vThreadID.x, l(4), u1.xxxx
      f32tof16 r0.w, r1.y
      f32tof16 r1.x, r1.x
      imad r5.w, r0.w, l(0x00010000), r1.x
      store_structured u2.xyzw, r4.x, l(32), r5.xyzw
    endif 
  endif 
  store_structured u0.xyz, vThreadID.x, l(0), r8.xyzx
  store_structured u0.xyz, vThreadID.x, l(36), r2.xyzx
  store_structured u0.xyz, vThreadID.x, l(72), r0.xyzx
endif 
ret 
// Approximately 561 instruction slots used
