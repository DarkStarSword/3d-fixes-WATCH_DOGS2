// hlsltool.py --fix-wd2-unproject -i --only-autofixed --fxc /home/dss/fxc.exe 312d6a869fec5064-ps_replace.txt
// ---- Created with 3Dmigoto v1.2.42 on Tue Dec 27 10:53:14 2016

cbuffer Viewport : register(b0)
{
  float4 CameraNearPlaneSize : packoffset(c0);
  float4x4 DepthTextureTransform : packoffset(c1);
  float4 FSMClipPlanes : packoffset(c5);
  float4 FacettedShadowCastParams : packoffset(c6);
  float4 FogValues0 : packoffset(c7);
  float4 FogValues1 : packoffset(c8);
  float4x4 InvProjectionMatrix : packoffset(c9);
  float4x4 InvProjectionMatrixDepth : packoffset(c13);
  float4x3 InvViewMatrix : packoffset(c17);
  float4x4 PreviousViewProjectionMatrix : packoffset(c20);
  float4x4 ProjectionMatrix : packoffset(c24);
  float4 RainOcclusionFadeParams : packoffset(c28);
  float4x4 RainOcclusionProjectionMatrix : packoffset(c29);
  float4 RainOcclusionShadowMapSize : packoffset(c33);
  float4 ReflectionVolumeDebugColors[15] : packoffset(c34);
  float4 VPosOffset : packoffset(c49);
  float4 VPosScale : packoffset(c50);
  float4x3 ViewMatrix : packoffset(c51);
  float4x4 ViewProjectionMatrix : packoffset(c54);
  float4x4 ViewRotProjectionMatrix : packoffset(c58);
  float4x4 ViewRotProjectionMatrixPure : packoffset(c62);
  float4 ViewportSize : packoffset(c66);

  struct
  {
    float near;
    float far;
    float view;
    float oneOverView;
  } CameraDistances : packoffset(c67);


  struct
  {
    float4x4 inverseTransform;
    float3 rcpFadeRangePositive;
    float textureArrayIndexAsFloat;
    float3 rcpFadeRangeNegative;
    float fadeFactor;
    float2 multipliers;
    uint parallaxCorrection;
    float padding0;
  } ReflectionVolumes[15] : packoffset(c68);

  float3 CameraDirection : packoffset(c173);
  float DefaultReflectionTextureArrayIndexAsFloat : packoffset(c173.w);
  float3 CameraPosition : packoffset(c174);
  float DynamicCubeMapReflectionTextureMaxMipIndex : packoffset(c174.w);
  float3 CullingCameraPosition : packoffset(c175);
  float ExposedWhitePointOverExposureScale : packoffset(c175.w);
  float3 FogColorVector : packoffset(c176);
  float ExposureScale : packoffset(c176.w);
  float3 OppositeFogColorDelta : packoffset(c177);
  float MaxParaboloidReflectionMipIndex : packoffset(c177.w);
  float3 SideFogColor : packoffset(c178);
  float MaxStaticReflectionMipIndex : packoffset(c178.w);
  float3 SunFogColorDelta : packoffset(c179);
  float MeasuredExposureScale : packoffset(c179.w);
  float3 TemporalFilteringParams : packoffset(c180);
  float RaindropRippleScale : packoffset(c180.w);
  float3 UncompressDepthWeights : packoffset(c181);
  float ReflectionScaleDistanceMul : packoffset(c181.w);
  float3 UncompressDepthWeightsWS : packoffset(c182);
  float ReflectionScaleStrength : packoffset(c182.w);
  float3 ViewPoint : packoffset(c183);
  float SkyParaboloidTextureMaxMipIndex : packoffset(c183.w);
  float2 DefaultReflectionMultipliers : packoffset(c184);
  bool UseOnlySkyReflection : packoffset(c184.z);
  float2 ReflectionGIControl : packoffset(c185);
  uint2 SelectedPixel : packoffset(c185.z);
}

SamplerState ColorClamp_s : register(s0);
SamplerState ColorWrap_s : register(s1);
Texture2D<float2> Global__IBLBRDFTexture : register(t0);
Texture2D<float4> Viewport__DepthVPSampler__TexObj__ : register(t1);
Texture2D<float4> Viewport__SkyParaboloidTexture : register(t2);
TextureCubeArray<float4> Viewport__DynamicCubeMapReflectionTextureArray : register(t3);
Texture2D<float4> DeferredLightingCommon__AlbedoTexture__TexObj__ : register(t4);
Texture2D<float4> DeferredLightingCommon__NormalTexture__TexObj__ : register(t5);
Texture2D<float4> DeferredLightingCommon__OtherTexture__TexObj__ : register(t6);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;
  uint4 bitmask, uiDest;
  float4 fDest;

// WATCH_DOGS2 unprojection fix inserted by DarkStarSword's hlsltool.py:
// hlsltool.py --fix-wd2-unproject -i --only-autofixed --fxc /home/dss/fxc.exe 312d6a869fec5064-ps_replace.txt

  r0.xy = v0.xy * VPosScale.zw + VPosOffset.zw;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0,0);
  r0.z = Viewport__DepthVPSampler__TexObj__.Load(r1.xyw).x;
  r0.w = 1;
  r2.x = dot(r0.zw, InvProjectionMatrix._m22_m32);
  r0.z = dot(r0.zw, InvProjectionMatrix._m23_m33);
  r0.z = -r2.x / r0.z;
  r2.z = -r0.z;
  r2.xy = r2.zz * r0.xy;

// Fix lights, note depth is negative (or could have used r0.z):
float4 s = StereoParams.Load(0);
r2.x -= s.x * (-r2.z - s.y) * InvProjectionMatrix._m00;

  r2.w = 1;
  r0.x = dot(r2.xyzw, InvViewMatrix._m00_m10_m20_m30);
  r0.y = dot(r2.xyzw, InvViewMatrix._m01_m11_m21_m31);
  r0.z = dot(r2.xyzw, InvViewMatrix._m02_m12_m22_m32);
  r2.xyzw = DeferredLightingCommon__AlbedoTexture__TexObj__.Load(r1.xyw).xyzw;
  r3.xyzw = DeferredLightingCommon__NormalTexture__TexObj__.Load(r1.xyw).xyzw;
  r1.xyzw = DeferredLightingCommon__OtherTexture__TexObj__.Load(r1.xyz).zyxw;
  r1.w = r1.w * 255 + 0.5;
  r1.w = floor(r1.w);
  r1.w = (uint)r1.w;
  r1.w = (uint)r1.w >> 5;
  r4.x = dot(r3.xyz, r3.xyz);
  r4.x = rsqrt(r4.x);
  r4.xyz = r4.xxx * r3.xyz;
  r5.xy = cmp((int2)r1.ww == int2(1,4));
  r4.w = cmp(r2.w >= 0.75);
  r5.z = -0.75 + r2.w;
  r5.z = r5.z * -0.599999905 + 1;
  r4.w = r4.w ? r5.z : 1;
  r4.w = r5.y ? r4.w : r2.w;
  r4.w = r5.x ? 1 : r4.w;
  r6.xyz = CameraPosition.xyz + -r0.xyz;
  r5.z = dot(r6.xyz, r6.xyz);
  r5.z = rsqrt(r5.z);
  r6.xyz = r6.xyz * r5.zzz;
  r7.yzw = r4.www * r2.xyz;
  if (r5.x != 0) {
    r5.x = r3.w * 0.5 + 0.5;
    r5.x = r5.x * 65535 + 0.5;
    r5.x = (uint)r5.x;
    r5.xz = (int2)r5.xx & int2(0,255);
    r5.xz = (uint2)r5.xz;
    r5.xw = float2(1.53186284e-005,0.00784313772) * r5.xz;
    r6.w = 255 * r2.w;
    r6.w = (uint)r6.w;
    r8.xy = (int2)r6.ww & int2(240,15);
    r8.xy = (uint2)r8.xy;
    r8.xy = float2(0.00416666688,0.00533333328) * r8.xy;
    r1.xyz = saturate(r1.xyz);
    r6.w = r1.y * r1.y;
    r9.y = max(0.00100000005, r6.w);
    r5.x = r5.x * r5.x;
    r5.x = max(0.00100000005, r5.x);
    r6.w = dot(-r6.xyz, r4.xyz);
    r6.w = r6.w + r6.w;
    r10.xyz = r4.xyz * -r6.www + -r6.xyz;
    r6.w = dot(r4.xyz, r10.xyz);
    r6.w = -abs(r6.w) * abs(r6.w) + 1;
    r6.w = -r6.w * 0.444702327 + 1;
    r6.w = sqrt(r6.w);
    r5.w = r5.w / r6.w;
    r11.xyz = log2(r7.yzw);
    r8.xzw = r11.xyz * r8.xxx;
    r8.xzw = float3(-12.7799997,-12.7799997,-12.7799997) * r8.xzw;
    r8.xzw = r11.xyz * float3(-0.0199999996,-0.0199999996,-0.0199999996) + r8.xzw;
    r5.z = cmp(r5.z == 0.000000);
    r6.w = r9.y * r9.y;
    r6.w = 2 / r6.w;
    r6.w = -2 + r6.w;
    r6.w = max(1.00000003e-022, r6.w);
    r6.w = sqrt(r6.w);
    r6.w = -10 / r6.w;
    r6.w = exp2(r6.w);
    r6.w = -0.000980000012 + r6.w;
    r6.w = saturate(1.00795019 * r6.w);
    r6.w = 1 + -r6.w;
    if (UseOnlySkyReflection == 0) {
      r9.w = DynamicCubeMapReflectionTextureMaxMipIndex * r6.w;
      r0.w = 1;
      r11.xyzw = float4(0,0,0,0);
      r10.w = 1;
      r12.x = 0;
      while (true) {
        r12.y = cmp((uint)r12.x >= 15);
        if (r12.y != 0) break;
        r12.y = (int)r12.x * 7;
        r13.x = dot(r0.xyzw, ReflectionVolumes[r12.x]._m00_m10_m20_m30);
        r13.y = dot(r0.xyzw, ReflectionVolumes[r12.x]._m01_m11_m21_m31);
        r13.z = dot(r0.xyzw, ReflectionVolumes[r12.x]._m02_m12_m22_m32);
        r14.xyz = cmp(r13.xyz >= float3(0,0,0));
        r14.xyz = r14.xyz ? ReflectionVolumes[r12.x].xyz : ReflectionVolumes[r12.x].xyz;
        r13.xyz = float3(1,1,1) + -abs(r13.xyz);
        r13.xyz = saturate(r13.xyz * r14.xyz);
        r12.z = r13.x * r13.y;
        r12.z = r12.z * r13.z;
        r12.w = cmp(0 < r12.z);
        if (r12.w != 0) {
          r13.x = dot(r10.xyz, ReflectionVolumes[r12.x]._m00_m10_m20);
          r13.y = dot(r10.xyz, ReflectionVolumes[r12.x]._m01_m11_m21);
          r13.z = dot(r10.xyz, ReflectionVolumes[r12.x]._m02_m12_m22);
          r12.z = ReflectionVolumes[r12.x] * r12.z;
          r13.w = ReflectionVolumes[r12.x];
          r13.xyzw = Viewport__DynamicCubeMapReflectionTextureArray.SampleLevel(ColorWrap_s, r13.xyzw, r9.w).xyzw;
          r13.xyzw = ReflectionVolumes[r12.x].xxxy * r13.xyzw;
          r12.y = min(r12.z, r10.w);
          r13.xyzw = r13.xyzw * r12.yyyy + r11.xyzw;
          r12.y = -r12.y + r10.w;
          r12.z = cmp(0 >= r12.y);
          if (r12.z != 0) {
            r11.xyzw = r13.xyzw;
            r10.w = r12.y;
            break;
          }
          r11.xyzw = r13.xyzw;
          r10.w = r12.y;
        }
        r12.x = (int)r12.x + 1;
      }
    } else {
      r11.xyzw = float4(0,0,0,0);
      r10.w = 1;
    }
    r9.w = r11.w + r10.w;
    r11.w = cmp(0 < r9.w);
    if (r11.w != 0) {
      r6.w = SkyParaboloidTextureMaxMipIndex * r6.w;
      r11.w = r10.z + -abs(r10.z);
      r10.w = r10.w * r11.w + abs(r10.z);
      r10.w = r10.w * 2 + 2;
      r12.xy = float2(-1,1) / r10.ww;
      r12.xy = r12.xy * r10.yx;
      r12.xy = r12.xy * float2(0.949999988,0.949999988) + float2(0.5,0.5);
      r12.xyz = Viewport__SkyParaboloidTexture.SampleLevel(ColorClamp_s, r12.xy, r6.w).xyz;
      r13.xyz = saturate(r12.xyz);
      r12.xyz = UseOnlySkyReflection ? r13.xyz : r12.xyz;
      r12.xyz = r12.xyz / ExposureScale;
      r11.xyz = r12.xyz * r9.www + r11.xyz;
    }
    r6.w = 0.0799999982 * r1.z;
    r9.w = dot(r6.www, float3(0.333333343,0.333333343,0.333333343));
    r9.w = 50 * r9.w;
    r9.w = min(1, r9.w);
    r9.x = saturate(dot(r4.xyz, r6.xyz));
    r12.xy = Global__IBLBRDFTexture.SampleLevel(ColorClamp_s, r9.xy, 0).xy;
    r6.w = r6.w * r12.x + r12.y;
    r6.w = r6.w * r9.w;
    r11.xyz = r11.xyz * r6.www;
    r11.xyz = r11.xyz * r4.www;
    r5.x = r9.y + r5.x;
    r9.z = min(1, r5.x);
    r5.x = r9.z * r9.z;
    r5.x = 2 / r5.x;
    r5.x = -2 + r5.x;
    r5.x = max(1.00000003e-022, r5.x);
    r5.x = sqrt(r5.x);
    r5.x = -10 / r5.x;
    r5.x = exp2(r5.x);
    r5.x = -0.000980000012 + r5.x;
    r5.x = 1.00795019 * r5.x;
    r5.x = max(0, r5.x);
    r5.x = 1 + -r5.x;
    if (UseOnlySkyReflection == 0) {
      r6.w = DynamicCubeMapReflectionTextureMaxMipIndex * r5.x;
      r0.w = 1;
      r12.xyzw = float4(0,0,0,0);
      r9.yw = float2(1,0);
      while (true) {
        r10.w = cmp((uint)r9.w >= 15);
        if (r10.w != 0) break;
        r10.w = (int)r9.w * 7;
        r13.x = dot(r0.xyzw, ReflectionVolumes[r9.w]._m00_m10_m20_m30);
        r13.y = dot(r0.xyzw, ReflectionVolumes[r9.w]._m01_m11_m21_m31);
        r13.z = dot(r0.xyzw, ReflectionVolumes[r9.w]._m02_m12_m22_m32);
        r14.xyz = cmp(r13.xyz >= float3(0,0,0));
        r14.xyz = r14.xyz ? ReflectionVolumes[r9.w].xyz : ReflectionVolumes[r9.w].xyz;
        r13.xyz = float3(1,1,1) + -abs(r13.xyz);
        r13.xyz = saturate(r13.xyz * r14.xyz);
        r11.w = r13.x * r13.y;
        r11.w = r11.w * r13.z;
        r13.x = cmp(0 < r11.w);
        if (r13.x != 0) {
          r13.x = dot(r10.xyz, ReflectionVolumes[r9.w]._m00_m10_m20);
          r13.y = dot(r10.xyz, ReflectionVolumes[r9.w]._m01_m11_m21);
          r13.z = dot(r10.xyz, ReflectionVolumes[r9.w]._m02_m12_m22);
          r11.w = ReflectionVolumes[r9.w] * r11.w;
          r13.w = ReflectionVolumes[r9.w];
          r13.xyzw = Viewport__DynamicCubeMapReflectionTextureArray.SampleLevel(ColorWrap_s, r13.xyzw, r6.w).xyzw;
          r13.xyzw = ReflectionVolumes[r9.w].xxxy * r13.xyzw;
          r10.w = min(r11.w, r9.y);
          r13.xyzw = r13.xyzw * r10.wwww + r12.xyzw;
          r10.w = -r10.w + r9.y;
          r11.w = cmp(0 >= r10.w);
          if (r11.w != 0) {
            r12.xyzw = r13.xyzw;
            r9.y = r10.w;
            break;
          }
          r12.xyzw = r13.xyzw;
          r9.y = r10.w;
        }
        r9.w = (int)r9.w + 1;
      }
    } else {
      r12.xyzw = float4(0,0,0,0);
      r9.y = 1;
    }
    r6.w = r12.w + r9.y;
    r9.w = cmp(0 < r6.w);
    if (r9.w != 0) {
      r5.x = SkyParaboloidTextureMaxMipIndex * r5.x;
      r9.w = r10.z + -abs(r10.z);
      r9.y = r9.y * r9.w + abs(r10.z);
      r9.y = r9.y * 2 + 2;
      r9.yw = float2(-1,1) / r9.yy;
      r9.yw = r10.yx * r9.yw;
      r9.yw = r9.yw * float2(0.949999988,0.949999988) + float2(0.5,0.5);
      r10.xyz = Viewport__SkyParaboloidTexture.SampleLevel(ColorClamp_s, r9.yw, r5.x).xyz;
      r13.xyz = saturate(r10.xyz);
      r10.xyz = UseOnlySkyReflection ? r13.xyz : r10.xyz;
      r10.xyz = r10.xyz / ExposureScale;
      r12.xyz = r10.xyz * r6.www + r12.xyz;
    }
    r2.xyz = r2.xyz * r4.www + -r8.yyy;
    r2.xyz = r1.xxx * r2.xyz + r8.yyy;
    r5.x = dot(r2.xyz, float3(0.333333343,0.333333343,0.333333343));
    r5.x = saturate(50 * r5.x);
    r9.xy = Global__IBLBRDFTexture.SampleLevel(ColorClamp_s, r9.xz, 0).xy;
    r2.xyz = r2.xyz * r9.xxx + r9.yyy;
    r2.xyz = r2.xyz * r5.xxx;
    r2.xyz = r12.xyz * r2.xyz;
    r2.xyz = r2.xyz * r4.www;
    r8.xyz = -r8.xzw * r5.www;
    r8.xyz = exp2(r8.xyz);
    r8.xyz = r2.xyz * r8.xyz + r11.xyz;
    r2.xyz = r5.zzz ? r2.xyz : r8.xyz;
    r5.x = dot(r2.xyz, float3(0.212639004,0.715168655,0.0721923187));
  } else {
    r1.y = r1.y * r1.y;
    r8.z = max(0.00100000005, r1.y);
    r5.zw = cmp((int2)r1.ww == int2(2,5));
    if (r5.z != 0) {
      r1.y = r3.w * 0.5 + 0.5;
      r1.y = r1.y * 65535 + 0.5;
      r1.y = (uint)r1.y;
      r9.xy = (int2)r1.yy & int2(255,0);
      r9.xy = (uint2)r9.xy;
      r9.z = r1.z;
      r9.xyz = r9.xyz * float3(0.00784313772,3.06372567e-005,2) + float3(-1,-1,-1);
      r1.y = 1 + -r2.w;
      r1.y = r7.y * r1.y;
      r7.x = r1.y * 0.5 + r7.y;
      r1.y = dot(r9.xyz, r9.xyz);
      r1.y = rsqrt(r1.y);
      r9.xyz = r9.xyz * r1.yyy;
      r1.z = 0.5;
      r10.x = r1.x;
      r10.y = 0;
    } else {
      r1.y = cmp((int)r1.w == 3);
      if (r1.y != 0) {
        r1.y = r3.w * 0.5 + 0.5;
        r1.y = r1.y * 65535 + 0.5;
        r1.y = (uint)r1.y;
        r11.xyzw = (int4)r1.yyyy & int4(0,2016,31,31);
        r11.xyzw = (uint4)r11.xyzw;
        r12.xyz = cmp(float3(1.25395,81.5471954,2568.0896) >= r11.wyx);
        r1.y = 0.00249675405 * r11.w;
        r13.xyz = r11.zyx * float3(0.0322580636,0.000496031775,1.57510076e-005) + float3(0.0549999997,0.0549999997,0.0549999997);
        r13.xyz = float3(0.947867334,0.947867334,0.947867334) * r13.xyz;
        r13.xyz = log2(r13.xyz);
        r13.xyz = float3(2.4000001,2.4000001,2.4000001) * r13.xyz;
        r13.xyz = exp2(r13.xyz);
        r9.x = r12.x ? r1.y : r13.x;
        r10.zw = float2(3.83925508e-005,1.21911819e-006) * r11.yx;
        r9.yz = r12.yz ? r10.zw : r13.yz;
        r10.x = r1.x;
        r10.y = 0;
      } else {
        if (r5.y != 0) {
          r1.y = r3.w * 32767 + 32767;
          r1.y = (uint)r1.y;
          r2.w = (int)r1.y & 255;
          r2.w = (uint)r2.w;
          r2.w = 0.0123199718 * r2.w;
          if (8 == 0) r1.y = 0; else if (8+8 < 32) {           r1.y = (uint)r1.y << (32-(8 + 8)); r1.y = (uint)r1.y >> (32-8);          } else r1.y = (uint)r1.y >> 8;
          r1.y = (uint)r1.y;
          r1.y = r1.y * 0.0246399436 + -3.14159274;
          sincos(r2.w, r11.x, r12.x);
          sincos(r1.y, r13.x, r14.x);
          r14.x = r14.x * r11.x;
          r14.y = r13.x * r11.x;
          r14.z = r12.x;
          r1.y = dot(r14.xyz, r14.xyz);
          r1.y = rsqrt(r1.y);
          r9.xyz = r14.xyz * r1.yyy;
          r10.x = r1.x;
          r10.y = 0;
        } else {
          r1.y = cmp((int)r1.w == 5);
          r2.w = cmp(r3.z < 0.899999976);
          r11.xyz = r2.www ? float3(0,1,0) : float3(1,0,0);
          r12.xyz = r11.xyz * r3.zxy;
          r11.xyz = r3.yzx * r11.yzx + -r12.xyz;
          r2.w = dot(r11.xyz, r11.xyz);
          r2.w = rsqrt(r2.w);
          r11.xyz = r11.xyz * r2.www;
          r12.xyz = r11.yzx * r3.zxy;
          r3.xyz = r3.yzx * r11.zxy + -r12.xyz;
          r2.w = dot(r3.xyz, r3.xyz);
          r2.w = rsqrt(r2.w);
          r3.xyz = r3.xyz * r2.www;
          r2.w = r3.w * 2 + -1;
          r2.w = 3.14159274 * r2.w;
          sincos(r2.w, r12.x, r13.x);
          r11.xyz = r12.xxx * r11.xyz;
          r3.xyz = r3.xyz * r13.xxx + r11.xyz;
          r2.w = r3.w * 0.5 + 0.5;
          r2.w = r2.w * 65535 + 0.5;
          r2.w = (uint)r2.w;
          r5.yz = (int2)r2.ww & int2(255,0);
          r5.yz = (uint2)r5.yz;
          r11.x = 0.00392156886 * r5.y;
          r11.z = r5.z * 3.06372567e-005 + -1;
          r11.xy = r1.ww ? float2(0,0) : r11.xz;
          r11.z = 0;
          r9.xyz = r1.yyy ? r3.xyz : r11.xzz;
          r11.w = r1.x;
          r10.xy = r1.yy ? float2(0,0) : r11.wy;
        }
      }
      r7.x = r7.y;
    }
    if (r5.w != 0) {
      r1.x = dot(-r6.xyz, r4.xyz);
      r1.x = r1.x + r1.x;
      r1.xyw = r4.xyz * -r1.xxx + -r6.xyz;
      r2.w = dot(r1.xyw, r9.xyz);
      r1.x = dot(r1.xyw, r4.xyz);
      r1.xyw = r4.xyz * r1.xxx;
      r1.xyw = r9.xyz * r2.www + r1.xyw;
      r2.w = dot(r9.xyz, r6.xyz);
      r2.w = -r2.w * r2.w + 1;
      r2.w = sqrt(r2.w);
      r3.x = r8.z * r8.z;
      r3.x = 2 / r3.x;
      r3.x = -2 + r3.x;
      r3.x = max(1.00000003e-022, r3.x);
      r3.x = sqrt(r3.x);
      r3.x = -10 / r3.x;
      r3.x = exp2(r3.x);
      r3.x = -0.000980000012 + r3.x;
      r3.x = saturate(1.00795019 * r3.x);
      r3.x = 1 + -r3.x;
      if (UseOnlySkyReflection == 0) {
        r3.y = DynamicCubeMapReflectionTextureMaxMipIndex * r3.x;
        r0.w = 1;
        r9.xyzw = float4(0,0,0,0);
        r3.zw = float2(1,0);
        while (true) {
          r5.y = cmp((uint)r3.w >= 15);
          if (r5.y != 0) break;
          r5.y = (int)r3.w * 7;
          r11.x = dot(r0.xyzw, ReflectionVolumes[r3.w]._m00_m10_m20_m30);
          r11.y = dot(r0.xyzw, ReflectionVolumes[r3.w]._m01_m11_m21_m31);
          r11.z = dot(r0.xyzw, ReflectionVolumes[r3.w]._m02_m12_m22_m32);
          r12.xyz = cmp(r11.xyz >= float3(0,0,0));
          r12.xyz = r12.xyz ? ReflectionVolumes[r3.w].xyz : ReflectionVolumes[r3.w].xyz;
          r11.xyz = float3(1,1,1) + -abs(r11.xyz);
          r11.xyz = saturate(r11.xyz * r12.xyz);
          r5.z = r11.x * r11.y;
          r5.z = r5.z * r11.z;
          r5.w = cmp(0 < r5.z);
          if (r5.w != 0) {
            r11.x = dot(r1.xyw, ReflectionVolumes[r3.w]._m00_m10_m20);
            r11.y = dot(r1.xyw, ReflectionVolumes[r3.w]._m01_m11_m21);
            r11.z = dot(r1.xyw, ReflectionVolumes[r3.w]._m02_m12_m22);
            r5.z = ReflectionVolumes[r3.w] * r5.z;
            r11.w = ReflectionVolumes[r3.w];
            r11.xyzw = Viewport__DynamicCubeMapReflectionTextureArray.SampleLevel(ColorWrap_s, r11.xyzw, r3.y).xyzw;
            r11.xyzw = ReflectionVolumes[r3.w].xxxy * r11.xyzw;
            r5.y = min(r5.z, r3.z);
            r11.xyzw = r11.xyzw * r5.yyyy + r9.xyzw;
            r5.y = -r5.y + r3.z;
            r5.z = cmp(0 >= r5.y);
            if (r5.z != 0) {
              r9.xyzw = r11.xyzw;
              r3.z = r5.y;
              break;
            }
            r9.xyzw = r11.xyzw;
            r3.z = r5.y;
          }
          r3.w = (int)r3.w + 1;
        }
      } else {
        r9.xyzw = float4(0,0,0,0);
        r3.z = 1;
      }
      r3.y = r9.w + r3.z;
      r3.w = cmp(0 < r3.y);
      if (r3.w != 0) {
        r3.x = SkyParaboloidTextureMaxMipIndex * r3.x;
        r3.w = r1.w + -abs(r1.w);
        r1.w = r3.z * r3.w + abs(r1.w);
        r1.w = r1.w * 2 + 2;
        r3.zw = float2(-1,1) / r1.ww;
        r1.xy = r3.zw * r1.yx;
        r1.xy = r1.xy * float2(0.949999988,0.949999988) + float2(0.5,0.5);
        r1.xyw = Viewport__SkyParaboloidTexture.SampleLevel(ColorClamp_s, r1.xy, r3.x).xyz;
        r3.xzw = saturate(r1.xyw);
        r1.xyw = UseOnlySkyReflection ? r3.xzw : r1.xyw;
        r1.xyw = r1.xyw / ExposureScale;
        r9.xyz = r1.xyw * r3.yyy + r9.xyz;
      }
      r1.xyw = sqrt(r7.xzw);
      r3.x = dot(r7.xzw, float3(0.212639004,0.715168655,0.0721923187));
      r1.xyw = r1.xyw * float3(4,4,4) + -r4.www;
      r1.xyw = r3.xxx * r1.xyw + r4.www;
      r1.xyw = r9.xyz * r1.xyw;
      r3.x = 0.0799999982 * r1.z;
      r3.yzw = -r1.zzz * float3(0.0799999982,0.0799999982,0.0799999982) + r7.xzw;
      r3.xyz = r10.xxx * r3.yzw + r3.xxx;
      r3.w = dot(r3.xyz, float3(0.333333343,0.333333343,0.333333343));
      r3.w = saturate(50 * r3.w);
      r8.y = saturate(dot(r4.xyz, r6.xyz));
      r5.yz = Global__IBLBRDFTexture.SampleLevel(ColorClamp_s, r8.yz, 0).xy;
      r3.xyz = r3.xyz * r5.yyy + r5.zzz;
      r3.xyz = r3.xyz * r3.www;
      r3.xyz = r3.xyz * r2.www;
      r2.xyz = r3.xyz * r1.xyw;
      r5.x = dot(r2.xyz, float3(0.212639004,0.715168655,0.0721923187));
    } else {
      r1.x = saturate(r10.y + r8.z);
      r1.y = dot(-r6.xyz, r4.xyz);
      r1.y = r1.y + r1.y;
      r3.xyz = r4.xyz * -r1.yyy + -r6.xyz;
      r1.x = r1.x * r1.x;
      r1.x = 2 / r1.x;
      r1.x = -2 + r1.x;
      r1.x = max(1.00000003e-022, r1.x);
      r1.x = sqrt(r1.x);
      r1.x = -10 / r1.x;
      r1.x = exp2(r1.x);
      r1.x = -0.000980000012 + r1.x;
      r1.x = saturate(1.00795019 * r1.x);
      r1.x = 1 + -r1.x;
      if (UseOnlySkyReflection == 0) {
        r1.y = DynamicCubeMapReflectionTextureMaxMipIndex * r1.x;
        r0.w = 1;
        r9.xyzw = float4(0,0,0,0);
        r1.w = 1;
        r2.w = 0;
        while (true) {
          r3.w = cmp((uint)r2.w >= 15);
          if (r3.w != 0) break;
          r3.w = (int)r2.w * 7;
          r11.x = dot(r0.xyzw, ReflectionVolumes[r2.w]._m00_m10_m20_m30);
          r11.y = dot(r0.xyzw, ReflectionVolumes[r2.w]._m01_m11_m21_m31);
          r11.z = dot(r0.xyzw, ReflectionVolumes[r2.w]._m02_m12_m22_m32);
          r5.yzw = cmp(r11.xyz >= float3(0,0,0));
          r5.yzw = r5.yzw ? ReflectionVolumes[r2.w].xyz : ReflectionVolumes[r2.w].xyz;
          r10.yzw = float3(1,1,1) + -abs(r11.xyz);
          r5.yzw = saturate(r10.yzw * r5.yzw);
          r5.y = r5.y * r5.z;
          r5.y = r5.y * r5.w;
          r5.z = cmp(0 < r5.y);
          if (r5.z != 0) {
            r11.x = dot(r3.xyz, ReflectionVolumes[r2.w]._m00_m10_m20);
            r11.y = dot(r3.xyz, ReflectionVolumes[r2.w]._m01_m11_m21);
            r11.z = dot(r3.xyz, ReflectionVolumes[r2.w]._m02_m12_m22);
            r5.y = ReflectionVolumes[r2.w] * r5.y;
            r11.w = ReflectionVolumes[r2.w];
            r11.xyzw = Viewport__DynamicCubeMapReflectionTextureArray.SampleLevel(ColorWrap_s, r11.xyzw, r1.y).xyzw;
            r11.xyzw = ReflectionVolumes[r2.w].xxxy * r11.xyzw;
            r3.w = min(r5.y, r1.w);
            r11.xyzw = r11.xyzw * r3.wwww + r9.xyzw;
            r3.w = -r3.w + r1.w;
            r5.y = cmp(0 >= r3.w);
            if (r5.y != 0) {
              r9.xyzw = r11.xyzw;
              r1.w = r3.w;
              break;
            }
            r9.xyzw = r11.xyzw;
            r1.w = r3.w;
          }
          r2.w = (int)r2.w + 1;
        }
      } else {
        r9.xyzw = float4(0,0,0,0);
        r1.w = 1;
      }
      r0.x = r9.w + r1.w;
      r0.y = cmp(0 < r0.x);
      if (r0.y != 0) {
        r0.y = SkyParaboloidTextureMaxMipIndex * r1.x;
        r0.z = r3.z + -abs(r3.z);
        r0.z = r1.w * r0.z + abs(r3.z);
        r0.z = r0.z * 2 + 2;
        r0.zw = float2(-1,1) / r0.zz;
        r0.zw = r3.yx * r0.zw;
        r0.zw = r0.zw * float2(0.949999988,0.949999988) + float2(0.5,0.5);
        r0.yzw = Viewport__SkyParaboloidTexture.SampleLevel(ColorClamp_s, r0.zw, r0.y).xyz;
        r1.xyw = saturate(r0.yzw);
        r0.yzw = UseOnlySkyReflection ? r1.xyw : r0.yzw;
        r0.yzw = r0.yzw / ExposureScale;
        r9.xyz = r0.yzw * r0.xxx + r9.xyz;
      }
      r0.x = 0.0799999982 * r1.z;
      r0.yzw = -r1.zzz * float3(0.0799999982,0.0799999982,0.0799999982) + r7.xzw;
      r0.xyz = r10.xxx * r0.yzw + r0.xxx;
      r0.w = dot(r0.xyz, float3(0.333333343,0.333333343,0.333333343));
      r0.w = saturate(50 * r0.w);
      r8.x = saturate(dot(r4.xyz, r6.xyz));
      r1.xy = Global__IBLBRDFTexture.SampleLevel(ColorClamp_s, r8.xz, 0).xy;
      r0.xyz = r0.xyz * r1.xxx + r1.yyy;
      r0.xyz = r0.xyz * r0.www;
      r0.xyz = r9.xyz * r0.xyz;
      r2.xyz = r0.xyz * r4.www;
      r5.x = dot(r2.xyz, float3(0.212639004,0.715168655,0.0721923187));
    }
  }
  r0.xyz = ExposureScale * r2.xyz;
  r0.xyz = max(float3(0,0,0), r0.xyz);
  o0.xyz = min(float3(64512,64512,64512), r0.xyz);
  r0.x = ExposureScale * r5.x;
  r0.x = max(0, r0.x);
  o0.w = min(64512, r0.x);
  return;

}

/****************************** COMPILE ERRORS ******************************
C:\games\WATCH_DOGS2\bin\ShaderFixes\312d6a869fec5064-ps_replace.txt(197,30-70): error X3018: invalid subscript '_m00_m10_m20_m30'
C:\games\WATCH_DOGS2\bin\ShaderFixes\312d6a869fec5064-ps_replace.txt(197,17-71): error X3013: 'dot': no matching 2 parameter intrinsic function
C:\games\WATCH_DOGS2\bin\ShaderFixes\312d6a869fec5064-ps_replace.txt(197,17-71): error X3013: Possible intrinsic functions are:
C:\games\WATCH_DOGS2\bin\ShaderFixes\312d6a869fec5064-ps_replace.txt(197,17-71): error X3013:     dot(floatM|halfM|doubleM|min10floatM|min16floatM|intM|uintM|min12intM|min16intM|min16uintM, floatM|halfM|doubleM|min10floatM|min16floatM|intM|uintM|min12intM|min16intM|min16uintM)

compilation failed; no code produced
****************************** COMPILE ERRORS ******************************/
