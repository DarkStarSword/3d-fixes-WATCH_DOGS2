// 2D transparent glass in reflections (police boat) - apply stereo corraction
// ---- Created with 3Dmigoto v1.2.52 on Wed Jan 04 10:34:15 2017

cbuffer Viewport : register(b0)
{
  float4 CameraNearPlaneSize : packoffset(c0);
  float4x4 DepthTextureTransform : packoffset(c1);
  float4 FSMClipPlanes : packoffset(c5);
  float4 FacettedShadowCastParams : packoffset(c6);
  float4 FogValues0 : packoffset(c7);
  float4 FogValues1 : packoffset(c8);
  float4x4 InvProjectionMatrix : packoffset(c9);
  float4x4 InvProjectionMatrixDepth : packoffset(c13);
  float4x3 InvViewMatrix : packoffset(c17);
  float4x4 PreviousViewProjectionMatrix : packoffset(c20);
  float4x4 ProjectionMatrix : packoffset(c24);
  float4 RainOcclusionFadeParams : packoffset(c28);
  float4x4 RainOcclusionProjectionMatrix : packoffset(c29);
  float4 RainOcclusionShadowMapSize : packoffset(c33);
  float4 ReflectionVolumeDebugColors[15] : packoffset(c34);
  float4 VPosOffset : packoffset(c49);
  float4 VPosScale : packoffset(c50);
  float4x3 ViewMatrix : packoffset(c51);
  float4x4 ViewProjectionMatrix : packoffset(c54);
  float4x4 ViewRotProjectionMatrix : packoffset(c58);
  float4x4 ViewRotProjectionMatrixPure : packoffset(c62);
  float4 ViewportSize : packoffset(c66);

  struct
  {
    float near;
    float far;
    float view;
    float oneOverView;
  } CameraDistances : packoffset(c67);


  struct
  {
    float4x4 inverseTransform;
    float3 rcpFadeRangePositive;
    float textureArrayIndexAsFloat;
    float3 rcpFadeRangeNegative;
    float fadeFactor;
    float2 multipliers;
    uint parallaxCorrection;
    float padding0;
  } ReflectionVolumes[15] : packoffset(c68);

  float3 CameraDirection : packoffset(c173);
  float DefaultReflectionTextureArrayIndexAsFloat : packoffset(c173.w);
  float3 CameraPosition : packoffset(c174);
  float DynamicCubeMapReflectionTextureMaxMipIndex : packoffset(c174.w);
  float3 CullingCameraPosition : packoffset(c175);
  float ExposedWhitePointOverExposureScale : packoffset(c175.w);
  float3 FogColorVector : packoffset(c176);
  float ExposureScale : packoffset(c176.w);
  float3 OppositeFogColorDelta : packoffset(c177);
  float MaxParaboloidReflectionMipIndex : packoffset(c177.w);
  float3 SideFogColor : packoffset(c178);
  float MaxStaticReflectionMipIndex : packoffset(c178.w);
  float3 SunFogColorDelta : packoffset(c179);
  float MeasuredExposureScale : packoffset(c179.w);
  float3 TemporalFilteringParams : packoffset(c180);
  float RaindropRippleScale : packoffset(c180.w);
  float3 UncompressDepthWeights : packoffset(c181);
  float ReflectionScaleDistanceMul : packoffset(c181.w);
  float3 UncompressDepthWeightsWS : packoffset(c182);
  float ReflectionScaleStrength : packoffset(c182.w);
  float3 ViewPoint : packoffset(c183);
  float SkyParaboloidTextureMaxMipIndex : packoffset(c183.w);
  float2 DefaultReflectionMultipliers : packoffset(c184);
  bool UseOnlySkyReflection : packoffset(c184.z);
  float2 ReflectionGIControl : packoffset(c185);
  uint2 SelectedPixel : packoffset(c185.z);
}

cbuffer SceneGeometry : register(b1)
{
  float4 GeometryPickingID : packoffset(c0);
  float4 GeometryUserData : packoffset(c1);
  float4 UVDecompression : packoffset(c2);

  struct
  {
    float positionMin;
    float positionRange;
    float meshLocalHeight;
    float isBuildingFacadeInterior;
  } MeshDecompression : packoffset(c3);

  float3 GeometryBBoxMax : packoffset(c4);
  float3 GeometryBBoxMin : packoffset(c5);
}

cbuffer Skinning : register(b2)
{
  float4x3 BlendMatrices[511] : packoffset(c0);
  float4x3 PrevBlendMatrices[511] : packoffset(c1533);
}

cbuffer MaterialWD2Glass : register(b3)
{
  float4 MaterialPickingID : packoffset(c0);
  float4 BaseColorUVTiling : packoffset(c1);
  float4 SurfaceParametersUVTiling : packoffset(c2);
  float3 AbsorptionColor : packoffset(c3);
  float AbsorptionDistance : packoffset(c3.w);
  float3 AbsorptionColorPreset : packoffset(c4);
  float BaseColorAlpha : packoffset(c4.w);
  float3 BaseColor : packoffset(c5);
  float DustIntensity : packoffset(c5.w);
  float3 DamageStateUVSlide : packoffset(c6);
  float MaskChannelUsageAlpha : packoffset(c6.w);
  float3 DustColor : packoffset(c7);
  float MaskChannelUsageBlue : packoffset(c7.w);
  float3 MudColor : packoffset(c8);
  float MaskChannelUsageGreen : packoffset(c8.w);
  float3 SurfaceAlbedo : packoffset(c9);
  float MaskChannelUsageRed : packoffset(c9.w);
  float2 AbsorptionDistanceTiling : packoffset(c10);
  float MaxFreePath : packoffset(c10.z);
  float Metalness : packoffset(c10.w);
  float2 AbsorptionTiling : packoffset(c11);
  float MudIntensity : packoffset(c11.z);
  float NormalMapIntensity : packoffset(c11.w);
  float2 NormalMapTiling : packoffset(c12);
  float Reflectance : packoffset(c12.z);
  float ReflectanceDustAdjustment : packoffset(c12.w);
  float2 ThicknessTiling : packoffset(c13);
  float Roughness : packoffset(c13.z);
  float RoughnessDustAdjustment : packoffset(c13.w);
  float Thickness : packoffset(c14);
  int WetSurfaceTypeIndex : packoffset(c14.y);
  bool AbsorptionDistanceModulateByVAlpha : packoffset(c14.z);
  bool DamageStateEnabled : packoffset(c14.w);
  bool IsVehicule : packoffset(c15);
}

cbuffer SceneGraphicObjectInstancePart : register(b4)
{
  float4x3 WorldMatrix : packoffset(c0);
}

cbuffer CollisionRegionsModifier : register(b5)
{
  float4 RegionOffsets[3] : packoffset(c0);
  float4 RegionsDeform[4] : packoffset(c3);
  float4 RegionsScratches[4] : packoffset(c7);
  float3 BoundingMax : packoffset(c11);
  float3 BoundingMin : packoffset(c12);
  uint3 RegionsCount : packoffset(c13);
}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  int4 v0 : blendweight0,
  int4 v1 : texcoord2,
  float4 v2 : normal0,
  float4 v3 : color1,
  float4 v4 : texcoord1,
  float4 v5 : texcoord0,
  out float o0 : TEXCOORD0,
  out float4 o1 : SV_Position0)
{
  const float4 icb[] = { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} };
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = (int3)v0.xyz;
  r0.xyz = r0.xyz * MeshDecompression.positionRange + MeshDecompression.positionMin;
  r1.xyz = float3(-0.5,-0.5,-0.5) + v3.zyx;
  r2.xyz = -BoundingMin.xyz + r0.xyz;
  r3.xyz = -BoundingMin.xyz + BoundingMax.xyz;
  r2.xyz = r2.xyz / r3.xyz;
  r3.xyz = cmp((int3)RegionsCount.xyz != int3(1,1,1));
  if (r3.x != 0) {
    r4.xyzw = cmp(r2.xxxx >= RegionOffsets[0].xyzw);
    r4.xyzw = r4.xyzw ? float4(1,1,1,1) : 0;
    r0.w = dot(r4.xyzw, float4(1,1,1,1));
    r0.w = (uint)r0.w;
    if (r0.w != 0) {
      r1.w = (int)r0.w + -1;
      r1.w = dot(RegionOffsets[0].xyzw, icb[r1.w+0].xyzw);
    } else {
      r1.w = 0;
    }
    r3.xw = (int2)RegionsCount.xx + int2(-1,-2);
    r2.w = cmp((uint)r0.w < (uint)r3.x);
    if (r2.w != 0) {
      r2.w = dot(RegionOffsets[0].xyzw, icb[r0.w+0].xyzw);
    } else {
      r2.w = 1;
    }
    r3.x = r2.x + -r1.w;
    r1.w = r2.w + -r1.w;
    r1.w = r3.x / r1.w;
    r1.w = r1.w * 2 + -1;
    r2.w = dot(RegionOffsets[0].xyzw, icb[r3.w+0].xyzw);
    r2.w = 1 + r2.w;
    r2.w = 0.5 * r2.w;
    r2.w = cmp(r2.w >= r2.x);
    r2.w = r2.w ? 1.000000 : 0;
    r1.w = r2.w * r1.w;
    r2.w = 0.5 * RegionOffsets[0].x;
    r2.x = cmp(r2.x >= r2.w);
    r2.x = r2.x ? 1.000000 : 0;
    r4.x = r2.x * r1.w;
  } else {
    r4.x = 0;
    r0.w = 0;
  }
  if (r3.y != 0) {
    r5.xyzw = cmp(r2.yyyy >= RegionOffsets[1].xyzw);
    r5.xyzw = r5.xyzw ? float4(1,1,1,1) : 0;
    r1.w = dot(r5.xyzw, float4(1,1,1,1));
    r1.w = (uint)r1.w;
    if (r1.w != 0) {
      r2.x = (int)r1.w + -1;
      r2.x = dot(RegionOffsets[1].xyzw, icb[r2.x+0].xyzw);
    } else {
      r2.x = 0;
    }
    r3.xy = (int2)RegionsCount.yy + int2(-1,-2);
    r2.w = cmp((uint)r1.w < (uint)r3.x);
    if (r2.w != 0) {
      r2.w = dot(RegionOffsets[1].xyzw, icb[r1.w+0].xyzw);
    } else {
      r2.w = 1;
    }
    r3.x = r2.y + -r2.x;
    r2.x = r2.w + -r2.x;
    r2.x = r3.x / r2.x;
    r2.x = r2.x * 2 + -1;
    r2.w = dot(RegionOffsets[1].xyzw, icb[r3.y+0].xyzw);
    r2.w = 1 + r2.w;
    r2.w = 0.5 * r2.w;
    r2.w = cmp(r2.w >= r2.y);
    r2.w = r2.w ? 1.000000 : 0;
    r2.x = r2.x * r2.w;
    r2.w = 0.5 * RegionOffsets[1].x;
    r2.y = cmp(r2.y >= r2.w);
    r2.y = r2.y ? 1.000000 : 0;
    r4.y = r2.x * r2.y;
  } else {
    r4.y = 0;
    r1.w = 0;
  }
  r0.w = mad((int)r1.w, (int)RegionsCount.x, (int)r0.w);
  if (r3.z != 0) {
    r3.xyzw = cmp(r2.zzzz >= RegionOffsets[2].xyzw);
    r3.xyzw = r3.xyzw ? float4(1,1,1,1) : 0;
    r1.w = dot(r3.xyzw, float4(1,1,1,1));
    r1.w = (uint)r1.w;
    if (r1.w != 0) {
      r2.x = (int)r1.w + -1;
      r2.x = dot(RegionOffsets[2].xyzw, icb[r2.x+0].xyzw);
    } else {
      r2.x = 0;
    }
    r2.yw = (int2)RegionsCount.zz + int2(-1,-2);
    r2.y = cmp((uint)r1.w < (uint)r2.y);
    if (r2.y != 0) {
      r2.y = dot(RegionOffsets[2].xyzw, icb[r1.w+0].xyzw);
    } else {
      r2.y = 1;
    }
    r3.x = r2.z + -r2.x;
    r2.x = r2.y + -r2.x;
    r2.x = r3.x / r2.x;
    r2.x = r2.x * 2 + -1;
    r2.y = dot(RegionOffsets[2].xyzw, icb[r2.w+0].xyzw);
    r2.y = 1 + r2.y;
    r2.y = 0.5 * r2.y;
    r2.y = cmp(r2.y >= r2.z);
    r2.y = r2.y ? 1.000000 : 0;
    r2.x = r2.x * r2.y;
    r2.y = 0.5 * RegionOffsets[2].x;
    r2.y = cmp(r2.z >= r2.y);
    r2.y = r2.y ? 1.000000 : 0;
    r4.z = r2.x * r2.y;
  } else {
    r4.z = 0;
    r1.w = 0;
  }
  r1.w = (int)r1.w * (int)RegionsCount.x;
  r0.w = mad((int)r1.w, (int)RegionsCount.y, (int)r0.w);
  r2.xyz = cmp(float3(0,0,0) < r4.xyz);
  r3.xyz = cmp(r4.xyz < float3(0,0,0));
  r2.xyz = (int3)-r2.yxz + (int3)r3.yxz;
  r3.xy = (int2)r2.xz * (int2)RegionsCount.xx;
  r2.w = mad((int)r2.x, (int)RegionsCount.x, (int)r2.y);
  r2.x = 0;
  r2.z = r3.x;
  r2.xyzw = (int4)r0.wwww + (int4)r2.xyzw;
  r3.xyzw = mad((int4)r3.yyyy, (int4)RegionsCount.yyyy, (int4)r2.xyzw);
  r4.xyz = min(float3(1,1,1), abs(r4.xyz));
  r4.xyz = float3(0.5,0.5,0.5) * r4.xyz;
  r5.xyzw = (uint4)r2.xyzw >> int4(2,2,2,2);
  r2.xyzw = (int4)r2.xyzw & int4(3,3,3,3);
  r6.x = dot(RegionsDeform[r5.x].xyzw, icb[r2.x+0].xyzw);
  r6.y = dot(RegionsDeform[r5.y].xyzw, icb[r2.y+0].xyzw);
  r6.z = dot(RegionsDeform[r5.z].xyzw, icb[r2.z+0].xyzw);
  r6.w = dot(RegionsDeform[r5.w].xyzw, icb[r2.w+0].xyzw);
  r2.xyzw = (uint4)r3.xyzw >> int4(2,2,2,2);
  r3.xyzw = (int4)r3.xyzw & int4(3,3,3,3);
  r5.x = dot(RegionsDeform[r2.x].xyzw, icb[r3.x+0].xyzw);
  r5.y = dot(RegionsDeform[r2.y].xyzw, icb[r3.y+0].xyzw);
  r5.z = dot(RegionsDeform[r2.z].xyzw, icb[r3.z+0].xyzw);
  r5.w = dot(RegionsDeform[r2.w].xyzw, icb[r3.w+0].xyzw);
  r2.xyzw = r5.xyzw + -r6.xyzw;
  r2.xyzw = r4.zzzz * r2.xyzw + r6.xyzw;
  r2.zw = r2.zw + -r2.xy;
  r2.xy = r4.yy * r2.zw + r2.xy;
  r0.w = r2.y + -r2.x;
  r0.w = saturate(r4.x * r0.w + r2.x);
  r1.xyz = r1.xyz * r0.www;
  r0.xyz = r1.xyz * float3(0.649999976,0.649999976,0.649999976) + r0.xyz;
  r1.x = (int)v0.w * 3;
  r0.w = 1;
  r2.x = dot(r0.xyzw, BlendMatrices[r1.x/3]._m00_m10_m20_m30);
  r2.y = dot(r0.xyzw, BlendMatrices[r1.x/3]._m01_m11_m21_m31);
  r2.z = dot(r0.xyzw, BlendMatrices[r1.x/3]._m02_m12_m22_m32);
  o0.x = AbsorptionDistanceModulateByVAlpha ? v3.w : 1;
  r2.w = 1;
  r0.x = dot(r2.xyzw, WorldMatrix._m00_m10_m20_m30);
  r0.y = dot(r2.xyzw, WorldMatrix._m01_m11_m21_m31);
  r0.z = dot(r2.xyzw, WorldMatrix._m02_m12_m22_m32);
  r0.xyz = -CameraPosition.xyz + r0.xyz;
  r1.x = ViewRotProjectionMatrix._m00 * r0.x;
  r1.y = ViewRotProjectionMatrix._m01 * r0.x;
  r1.z = ViewRotProjectionMatrix._m02 * r0.x;
  r1.w = ViewRotProjectionMatrix._m03 * r0.x;
  r2.x = ViewRotProjectionMatrix._m10 * r0.y;
  r2.y = ViewRotProjectionMatrix._m11 * r0.y;
  r2.z = ViewRotProjectionMatrix._m12 * r0.y;
  r2.w = ViewRotProjectionMatrix._m13 * r0.y;
  r3.x = r0.z * ViewRotProjectionMatrix._m20 + ViewRotProjectionMatrix._m30;
  r3.y = r0.z * ViewRotProjectionMatrix._m21 + ViewRotProjectionMatrix._m31;
  r3.z = r0.z * ViewRotProjectionMatrix._m22 + ViewRotProjectionMatrix._m32;
  r3.w = r0.z * ViewRotProjectionMatrix._m23 + ViewRotProjectionMatrix._m33;
  r0.xyzw = r3.xyzw + r2.xyzw;
  o1.xyzw = r1.xyzw + r0.xyzw;

float4 s = StereoParams.Load(0);
o1.x += s.x * (o1.w - s.y);

// Driver stereo correction neutralisation technique: Normalise W to Convergence
if (s.y && o1.w > 0)
	o1 = o1 / o1.w * s.y;

// Ubisoft broke the reflections of glass in the 1.09 update. Kill the shader:
if (IniParams[3].z)
	o1 = 0;

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.52 on Wed Jan 04 10:34:15 2017
//
//
// Buffer Definitions: 
//
// cbuffer Viewport
// {
//
//   float4 CameraNearPlaneSize;        // Offset:    0 Size:    16 [unused]
//   float4x4 DepthTextureTransform;    // Offset:   16 Size:    64 [unused]
//   float4 FSMClipPlanes;              // Offset:   80 Size:    16 [unused]
//   float4 FacettedShadowCastParams;   // Offset:   96 Size:    16 [unused]
//   float4 FogValues0;                 // Offset:  112 Size:    16 [unused]
//   float4 FogValues1;                 // Offset:  128 Size:    16 [unused]
//   float4x4 InvProjectionMatrix;      // Offset:  144 Size:    64 [unused]
//   float4x4 InvProjectionMatrixDepth; // Offset:  208 Size:    64 [unused]
//   float4x3 InvViewMatrix;            // Offset:  272 Size:    48 [unused]
//   float4x4 PreviousViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4x4 ProjectionMatrix;         // Offset:  384 Size:    64 [unused]
//   float4 RainOcclusionFadeParams;    // Offset:  448 Size:    16 [unused]
//   float4x4 RainOcclusionProjectionMatrix;// Offset:  464 Size:    64 [unused]
//   float4 RainOcclusionShadowMapSize; // Offset:  528 Size:    16 [unused]
//   float4 ReflectionVolumeDebugColors[15];// Offset:  544 Size:   240 [unused]
//   float4 VPosOffset;                 // Offset:  784 Size:    16 [unused]
//   float4 VPosScale;                  // Offset:  800 Size:    16 [unused]
//   float4x3 ViewMatrix;               // Offset:  816 Size:    48 [unused]
//   float4x4 ViewProjectionMatrix;     // Offset:  864 Size:    64 [unused]
//   float4x4 ViewRotProjectionMatrix;  // Offset:  928 Size:    64
//   float4x4 ViewRotProjectionMatrixPure;// Offset:  992 Size:    64 [unused]
//   float4 ViewportSize;               // Offset: 1056 Size:    16 [unused]
//   
//   struct SCameraDistances
//   {
//       
//       float near;                    // Offset: 1072
//       float far;                     // Offset: 1076
//       float view;                    // Offset: 1080
//       float oneOverView;             // Offset: 1084
//
//   } CameraDistances;                 // Offset: 1072 Size:    16 [unused]
//   
//   struct SReflectionVolume
//   {
//       
//       float4x4 inverseTransform;     // Offset: 1088
//       float3 rcpFadeRangePositive;   // Offset: 1152
//       float textureArrayIndexAsFloat;// Offset: 1164
//       float3 rcpFadeRangeNegative;   // Offset: 1168
//       float fadeFactor;              // Offset: 1180
//       float2 multipliers;            // Offset: 1184
//       uint parallaxCorrection;       // Offset: 1192
//       float padding0;                // Offset: 1196
//
//   } ReflectionVolumes[15];           // Offset: 1088 Size:  1680 [unused]
//   float3 CameraDirection;            // Offset: 2768 Size:    12 [unused]
//   float DefaultReflectionTextureArrayIndexAsFloat;// Offset: 2780 Size:     4 [unused]
//   float3 CameraPosition;             // Offset: 2784 Size:    12
//   float DynamicCubeMapReflectionTextureMaxMipIndex;// Offset: 2796 Size:     4 [unused]
//   float3 CullingCameraPosition;      // Offset: 2800 Size:    12 [unused]
//   float ExposedWhitePointOverExposureScale;// Offset: 2812 Size:     4 [unused]
//   float3 FogColorVector;             // Offset: 2816 Size:    12 [unused]
//   float ExposureScale;               // Offset: 2828 Size:     4 [unused]
//   float3 OppositeFogColorDelta;      // Offset: 2832 Size:    12 [unused]
//   float MaxParaboloidReflectionMipIndex;// Offset: 2844 Size:     4 [unused]
//   float3 SideFogColor;               // Offset: 2848 Size:    12 [unused]
//   float MaxStaticReflectionMipIndex; // Offset: 2860 Size:     4 [unused]
//   float3 SunFogColorDelta;           // Offset: 2864 Size:    12 [unused]
//   float MeasuredExposureScale;       // Offset: 2876 Size:     4 [unused]
//   float3 TemporalFilteringParams;    // Offset: 2880 Size:    12 [unused]
//   float RaindropRippleScale;         // Offset: 2892 Size:     4 [unused]
//   float3 UncompressDepthWeights;     // Offset: 2896 Size:    12 [unused]
//   float ReflectionScaleDistanceMul;  // Offset: 2908 Size:     4 [unused]
//   float3 UncompressDepthWeightsWS;   // Offset: 2912 Size:    12 [unused]
//   float ReflectionScaleStrength;     // Offset: 2924 Size:     4 [unused]
//   float3 ViewPoint;                  // Offset: 2928 Size:    12 [unused]
//   float SkyParaboloidTextureMaxMipIndex;// Offset: 2940 Size:     4 [unused]
//   float2 DefaultReflectionMultipliers;// Offset: 2944 Size:     8 [unused]
//   bool UseOnlySkyReflection;         // Offset: 2952 Size:     4 [unused]
//   float2 ReflectionGIControl;        // Offset: 2960 Size:     8 [unused]
//   uint2 SelectedPixel;               // Offset: 2968 Size:     8 [unused]
//
// }
//
// cbuffer SceneGeometry
// {
//
//   float4 GeometryPickingID;          // Offset:    0 Size:    16 [unused]
//   float4 GeometryUserData;           // Offset:   16 Size:    16 [unused]
//   float4 UVDecompression;            // Offset:   32 Size:    16 [unused]
//   
//   struct SMeshDecompression
//   {
//       
//       float positionMin;             // Offset:   48
//       float positionRange;           // Offset:   52
//       float meshLocalHeight;         // Offset:   56
//       float isBuildingFacadeInterior;// Offset:   60
//
//   } MeshDecompression;               // Offset:   48 Size:    16
//   float3 GeometryBBoxMax;            // Offset:   64 Size:    12 [unused]
//   float3 GeometryBBoxMin;            // Offset:   80 Size:    12 [unused]
//
// }
//
// cbuffer Skinning
// {
//
//   float4x3 BlendMatrices[511];       // Offset:    0 Size: 24528
//   float4x3 PrevBlendMatrices[511];   // Offset: 24528 Size: 24528 [unused]
//
// }
//
// cbuffer MaterialWD2Glass
// {
//
//   float4 MaterialPickingID;          // Offset:    0 Size:    16 [unused]
//   float4 BaseColorUVTiling;          // Offset:   16 Size:    16 [unused]
//   float4 SurfaceParametersUVTiling;  // Offset:   32 Size:    16 [unused]
//   float3 AbsorptionColor;            // Offset:   48 Size:    12 [unused]
//   float AbsorptionDistance;          // Offset:   60 Size:     4 [unused]
//   float3 AbsorptionColorPreset;      // Offset:   64 Size:    12 [unused]
//   float BaseColorAlpha;              // Offset:   76 Size:     4 [unused]
//   float3 BaseColor;                  // Offset:   80 Size:    12 [unused]
//   float DustIntensity;               // Offset:   92 Size:     4 [unused]
//   float3 DamageStateUVSlide;         // Offset:   96 Size:    12 [unused]
//   float MaskChannelUsageAlpha;       // Offset:  108 Size:     4 [unused]
//   float3 DustColor;                  // Offset:  112 Size:    12 [unused]
//   float MaskChannelUsageBlue;        // Offset:  124 Size:     4 [unused]
//   float3 MudColor;                   // Offset:  128 Size:    12 [unused]
//   float MaskChannelUsageGreen;       // Offset:  140 Size:     4 [unused]
//   float3 SurfaceAlbedo;              // Offset:  144 Size:    12 [unused]
//   float MaskChannelUsageRed;         // Offset:  156 Size:     4 [unused]
//   float2 AbsorptionDistanceTiling;   // Offset:  160 Size:     8 [unused]
//   float MaxFreePath;                 // Offset:  168 Size:     4 [unused]
//   float Metalness;                   // Offset:  172 Size:     4 [unused]
//   float2 AbsorptionTiling;           // Offset:  176 Size:     8 [unused]
//   float MudIntensity;                // Offset:  184 Size:     4 [unused]
//   float NormalMapIntensity;          // Offset:  188 Size:     4 [unused]
//   float2 NormalMapTiling;            // Offset:  192 Size:     8 [unused]
//   float Reflectance;                 // Offset:  200 Size:     4 [unused]
//   float ReflectanceDustAdjustment;   // Offset:  204 Size:     4 [unused]
//   float2 ThicknessTiling;            // Offset:  208 Size:     8 [unused]
//   float Roughness;                   // Offset:  216 Size:     4 [unused]
//   float RoughnessDustAdjustment;     // Offset:  220 Size:     4 [unused]
//   float Thickness;                   // Offset:  224 Size:     4 [unused]
//   int WetSurfaceTypeIndex;           // Offset:  228 Size:     4 [unused]
//   bool AbsorptionDistanceModulateByVAlpha;// Offset:  232 Size:     4
//   bool DamageStateEnabled;           // Offset:  236 Size:     4 [unused]
//   bool IsVehicule;                   // Offset:  240 Size:     4 [unused]
//
// }
//
// cbuffer SceneGraphicObjectInstancePart
// {
//
//   float4x3 WorldMatrix;              // Offset:    0 Size:    48
//
// }
//
// cbuffer CollisionRegionsModifier
// {
//
//   float4 RegionOffsets[3];           // Offset:    0 Size:    48
//   float4 RegionsDeform[4];           // Offset:   48 Size:    64
//   float4 RegionsScratches[4];        // Offset:  112 Size:    64 [unused]
//   float3 BoundingMax;                // Offset:  176 Size:    12
//   float3 BoundingMin;                // Offset:  192 Size:    12
//   uint3 RegionsCount;                // Offset:  208 Size:    12
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// Viewport                          cbuffer      NA          NA    0        1
// SceneGeometry                     cbuffer      NA          NA    1        1
// Skinning                          cbuffer      NA          NA    2        1
// MaterialWD2Glass                  cbuffer      NA          NA    3        1
// SceneGraphicObjectInstancePart    cbuffer      NA          NA    4        1
// CollisionRegionsModifier          cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// blendweight              0   xyzw        0     NONE     int   xyzw
// texcoord                 2   xyzw        1     NONE     int       
// normal                   0   xyzw        2     NONE   float       
// color                    1   xyzw        3     NONE   float   xyzw
// texcoord                 1   xyzw        4     NONE   float       
// texcoord                 0   xyzw        5     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   x           0     NONE   float   x   
// SV_Position              0   xyzw        1      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer cb0[175], immediateIndexed
dcl_constantbuffer cb1[4], immediateIndexed
dcl_constantbuffer cb2[1533], dynamicIndexed
dcl_constantbuffer cb3[15], immediateIndexed
dcl_constantbuffer cb4[3], immediateIndexed
dcl_constantbuffer cb5[14], dynamicIndexed
dcl_input v0.xyzw
dcl_input v3.xyzw
dcl_output o0.x
dcl_output_siv o1.xyzw, position
dcl_temps 7
itof r0.xyz, v0.xyzx
mad r0.xyz, r0.xyzx, cb1[3].yyyy, cb1[3].xxxx
add r1.xyz, v3.zyxz, l(-0.500000, -0.500000, -0.500000, 0.000000)
add r2.xyz, r0.xyzx, -cb5[12].xyzx
add r3.xyz, cb5[11].xyzx, -cb5[12].xyzx
div r2.xyz, r2.xyzx, r3.xyzx
ine r3.xyz, cb5[13].xyzx, l(1, 1, 1, 0)
if_nz r3.x
  ge r4.xyzw, r2.xxxx, cb5[0].xyzw
  and r4.xyzw, r4.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  dp4 r0.w, r4.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  ftou r0.w, r0.w
  if_nz r0.w
    iadd r1.w, r0.w, l(-1)
    dp4 r1.w, cb5[0].xyzw, icb[r1.w + 0].xyzw
  else 
    mov r1.w, l(0)
  endif 
  iadd r3.xw, cb5[13].xxxx, l(-1, 0, 0, -2)
  ult r2.w, r0.w, r3.x
  if_nz r2.w
    dp4 r2.w, cb5[0].xyzw, icb[r0.w + 0].xyzw
  else 
    mov r2.w, l(1.000000)
  endif 
  add r3.x, -r1.w, r2.x
  add r1.w, -r1.w, r2.w
  div r1.w, r3.x, r1.w
  mad r1.w, r1.w, l(2.000000), l(-1.000000)
  dp4 r2.w, cb5[0].xyzw, icb[r3.w + 0].xyzw
  add r2.w, r2.w, l(1.000000)
  mul r2.w, r2.w, l(0.500000)
  ge r2.w, r2.w, r2.x
  and r2.w, r2.w, l(0x3f800000)
  mul r1.w, r1.w, r2.w
  mul r2.w, cb5[0].x, l(0.500000)
  ge r2.x, r2.x, r2.w
  and r2.x, r2.x, l(0x3f800000)
  mul r4.x, r1.w, r2.x
else 
  mov r4.x, l(0)
  mov r0.w, l(0)
endif 
if_nz r3.y
  ge r5.xyzw, r2.yyyy, cb5[1].xyzw
  and r5.xyzw, r5.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  dp4 r1.w, r5.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  ftou r1.w, r1.w
  if_nz r1.w
    iadd r2.x, r1.w, l(-1)
    dp4 r2.x, cb5[1].xyzw, icb[r2.x + 0].xyzw
  else 
    mov r2.x, l(0)
  endif 
  iadd r3.xy, cb5[13].yyyy, l(-1, -2, 0, 0)
  ult r2.w, r1.w, r3.x
  if_nz r2.w
    dp4 r2.w, cb5[1].xyzw, icb[r1.w + 0].xyzw
  else 
    mov r2.w, l(1.000000)
  endif 
  add r3.x, -r2.x, r2.y
  add r2.x, -r2.x, r2.w
  div r2.x, r3.x, r2.x
  mad r2.x, r2.x, l(2.000000), l(-1.000000)
  dp4 r2.w, cb5[1].xyzw, icb[r3.y + 0].xyzw
  add r2.w, r2.w, l(1.000000)
  mul r2.w, r2.w, l(0.500000)
  ge r2.w, r2.w, r2.y
  and r2.w, r2.w, l(0x3f800000)
  mul r2.x, r2.w, r2.x
  mul r2.w, cb5[1].x, l(0.500000)
  ge r2.y, r2.y, r2.w
  and r2.y, r2.y, l(0x3f800000)
  mul r4.y, r2.y, r2.x
else 
  mov r4.y, l(0)
  mov r1.w, l(0)
endif 
imad r0.w, r1.w, cb5[13].x, r0.w
if_nz r3.z
  ge r3.xyzw, r2.zzzz, cb5[2].xyzw
  and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  dp4 r1.w, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  ftou r1.w, r1.w
  if_nz r1.w
    iadd r2.x, r1.w, l(-1)
    dp4 r2.x, cb5[2].xyzw, icb[r2.x + 0].xyzw
  else 
    mov r2.x, l(0)
  endif 
  iadd r2.yw, cb5[13].zzzz, l(0, -1, 0, -2)
  ult r2.y, r1.w, r2.y
  if_nz r2.y
    dp4 r2.y, cb5[2].xyzw, icb[r1.w + 0].xyzw
  else 
    mov r2.y, l(1.000000)
  endif 
  add r3.x, -r2.x, r2.z
  add r2.x, -r2.x, r2.y
  div r2.x, r3.x, r2.x
  mad r2.x, r2.x, l(2.000000), l(-1.000000)
  dp4 r2.y, cb5[2].xyzw, icb[r2.w + 0].xyzw
  add r2.y, r2.y, l(1.000000)
  mul r2.y, r2.y, l(0.500000)
  ge r2.y, r2.y, r2.z
  and r2.y, r2.y, l(0x3f800000)
  mul r2.x, r2.y, r2.x
  mul r2.y, cb5[2].x, l(0.500000)
  ge r2.y, r2.z, r2.y
  and r2.y, r2.y, l(0x3f800000)
  mul r4.z, r2.y, r2.x
else 
  mov r4.z, l(0)
  mov r1.w, l(0)
endif 
imul null, r1.w, r1.w, cb5[13].x
imad r0.w, r1.w, cb5[13].y, r0.w
lt r2.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r4.xyzx
lt r3.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
iadd r2.xyz, -r2.yxzy, r3.yxzy
imul null, r3.xy, r2.xzxx, cb5[13].xxxx
imad r2.w, r2.x, cb5[13].x, r2.y
mov r2.x, l(0)
mov r2.z, r3.x
iadd r2.xyzw, r0.wwww, r2.xyzw
imad r3.xyzw, r3.yyyy, cb5[13].yyyy, r2.xyzw
min r4.xyz, |r4.xyzx|, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
ushr r5.xyzw, r2.xyzw, l(2, 2, 2, 2)
and r2.xyzw, r2.xyzw, l(3, 3, 3, 3)
dp4 r6.x, cb5[r5.x + 3].xyzw, icb[r2.x + 0].xyzw
dp4 r6.y, cb5[r5.y + 3].xyzw, icb[r2.y + 0].xyzw
dp4 r6.z, cb5[r5.z + 3].xyzw, icb[r2.z + 0].xyzw
dp4 r6.w, cb5[r5.w + 3].xyzw, icb[r2.w + 0].xyzw
ushr r2.xyzw, r3.xyzw, l(2, 2, 2, 2)
and r3.xyzw, r3.xyzw, l(3, 3, 3, 3)
dp4 r5.x, cb5[r2.x + 3].xyzw, icb[r3.x + 0].xyzw
dp4 r5.y, cb5[r2.y + 3].xyzw, icb[r3.y + 0].xyzw
dp4 r5.z, cb5[r2.z + 3].xyzw, icb[r3.z + 0].xyzw
dp4 r5.w, cb5[r2.w + 3].xyzw, icb[r3.w + 0].xyzw
add r2.xyzw, -r6.xyzw, r5.xyzw
mad r2.xyzw, r4.zzzz, r2.xyzw, r6.xyzw
add r2.zw, -r2.xxxy, r2.zzzw
mad r2.xy, r4.yyyy, r2.zwzz, r2.xyxx
add r0.w, -r2.x, r2.y
mad_sat r0.w, r4.x, r0.w, r2.x
mul r1.xyz, r0.wwww, r1.xyzx
mad r0.xyz, r1.xyzx, l(0.650000, 0.650000, 0.650000, 0.000000), r0.xyzx
imul null, r1.x, v0.w, l(3)
mov r0.w, l(1.000000)
dp4 r2.x, r0.xyzw, cb2[r1.x + 0].xyzw
dp4 r2.y, r0.xyzw, cb2[r1.x + 1].xyzw
dp4 r2.z, r0.xyzw, cb2[r1.x + 2].xyzw
movc o0.x, cb3[14].z, v3.w, l(1.000000)
mov r2.w, l(1.000000)
dp4 r0.x, r2.xyzw, cb4[0].xyzw
dp4 r0.y, r2.xyzw, cb4[1].xyzw
dp4 r0.z, r2.xyzw, cb4[2].xyzw
add r0.xyz, r0.xyzx, -cb0[174].xyzx
mul r1.x, r0.x, cb0[58].x
mul r1.y, r0.x, cb0[59].x
mul r1.z, r0.x, cb0[60].x
mul r1.w, r0.x, cb0[61].x
mul r2.x, r0.y, cb0[58].y
mul r2.y, r0.y, cb0[59].y
mul r2.z, r0.y, cb0[60].y
mul r2.w, r0.y, cb0[61].y
mad r3.x, r0.z, cb0[58].z, cb0[58].w
mad r3.y, r0.z, cb0[59].z, cb0[59].w
mad r3.z, r0.z, cb0[60].z, cb0[60].w
mad r3.w, r0.z, cb0[61].z, cb0[61].w
add r0.xyzw, r2.xyzw, r3.xyzw
add o1.xyzw, r0.xyzw, r1.xyzw
ret 
// Approximately 175 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
