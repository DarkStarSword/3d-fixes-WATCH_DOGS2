// hlsltool.py --fix-wd2-unproject -i --only-autofixed --fxc /home/dss/fxc.exe a358d15cea8a70a8-ps_replace.txt
// ---- Created with 3Dmigoto v1.2.42 on Sun Dec 04 15:20:58 2016

cbuffer Global : register(b0)
{
  float4 EnvironmentLuminances : packoffset(c0);
  float4 FakeEarthShadowPlane : packoffset(c1);
  float4 GlobalLightsIntensity : packoffset(c2);
  float4 GlobalWeatherControl : packoffset(c3);
  float4 MaterialWetnessParams[22] : packoffset(c4);
  float4 WindGlobalTurbulence : packoffset(c26);
  float4 WindVelocityTextureCoverage : packoffset(c27);
  float4 WorldLoadingRingSizes[2] : packoffset(c28);

  struct
  {
    float debugValue0;
    float debugValue1;
    float debugValue2;
    float debugValue3;
  } DebugValues : packoffset(c30);

  float3 SunShadowDirection : packoffset(c31);
  float CrowdAnimationStartTime : packoffset(c31.w);
  float3 WindGlobalNoiseTextureChannelSel : packoffset(c32);
  float GlobalReflectionTextureBlendRatio : packoffset(c32.w);
  float3 WindGlobalNoiseTextureCoverage : packoffset(c33);
  float GlobalWaterLevel : packoffset(c33.w);

  struct
  {
    float time;
    float staticReflectionIntensity;
    float gameDeltaTime;
  } GlobalScalars : packoffset(c34);

  float RcpStaticReflectionExposureScale : packoffset(c34.w);
  float2 GlobalNoiseSampler2DSquareSize : packoffset(c35);
  float SandstormIntensity : packoffset(c35.z);
  float StaticReflectionIntensityDest : packoffset(c35.w);
  float2 WindNoiseDeltaVector : packoffset(c36);
  float TimeOfDay : packoffset(c36.z);
  float VertexAOIntensity : packoffset(c36.w);
  float2 WindVector : packoffset(c37);
}

cbuffer Viewport : register(b1)
{
  float4 CameraNearPlaneSize : packoffset(c0);
  float4x4 DepthTextureTransform : packoffset(c1);
  float4 FSMClipPlanes : packoffset(c5);
  float4 FacettedShadowCastParams : packoffset(c6);
  float4 FogValues0 : packoffset(c7);
  float4 FogValues1 : packoffset(c8);
  float4x4 InvProjectionMatrix : packoffset(c9);
  float4x4 InvProjectionMatrixDepth : packoffset(c13);
  float4x3 InvViewMatrix : packoffset(c17);
  float4x4 PreviousViewProjectionMatrix : packoffset(c20);
  float4x4 ProjectionMatrix : packoffset(c24);
  float4 RainOcclusionFadeParams : packoffset(c28);
  float4x4 RainOcclusionProjectionMatrix : packoffset(c29);
  float4 RainOcclusionShadowMapSize : packoffset(c33);
  float4 ReflectionVolumeDebugColors[15] : packoffset(c34);
  float4 VPosOffset : packoffset(c49);
  float4 VPosScale : packoffset(c50);
  float4x3 ViewMatrix : packoffset(c51);
  float4x4 ViewProjectionMatrix : packoffset(c54);
  float4x4 ViewRotProjectionMatrix : packoffset(c58);
  float4x4 ViewRotProjectionMatrixPure : packoffset(c62);
  float4 ViewportSize : packoffset(c66);

  struct
  {
    float near;
    float far;
    float view;
    float oneOverView;
  } CameraDistances : packoffset(c67);


  struct
  {
    float4x4 inverseTransform;
    float3 rcpFadeRangePositive;
    float textureArrayIndexAsFloat;
    float3 rcpFadeRangeNegative;
    float fadeFactor;
    float2 multipliers;
    uint parallaxCorrection;
    float padding0;
  } ReflectionVolumes[15] : packoffset(c68);

  float3 CameraDirection : packoffset(c173);
  float DefaultReflectionTextureArrayIndexAsFloat : packoffset(c173.w);
  float3 CameraPosition : packoffset(c174);
  float DynamicCubeMapReflectionTextureMaxMipIndex : packoffset(c174.w);
  float3 CullingCameraPosition : packoffset(c175);
  float ExposedWhitePointOverExposureScale : packoffset(c175.w);
  float3 FogColorVector : packoffset(c176);
  float ExposureScale : packoffset(c176.w);
  float3 OppositeFogColorDelta : packoffset(c177);
  float MaxParaboloidReflectionMipIndex : packoffset(c177.w);
  float3 SideFogColor : packoffset(c178);
  float MaxStaticReflectionMipIndex : packoffset(c178.w);
  float3 SunFogColorDelta : packoffset(c179);
  float MeasuredExposureScale : packoffset(c179.w);
  float3 TemporalFilteringParams : packoffset(c180);
  float RaindropRippleScale : packoffset(c180.w);
  float3 UncompressDepthWeights : packoffset(c181);
  float ReflectionScaleDistanceMul : packoffset(c181.w);
  float3 UncompressDepthWeightsWS : packoffset(c182);
  float ReflectionScaleStrength : packoffset(c182.w);
  float3 ViewPoint : packoffset(c183);
  float SkyParaboloidTextureMaxMipIndex : packoffset(c183.w);
  float2 DefaultReflectionMultipliers : packoffset(c184);
  bool UseOnlySkyReflection : packoffset(c184.z);
  float2 ReflectionGIControl : packoffset(c185);
  uint2 SelectedPixel : packoffset(c185.z);
}

cbuffer SkyBuffer : register(b2)
{

  struct
  {
    float4 m_lightIrradiance;
    float4 m_lightIrradianceWithoutCloudsCoverage;
    float4 m_lightDirection;
    float4 m_cloudLightVector;
    float4 m_cloudIrradiance;
    float4 m_environmentIrradianceSHRed;
    float4 m_environmentIrradianceSHGreen;
    float4 m_environmentIrradianceSHBlue;
    float4 m_environmentIrradianceAverage;
    float4 m_giDefaultProbeIrradiance[3];
    float4 m_giDefaultProbeTint[3];
    float4 m_giDirectEnvironmentIrradiance[3];
    float4 m_giBouncedEnvironmentIrradiance[4];
    float4 m_cloudAndSkyIrradianceSH[9];
    float4 m_skyOnlyIrradianceSH[9];
  } SkyLightStruct : packoffset(c0);

}

cbuffer LightData : register(b3)
{

  struct
  {
    float4x4 CascadedShadowProjections[4];
    float4 CascadedShadowSliceFadeParams;
    float4 CascadedBlurKernelMinSizes;
    float4 CascadedBlurKernelMaxSizes;
    float4 LightCapsuleDivLength;
    float4 LightFadingClipPlanes[8];
    float4 LightIESParams;
    float4 LightProjectedVideoUnpack[8];
    float4 LightShadowFactor;
    float4 LightShadowMapSize;
    float4x4 LightSpotShadowProjections;
    float4x4 LightVolumeTransform;
    float3 LightCapsuleMulLength;
    float3 LightDirection;
    float3 LightColor;
    float3 LightPivotPosition;
    float3 LightPosition;
    float2 LightCapsuleParams;
    float2 LightSpotConeFactors;
    float4 LightAttenuation;
    float2 LightSpotShadowAngleFactors;
    float LightSpotNearClipFactor;
    float CascadedShadowGrazingAngleScale;
  } LightDatas : packoffset(c0);

}

cbuffer SceneProceduralShadowCaster : register(b4)
{
  float4 ProceduralShadowFactors[2] : packoffset(c0);
  float4 ProceduralShadowFactors2[2] : packoffset(c2);
  float4 ProceduralShadowOrigin[2] : packoffset(c4);
  float4 ProceduralShadowPlane[2] : packoffset(c6);
}

SamplerState Global__PreIntegratedSkinDiffuseTexture__SampObj___s : register(s0);
Texture2D<float4> Global__PreIntegratedSkinDiffuseTexture__TexObj__ : register(t0);
Texture2D<float4> Viewport__DepthVPSampler__TexObj__ : register(t1);
Texture2D<float2> DeferredLightingBase__SunShadowMaskTexture : register(t2);
Texture2D<float4> DeferredLightingBase__ProbeLightingTexture : register(t3);
Texture2D<float4> DeferredLightingCommon__AlbedoTexture__TexObj__ : register(t4);
Texture2D<float4> DeferredLightingCommon__NormalTexture__TexObj__ : register(t5);
Texture2D<float4> DeferredLightingCommon__OtherTexture__TexObj__ : register(t6);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21;
  uint4 bitmask, uiDest;
  float4 fDest;

// WATCH_DOGS2 light fix inserted by DarkStarSword's hlsltool.py:
// hlsltool.py --fix-wd2-unproject -i --only-autofixed --fxc /home/dss/fxc.exe a358d15cea8a70a8-ps_replace.txt

  r0.xy = v0.xy * VPosScale.zw + VPosOffset.zw;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0,0);
  r0.z = Viewport__DepthVPSampler__TexObj__.Load(r1.xyw).x;
  r0.w = 1;
  r2.x = dot(r0.zw, InvProjectionMatrix._m22_m32);
  r0.z = dot(r0.zw, InvProjectionMatrix._m23_m33);
  r0.z = -r2.x / r0.z;
  r2.z = -r0.z;
  r2.xy = r2.zz * r0.xy;

// Fix lights, note depth is negative (or could have used r0.z):
float4 s = StereoParams.Load(0);
r2.x -= s.x * (-r2.z - s.y) * InvProjectionMatrix._m00;

  r2.w = 1;
  r0.x = dot(r2.xyzw, InvViewMatrix._m00_m10_m20_m30);
  r0.y = dot(r2.xyzw, InvViewMatrix._m01_m11_m21_m31);
  r0.z = dot(r2.xyzw, InvViewMatrix._m02_m12_m22_m32);
  r2.xyzw = DeferredLightingCommon__AlbedoTexture__TexObj__.Load(r1.xyw).xyzw;
  r3.xyzw = DeferredLightingCommon__NormalTexture__TexObj__.Load(r1.xyw).xyzw;
  r4.xyzw = DeferredLightingCommon__OtherTexture__TexObj__.Load(r1.xyw).xyzw;
  r4.w = r4.w * 255 + 0.5;
  r4.w = floor(r4.w);
  r4.w = (uint)r4.w;
  r4.w = (uint)r4.w >> 5;
  r5.x = dot(r3.xyz, r3.xyz);
  r5.x = rsqrt(r5.x);
  r5.xyz = r5.xxx * r3.xyz;
  r6.xyzw = cmp((int4)r4.wwww == int4(1,4,2,0));
  r5.w = cmp(r2.w >= 0.75);
  r7.x = -0.75 + r2.w;
  r7.x = r7.x * -0.599999905 + 1;
  r5.w = r5.w ? r7.x : 1;
  r5.w = r6.y ? r5.w : r2.w;
  r5.w = r6.x ? 1 : r5.w;
  r7.xyz = CameraPosition.xyz + -r0.xyz;
  r7.w = dot(r7.xyz, r7.xyz);
  r7.w = rsqrt(r7.w);
  r8.xyz = r7.xyz * r7.www;
  r9.yzw = r5.www * r2.xyz;
  if (r6.x != 0) {
    r2.x = r3.w * 0.5 + 0.5;
    r2.x = r2.x * 65535 + 0.5;
    r2.x = (uint)r2.x;
    r2.xy = (int2)r2.xx & int2(255,0);
    r2.xy = (uint2)r2.xy;
    r10.xz = float2(0.00392156886,1.53186284e-005) * r2.xy;
    r2.x = 255 * r2.w;
    r2.x = (uint)r2.x;
    r2.xy = (int2)r2.xx & int2(15,240);
    r2.xy = (uint2)r2.xy;
    r10.yw = float2(0.00416666688,0.0666666701) * r2.yx;
    r11.w = 0;
    r2.x = r4.z;
    r9.x = r9.y;
  } else {
    r2.z = r4.y * r4.y;
    r4.y = max(0.00100000005, r2.z);
    r2.z = cmp((int)r4.w == 2);
    if (r2.z != 0) {
      r2.z = r3.w * 0.5 + 0.5;
      r2.z = r2.z * 65535 + 0.5;
      r2.z = (uint)r2.z;
      r12.xy = (int2)r2.zz & int2(255,0);
      r12.xy = (uint2)r12.xy;
      r12.z = r4.x;
      r12.xyz = r12.xyz * float3(0.00784313772,3.06372567e-005,2) + float3(-1,-1,-1);
      r2.z = 1 + -r2.w;
      r2.z = r9.y * r2.z;
      r9.x = r2.z * 0.5 + r9.y;
      r2.z = dot(r12.xyz, r12.xyz);
      r2.z = rsqrt(r2.z);
      r10.xzw = r12.xyz * r2.zzz;
      r10.y = 0;
      r11.w = 0;
      r4.x = 0.5;
      r2.x = r4.z;
    } else {
      r2.z = cmp((int)r4.w == 3);
      if (r2.z != 0) {
        r2.z = r3.w * 0.5 + 0.5;
        r2.z = r2.z * 65535 + 0.5;
        r2.z = (uint)r2.z;
        r12.xyzw = (int4)r2.zzzz & int4(0,2016,31,31);
        r12.xyzw = (uint4)r12.xyzw;
        r13.xyz = cmp(float3(1.25395,81.5471954,2568.0896) >= r12.wyx);
        r2.z = 0.00249675405 * r12.w;
        r14.xyz = r12.zyx * float3(0.0322580636,0.000496031775,1.57510076e-005) + float3(0.0549999997,0.0549999997,0.0549999997);
        r14.xyz = float3(0.947867334,0.947867334,0.947867334) * r14.xyz;
        r14.xyz = log2(r14.xyz);
        r14.xyz = float3(2.4000001,2.4000001,2.4000001) * r14.xyz;
        r14.xyz = exp2(r14.xyz);
        r10.x = r13.x ? r2.z : r14.x;
        r12.xy = float2(3.83925508e-005,1.21911819e-006) * r12.yx;
        r10.zw = r13.yz ? r12.xy : r14.yz;
        r10.y = 0;
        r11.w = 0;
        r2.x = r4.z;
      } else {
        if (r6.y != 0) {
          r2.z = r3.w * 32767 + 32767;
          r2.z = (uint)r2.z;
          r5.w = (int)r2.z & 255;
          r5.w = (uint)r5.w;
          r5.w = 0.0123199718 * r5.w;
          if (8 == 0) r2.z = 0; else if (8+8 < 32) {           r2.z = (uint)r2.z << (32-(8 + 8)); r2.z = (uint)r2.z >> (32-8);          } else r2.z = (uint)r2.z >> 8;
          r2.z = (uint)r2.z;
          r2.z = r2.z * 0.0246399436 + -3.14159274;
          sincos(r5.w, r12.x, r13.x);
          sincos(r2.z, r14.x, r15.x);
          r15.x = r15.x * r12.x;
          r15.y = r14.x * r12.x;
          r15.z = r13.x;
          r2.z = dot(r15.xyz, r15.xyz);
          r2.z = rsqrt(r2.z);
          r10.xzw = r15.xyz * r2.zzz;
          r11.w = saturate(0.25 * r2.w);
          r10.y = 0;
          r2.x = r4.z;
        } else {
          r2.z = cmp((int)r4.w == 5);
          r5.w = cmp(r3.z < 0.899999976);
          r12.xyz = r5.www ? float3(0,1,0) : float3(1,0,0);
          r13.xyz = r12.xyz * r3.zxy;
          r12.xyz = r3.yzx * r12.yzx + -r13.xyz;
          r5.w = dot(r12.xyz, r12.xyz);
          r5.w = rsqrt(r5.w);
          r12.xyz = r12.xyz * r5.www;
          r13.xyz = r12.yzx * r3.zxy;
          r3.xyz = r3.yzx * r12.zxy + -r13.xyz;
          r5.w = dot(r3.xyz, r3.xyz);
          r5.w = rsqrt(r5.w);
          r3.xyz = r5.www * r3.xyz;
          r5.w = r3.w * 2 + -1;
          r5.w = 3.14159274 * r5.w;
          sincos(r5.w, r13.x, r14.x);
          r12.xyz = r13.xxx * r12.xyz;
          r12.xyz = r3.xyz * r14.xxx + r12.xyz;
          r3.x = r3.w * 0.5 + 0.5;
          r3.x = r3.x * 65535 + 0.5;
          r3.x = (uint)r3.x;
          r3.x = (int)r3.x & 255;
          r3.x = (uint)r3.x;
          r3.x = 0.00392156886 * r3.x;
          r3.x = r4.w ? 0 : r3.x;
          r12.w = r4.z;
          r3.yzw = float3(0,0,0);
          r10.xyzw = r2.zzzz ? r12.xwyz : r3.xwyz;
          r12.x = r2.w;
          r12.yz = float2(0,0);
          r2.xy = r2.zz ? r12.yx : r12.wz;
          r11.w = r2.y;
        }
      }
      r9.x = r9.y;
    }
  }
  r2.yzw = DeferredLightingBase__ProbeLightingTexture.Load(r1.xyw).xyz;
  r3.xyz = r2.yzw / ExposureScale;
  r1.x = DeferredLightingBase__SunShadowMaskTexture.Load(r1.xyz).x;
  r1.y = (int)r6.z | (int)r6.y;
  if (r1.y != 0) {
    r1.y = dot(ProceduralShadowPlane[0].xyz, SunShadowDirection.xyz);
    r1.z = saturate(r1.y * ProceduralShadowFactors2[0].x + ProceduralShadowFactors2[0].y);
    r0.w = 1;
    r1.w = dot(ProceduralShadowPlane[0].xyzw, r0.xyzw);
    r2.y = saturate(1 + r1.y);
    r1.w = -r2.y * ProceduralShadowFactors2[0].z + r1.w;
    r1.y = -r1.w / r1.y;
    r2.yzw = SunShadowDirection.xyz * r1.yyy + r0.xyz;
    r12.xyz = ProceduralShadowOrigin[0].xyz + -r0.xyz;
    r2.yzw = ProceduralShadowOrigin[0].xyz + -r2.yzw;
    r12.x = dot(r12.xyz, r12.xyz);
    r12.y = dot(r2.yzw, r2.yzw);
    r2.yz = saturate(r12.xy * ProceduralShadowFactors[0].xz + ProceduralShadowFactors[0].yw);
    r1.y = cmp(0 < r1.y);
    r1.y = r1.y ? r2.y : r2.z;
    r1.y = r1.y + r1.z;
    r1.y = saturate(ProceduralShadowFactors2[0].w + r1.y);
    r1.z = dot(ProceduralShadowPlane[1].xyz, SunShadowDirection.xyz);
    r1.w = saturate(r1.z * ProceduralShadowFactors2[1].x + ProceduralShadowFactors2[1].y);
    r0.w = dot(ProceduralShadowPlane[1].xyzw, r0.xyzw);
    r2.y = saturate(1 + r1.z);
    r0.w = -r2.y * ProceduralShadowFactors2[1].z + r0.w;
    r0.w = -r0.w / r1.z;
    r2.yzw = SunShadowDirection.xyz * r0.www + r0.xyz;
    r12.xyz = ProceduralShadowOrigin[1].xyz + -r0.xyz;
    r2.yzw = ProceduralShadowOrigin[1].xyz + -r2.yzw;
    r12.x = dot(r12.xyz, r12.xyz);
    r12.y = dot(r2.yzw, r2.yzw);
    r2.yz = saturate(r12.xy * ProceduralShadowFactors[1].xz + ProceduralShadowFactors[1].yw);
    r0.w = cmp(0 < r0.w);
    r0.w = r0.w ? r2.y : r2.z;
    r0.w = r0.w + r1.w;
    r0.w = saturate(ProceduralShadowFactors2[1].w + r0.w);
    r0.w = r1.y * r0.w;
    r1.x = r1.x * r0.w;
  }
  r0.x = dot(r0.xyz, FakeEarthShadowPlane.xyz);
  r0.x = saturate(FakeEarthShadowPlane.w + r0.x);
  r0.x = r1.x * r0.x;
  r0.x = r0.x * LightDatas.LightShadowFactor.x + LightDatas.LightShadowFactor.y;
  r0.y = cmp(0 < r0.x);
  r0.z = cmp(0 < r10.x);
  r0.z = r0.z ? r6.w : 0;
  r0.y = (int)r0.z | (int)r0.y;
  if (r0.y != 0) {
    r1.w = dot(SkyLightStruct.m_lightIrradiance.xyz, float3(0.212639004,0.715168655,0.0721923187));
    r0.y = dot(r5.xyz, SkyLightStruct.m_lightDirection.xyz);
    r0.z = saturate(r0.y);
    r0.w = dot(r10.xzw, r10.xzw);
    r0.w = rsqrt(r0.w);
    r2.yzw = r10.xzw * r0.www;
    r0.w = dot(r2.yzw, SkyLightStruct.m_lightDirection.xyz);
    r0.w = 1 + r0.w;
    r0.w = saturate(0.5 * r0.w);
    r2.y = r0.w * r0.w;
    r0.w = r2.y * r0.w;
    r2.yzw = r6.zzz ? r10.xzw : r5.xyz;
    r0.w = r6.z ? r0.w : r0.z;
    if (r6.x != 0) {
      r12.xyzw = saturate(r10.xyzw);
      r4.z = saturate(r2.x);
      r13.xyz = log2(r9.xzw);
      r14.xyz = r13.xyz * r12.yyy;
      r14.xyz = float3(-12.7799997,-12.7799997,-12.7799997) * r14.xyz;
      r13.xyz = r13.xyz * float3(-0.0199999996,-0.0199999996,-0.0199999996) + r14.xyz;
      r5.w = cmp(r12.x == 0.000000);
      r6.w = 1 + -r4.z;
      r14.xyz = r9.xzw * r6.www;
      r14.xyz = float3(0.318309873,0.318309873,0.318309873) * r14.xyz;
      r15.xyz = r13.xyz * -r12.xxx;
      r15.xyz = exp2(r15.xyz);
      r15.xyz = r15.xyz * r14.xyz;
      r15.xyz = float3(0.444444448,0.444444448,0.444444448) * r15.xyz;
      r14.xyz = r5.www ? r14.xyz : r15.xyz;
      r14.w = 0.180000007;
      r6.w = 0.0799999982 * r12.w;
      r8.w = r12.x * 48.75 + 1.25;
      r9.y = saturate(r4.y);
      r9.y = r9.y * r9.y;
      r9.y = max(0.00100000005, r9.y);
      r12.x = r12.z * r12.z;
      r12.x = max(0.00100000005, r12.x);
      r12.y = cmp(0 < r0.y);
      r12.z = cmp(r0.y < 0);
      r12.y = (int)-r12.y + (int)r12.z;
      r12.y = (int)r12.y;
      r12.z = r0.y * r0.y + -1;
      r12.z = r12.z * 0.666860044 + 1;
      r12.z = sqrt(r12.z);
      r12.y = r12.y * r12.z;
      r0.y = r0.y * 0.666860044 + -r12.y;
      r15.xyz = float3(0.666860044,0.666860044,0.666860044) * SkyLightStruct.m_lightDirection.xyz;
      r15.xyz = r0.yyy * r5.xyz + -r15.xyz;
      r16.xyz = -SkyLightStruct.m_lightDirection.xyz + -r15.xyz;
      r15.xyz = r9.yyy * r16.xyz + r15.xyz;
      r0.y = dot(r15.xyz, r15.xyz);
      r0.y = rsqrt(r0.y);
      r16.xyz = r15.xyz * r0.yyy;
      r12.y = dot(r8.xyz, r5.xyz);
      r12.z = cmp(0 < r12.y);
      r13.w = cmp(r12.y < 0);
      r12.z = (int)-r12.z + (int)r13.w;
      r12.z = (int)r12.z;
      r13.w = r12.y * r12.y + -1;
      r13.w = r13.w * 0.666860044 + 1;
      r13.w = sqrt(r13.w);
      r12.z = r13.w * r12.z;
      r12.z = r12.y * 0.666860044 + -r12.z;
      r17.xyz = float3(0.666860044,0.666860044,0.666860044) * r8.xyz;
      r17.xyz = r12.zzz * r5.xyz + -r17.xyz;
      r18.xyz = -r7.xyz * r7.www + -r17.xyz;
      r17.xyz = r9.yyy * r18.xyz + r17.xyz;
      r12.z = dot(r17.xyz, r17.xyz);
      r12.z = rsqrt(r12.z);
      r17.xyz = r17.xyz * r12.zzz;
      r12.z = dot(r5.xyz, r16.xyz);
      r12.z = -abs(r12.z) * abs(r12.z) + 1;
      r12.z = -r12.z * 0.444702327 + 1;
      r8.w = r8.w + r8.w;
      r12.z = sqrt(r12.z);
      r8.w = r8.w / r12.z;
      r12.y = saturate(r12.y);
      r18.xyz = r7.xyz * r7.www + SkyLightStruct.m_lightDirection.xyz;
      r12.z = dot(r18.xyz, r18.xyz);
      r12.z = rsqrt(r12.z);
      r18.xyz = r18.xyz * r12.zzz;
      r12.z = saturate(dot(r5.xyz, r18.xyz));
      r13.w = r9.y * r9.y;
      r12.z = r12.z * r12.z;
      r15.w = r9.y * r9.y + -1;
      r12.z = r12.z * r15.w + 1;
      r12.z = r12.z * r12.z;
      r12.z = 3.14159274 * r12.z;
      r12.z = r13.w / r12.z;
      r9.y = r9.y * 0.5 + 0.5;
      r13.w = r0.z * r0.z;
      r9.y = r9.y * r9.y;
      r15.w = -r0.z * r0.z + 1;
      r15.w = r15.w * r9.y;
      r13.w = max(1.00000005e-034, r13.w);
      r13.w = r15.w / r13.w;
      r13.w = 1 + r13.w;
      r13.w = sqrt(r13.w);
      r13.w = 1 + r13.w;
      r13.w = 2 / r13.w;
      r15.w = r12.y * r12.y;
      r12.y = -r12.y * r12.y + 1;
      r9.y = r12.y * r9.y;
      r12.y = max(1.00000005e-034, r15.w);
      r9.y = r9.y / r12.y;
      r9.y = 1 + r9.y;
      r9.y = sqrt(r9.y);
      r9.y = 1 + r9.y;
      r9.y = 2 / r9.y;
      r9.y = r13.w * r9.y;
      r18.xyz = r0.zzz * r0.zzz + float3(1.24869561,1.24878526,1.24869561);
      r18.xyz = sqrt(r18.xyz);
      r19.xyz = r18.zyz + -r0.zzz;
      r18.xyz = r18.xyz + r0.zzz;
      r20.xyz = r19.zyz * r19.zyz;
      r21.xyz = r18.zyz * r18.zyz;
      r21.xyz = r21.xyz + r21.xyz;
      r20.xyz = r20.xyz / r21.xyz;
      r18.xyz = r0.zzz * r18.xyz + float3(-1,-1,-1);
      r19.xyz = r0.zzz * r19.xyz + float3(1,1,1);
      r18.xyz = r18.xyz / r19.xyz;
      r18.xyz = r18.xyz * r18.xyz + float3(1,1,1);
      r18.xyz = r20.xyz * r18.xyz;
      r9.y = r12.z * r9.y;
      r18.xyz = r9.yyy * r18.xyz;
      r12.yzw = -r12.www * float3(0.0799999982,0.0799999982,0.0799999982) + r9.xzw;
      r12.yzw = r4.zzz * r12.yzw + r6.www;
      r4.z = saturate(dot(r5.xyz, -r17.xyz));
      r15.xyz = -r15.xyz * r0.yyy + -r17.xyz;
      r0.y = dot(r15.xyz, r15.xyz);
      r0.y = rsqrt(r0.y);
      r15.xyz = r15.xyz * r0.yyy;
      r0.y = dot(r15.xyz, -r16.xyz);
      r6.w = saturate(dot(r5.xyz, -r16.xyz));
      r9.y = saturate(dot(r5.xyz, r15.xyz));
      r13.w = r12.x * r12.x;
      r9.y = r9.y * r9.y;
      r15.x = r12.x * r12.x + -1;
      r9.y = r9.y * r15.x + 1;
      r9.y = r9.y * r9.y;
      r9.y = 3.14159274 * r9.y;
      r9.y = r13.w / r9.y;
      r12.x = r12.x * 0.5 + 0.5;
      r13.w = r6.w * r6.w;
      r12.x = r12.x * r12.x;
      r6.w = -r6.w * r6.w + 1;
      r6.w = r12.x * r6.w;
      r13.w = max(1.00000005e-034, r13.w);
      r6.w = r6.w / r13.w;
      r6.w = 1 + r6.w;
      r6.w = sqrt(r6.w);
      r6.w = 1 + r6.w;
      r6.w = 2 / r6.w;
      r13.w = r4.z * r4.z;
      r4.z = -r4.z * r4.z + 1;
      r4.z = r12.x * r4.z;
      r12.x = max(1.00000005e-034, r13.w);
      r4.z = r4.z / r12.x;
      r4.z = 1 + r4.z;
      r4.z = sqrt(r4.z);
      r4.z = 1 + r4.z;
      r4.z = 2 / r4.z;
      r4.z = r6.w * r4.z;
      r6.w = dot(r12.yzw, float3(0.333333343,0.333333343,0.333333343));
      r6.w = saturate(50 * r6.w);
      r0.y = 1 + -r0.y;
      r12.x = r0.y * r0.y;
      r12.x = r12.x * r12.x;
      r15.xyz = r6.www + -r12.yzw;
      r15.xyz = r15.xyz * r12.xxx;
      r12.xyz = r15.xyz * r0.yyy + r12.yzw;
      r0.y = r9.y * r4.z;
      r12.xyz = r0.yyy * r12.xyz;
      r13.xyz = -r13.xyz * r8.www;
      r13.xyz = exp2(r13.xyz);
      r13.xyz = r12.xyz * r13.xyz + r18.xyz;
      r12.xyz = r5.www ? r12.xyz : r13.xyz;
      r12.w = dot(r12.xyz, float3(0.212639004,0.715168655,0.0721923187));
      r13.xyzw = float4(0,0,0,0);
    } else {
      if (r6.z != 0) {
        r15.xyz = float3(0.318309873,0.318309873,0.318309873) * r9.xzw;
        r15.w = 0.0572957806;
        r0.y = 1 + -r2.x;
        r14.xyzw = r15.xyzw * r0.yyyy;
      } else {
        r0.y = cmp((int)r4.w == 3);
        if (r0.y != 0) {
          r15.xyz = r7.xyz * r7.www + SkyLightStruct.m_lightDirection.xyz;
          r0.y = dot(r15.xyz, r15.xyz);
          r0.y = rsqrt(r0.y);
          r15.xyz = r15.xyz * r0.yyy;
          r0.y = saturate(dot(r15.xyz, r8.xyz));
          r4.z = 0.0799999982 * r4.x;
          r0.y = 1 + -r0.y;
          r5.w = r0.y * r0.y;
          r5.w = r5.w * r5.w;
          r6.w = -r4.x * 0.0799999982 + 1;
          r5.w = r6.w * r5.w;
          r0.y = r5.w * r0.y + r4.z;
          r4.z = saturate(r4.y + r4.y);
          r15.w = r4.z * -r0.y + 1;
          r15.xyz = r15.www * r9.xzw;
          r14.xyzw = float4(0.318309873,0.318309873,0.318309873,0.0572957806) * r15.xyzw;
        } else {
          if (r6.y != 0) {
            r15.xyz = r2.yzw + -r10.xzw;
            r16.xyz = r15.xyz * float3(0.100000001,0.100000001,0.100000001) + r10.xzw;
            r0.y = dot(r16.xyz, r16.xyz);
            r0.y = rsqrt(r0.y);
            r16.xyz = r16.xyz * r0.yyy;
            r15.xyz = r15.xyz * float3(0.300000012,0.300000012,0.300000012) + r10.xzw;
            r0.y = dot(r15.xyz, r15.xyz);
            r0.y = rsqrt(r0.y);
            r15.xyz = r15.xyz * r0.yyy;
            r0.y = dot(r10.xzw, SkyLightStruct.m_lightDirection.xyz);
            r4.z = dot(r16.xyz, SkyLightStruct.m_lightDirection.xyz);
            r5.w = dot(r15.xyz, SkyLightStruct.m_lightDirection.xyz);
            r11.z = r0.y * 0.5 + 0.5;
            r15.xy = r11.zw * float2(0.984375,0.984375) + float2(0.0078125,0.0078125);
            r15.x = Global__PreIntegratedSkinDiffuseTexture__TexObj__.SampleLevel(Global__PreIntegratedSkinDiffuseTexture__SampObj___s, r15.xy, 0).x;
            r11.y = r4.z * 0.5 + 0.5;
            r11.yz = r11.yw * float2(0.984375,0.984375) + float2(0.0078125,0.0078125);
            r15.y = Global__PreIntegratedSkinDiffuseTexture__TexObj__.SampleLevel(Global__PreIntegratedSkinDiffuseTexture__SampObj___s, r11.yz, 0).y;
            r11.x = r5.w * 0.5 + 0.5;
            r11.xy = r11.xw * float2(0.984375,0.984375) + float2(0.0078125,0.0078125);
            r15.z = Global__PreIntegratedSkinDiffuseTexture__TexObj__.SampleLevel(Global__PreIntegratedSkinDiffuseTexture__SampObj___s, r11.xy, 0).z;
            r15.xyz = r15.xyz * r9.xzw;
            r15.w = 0.0572957806;
            r14.xyzw = float4(0.318309873,0.318309873,0.318309873,1) * r15.xyzw;
          } else {
            r0.y = cmp((int)r4.w == 5);
            r4.z = dot(r10.xzw, SkyLightStruct.m_lightDirection.xyz);
            r4.z = -r4.z * r4.z + 1;
            r4.z = sqrt(r4.z);
            r15.xyz = float3(0.318309873,0.318309873,0.318309873) * r9.xzw;
            r15.w = 0.0572957806;
            r5.w = 1 + -r2.x;
            r15.xyzw = r15.xyzw * r5.wwww;
            r16.xyzw = r15.xyzw * r4.zzzz;
            r16.xyzw = float4(0.5,0.5,0.5,0.5) * r16.xyzw;
            r4.z = 1 + -r10.y;
            r16.xyzw = r16.xyzw * r4.zzzz;
            r14.xyzw = r0.yyyy ? r16.xyzw : r15.xyzw;
          }
        }
      }
      if (r6.z != 0) {
        r0.y = 0.0799999982 * r4.x;
        r11.xyz = -r4.xxx * float3(0.0799999982,0.0799999982,0.0799999982) + r9.xzw;
        r11.xyz = r2.xxx * r11.xyz + r0.yyy;
        r0.y = saturate(dot(r5.xyz, r8.xyz));
        r15.xyz = r7.xyz * r7.www + SkyLightStruct.m_lightDirection.xyz;
        r4.z = dot(r15.xyz, r15.xyz);
        r4.z = rsqrt(r4.z);
        r15.xyz = r15.xyz * r4.zzz;
        r4.z = dot(r15.xyz, SkyLightStruct.m_lightDirection.xyz);
        r5.w = saturate(dot(r5.xyz, r15.xyz));
        r6.w = r4.y * r4.y;
        r5.w = r5.w * r5.w;
        r8.w = r4.y * r4.y + -1;
        r5.w = r5.w * r8.w + 1;
        r5.w = r5.w * r5.w;
        r5.w = 3.14159274 * r5.w;
        r5.w = r6.w / r5.w;
        r6.w = r4.y * 0.5 + 0.5;
        r8.w = r0.z * r0.z;
        r6.w = r6.w * r6.w;
        r9.y = -r0.z * r0.z + 1;
        r9.y = r9.y * r6.w;
        r8.w = max(1.00000005e-034, r8.w);
        r8.w = r9.y / r8.w;
        r8.w = 1 + r8.w;
        r8.w = sqrt(r8.w);
        r8.w = 1 + r8.w;
        r8.w = 2 / r8.w;
        r9.y = r0.y * r0.y;
        r0.y = -r0.y * r0.y + 1;
        r0.y = r6.w * r0.y;
        r6.w = max(1.00000005e-034, r9.y);
        r0.y = r0.y / r6.w;
        r0.y = 1 + r0.y;
        r0.y = sqrt(r0.y);
        r0.y = 1 + r0.y;
        r0.y = 2 / r0.y;
        r0.y = r8.w * r0.y;
        r6.w = dot(r11.xyz, float3(0.333333343,0.333333343,0.333333343));
        r6.w = saturate(50 * r6.w);
        r4.z = 1 + -r4.z;
        r8.w = r4.z * r4.z;
        r8.w = r8.w * r8.w;
        r15.xyz = r6.www + -r11.xyz;
        r15.xyz = r15.xyz * r8.www;
        r11.xyz = r15.xyz * r4.zzz + r11.xyz;
        r0.y = r5.w * r0.y;
        r12.xyz = r0.yyy * r11.xyz;
        r12.w = dot(r12.xyz, float3(0.212639004,0.715168655,0.0721923187));
      } else {
        r0.y = cmp((int)r4.w == 3);
        if (r0.y != 0) {
          r11.xyz = r7.xyz * r7.www + SkyLightStruct.m_lightDirection.xyz;
          r0.y = dot(r11.xyz, r11.xyz);
          r0.y = rsqrt(r0.y);
          r11.xyz = r11.xyz * r0.yyy;
          r0.y = saturate(dot(r11.xyz, r8.xyz));
          r4.z = 0.0799999982 * r4.x;
          r0.y = 1 + -r0.y;
          r5.w = r0.y * r0.y;
          r5.w = r5.w * r5.w;
          r6.w = -r4.x * 0.0799999982 + 1;
          r5.w = r6.w * r5.w;
          r0.y = r5.w * r0.y + r4.z;
          r4.z = saturate(dot(r5.xyz, r11.xyz));
          r5.w = r4.z * r4.z;
          r11.xy = -r4.zz * r4.zz + float2(1.00000095,1);
          r5.w = r5.w / r11.x;
          r6.w = r11.y * r11.y;
          r8.w = r4.y * r4.y;
          r11.xy = r4.yy * r4.yy + float2(9.99999997e-007,1.99999999e-006);
          r9.y = r11.x * 4 + 1;
          r9.y = 3.14159274 * r9.y;
          r9.y = 1 / r9.y;
          r5.w = -r5.w / r11.y;
          r5.w = 1.44269502 * r5.w;
          r5.w = exp2(r5.w);
          r5.w = 4 * r5.w;
          r5.w = r5.w / r6.w;
          r5.w = 1 + r5.w;
          r5.w = r9.y * r5.w;
          r6.w = saturate(dot(r5.xyz, r8.xyz));
          r9.y = r6.w + r0.z;
          r6.w = -r0.z * r6.w + r9.y;
          r6.w = 4 * r6.w;
          r6.w = 1 / r6.w;
          r6.w = saturate(r6.w);
          r8.w = 2 / r8.w;
          r8.w = -2 + r8.w;
          r8.w = max(1.00000003e-022, r8.w);
          r4.z = log2(r4.z);
          r4.z = r8.w * r4.z;
          r4.z = exp2(r4.z);
          r8.w = 8 + r8.w;
          r4.z = r8.w * r4.z;
          r4.z = 0.0397887342 * r4.z;
          r4.z = min(1, r4.z);
          r8.w = saturate(r4.y + r4.y);
          r5.w = r5.w * r6.w + -r4.z;
          r4.z = r8.w * r5.w + r4.z;
          r15.xyz = r4.zzz * r0.yyy;
          r15.w = dot(r15.zzz, float3(0.212639004,0.715168655,0.0721923187));
          r16.xyz = r10.xzw;
          r16.w = 1;
          r12.xyzw = r16.xyzw * r15.xyzw;
        } else {
          if (r6.y != 0) {
            r11.xy = float2(0.0799999982,0.400000006) * r4.xy;
            r15.xyz = -r4.xxx * float3(0.0799999982,0.0799999982,0.0799999982) + r9.xzw;
            r15.xyz = r2.xxx * r15.xyz + r11.xxx;
            r0.y = saturate(dot(r5.xyz, r8.xyz));
            r16.xyz = r7.xyz * r7.www + SkyLightStruct.m_lightDirection.xyz;
            r4.z = dot(r16.xyz, r16.xyz);
            r4.z = rsqrt(r4.z);
            r16.xyz = r16.xyz * r4.zzz;
            r4.z = dot(r16.xyz, SkyLightStruct.m_lightDirection.xyz);
            r5.w = saturate(dot(r5.xyz, r16.xyz));
            r6.w = r4.y * r4.y;
            r5.w = r5.w * r5.w;
            r8.w = r4.y * r4.y + -1;
            r8.w = r5.w * r8.w + 1;
            r8.w = r8.w * r8.w;
            r8.w = 3.14159274 * r8.w;
            r6.w = r6.w / r8.w;
            r11.xz = r4.yy * float2(0.5,0.200000003) + float2(0.5,0.5);
            r8.w = r0.z * r0.z;
            r11.xz = r11.xz * r11.xz;
            r9.y = -r0.z * r0.z + 1;
            r16.xy = r11.xz * r9.yy;
            r8.w = max(1.00000005e-034, r8.w);
            r16.xy = r16.xy / r8.ww;
            r16.xy = float2(1,1) + r16.xy;
            r16.xy = sqrt(r16.xy);
            r16.xy = float2(1,1) + r16.xy;
            r16.xy = float2(2,2) / r16.xy;
            r8.w = r0.y * r0.y;
            r0.y = -r0.y * r0.y + 1;
            r11.xz = r11.xz * r0.yy;
            r0.y = max(1.00000005e-034, r8.w);
            r11.xz = r11.xz / r0.yy;
            r11.xz = float2(1,1) + r11.xz;
            r11.xz = sqrt(r11.xz);
            r11.xz = float2(1,1) + r11.xz;
            r11.xz = float2(2,2) / r11.xz;
            r11.xz = r16.xy * r11.xz;
            r0.y = dot(r15.xyz, float3(0.333333343,0.333333343,0.333333343));
            r0.y = saturate(50 * r0.y);
            r4.z = 1 + -r4.z;
            r8.w = r4.z * r4.z;
            r8.w = r8.w * r8.w;
            r16.xyz = r0.yyy + -r15.xyz;
            r16.xyz = r16.xyz * r8.www;
            r15.xyz = r16.xyz * r4.zzz + r15.xyz;
            r0.y = r11.x * r6.w;
            r16.xyz = r0.yyy * r15.xyz;
            r16.w = dot(r16.xyz, float3(0.212639004,0.715168655,0.0721923187));
            r0.y = r11.y * r11.y;
            r4.z = r11.y * r11.y + -1;
            r4.z = r5.w * r4.z + 1;
            r4.z = r4.z * r4.z;
            r4.z = 3.14159274 * r4.z;
            r0.y = r0.y / r4.z;
            r0.y = r0.y * r11.z;
            r15.xyz = r0.yyy * r15.xyz;
            r15.w = dot(r15.xyz, float3(0.212639004,0.715168655,0.0721923187));
            r15.xyzw = float4(0.150000006,0.150000006,0.150000006,0.150000006) * r15.xyzw;
            r12.xyzw = r16.xyzw * float4(0.850000024,0.850000024,0.850000024,0.850000024) + r15.xyzw;
          } else {
            r0.y = cmp((int)r4.w == 5);
            r4.z = saturate(dot(r9.xzw, float3(0.212639004,0.715168655,0.0721923187)));
            r4.z = r4.z * 1.66666663 + 1.33333337;
            r11.xyz = r10.xzw * r4.yyy;
            r11.xyz = r11.xyz * float3(0.25,0.25,0.25) + r5.xyz;
            r4.z = 1 / r4.z;
            r5.w = dot(-SkyLightStruct.m_lightDirection.xyz, r11.xyz);
            r6.w = r4.z * r4.z;
            r8.w = -r5.w * r5.w + 1;
            r8.w = -r6.w * r8.w + 1;
            r9.y = sqrt(r8.w);
            r5.w = r4.z * r5.w + -r9.y;
            r15.xyz = r5.www * r11.xyz;
            r15.xyz = r4.zzz * SkyLightStruct.m_lightDirection.xyz + r15.xyz;
            r5.w = cmp(0 < r8.w);
            r5.w = r5.w ? 1.000000 : 0;
            r16.xyz = r15.xyz * r5.www;
            r8.w = dot(-r8.xyz, r11.xyz);
            r9.y = -r8.w * r8.w + 1;
            r6.w = -r6.w * r9.y + 1;
            r9.y = sqrt(r6.w);
            r8.w = r4.z * r8.w + -r9.y;
            r11.xyz = r8.www * r11.xyz;
            r11.xyz = r4.zzz * r8.xyz + r11.xyz;
            r4.z = cmp(0 < r6.w);
            r4.z = r4.z ? 1.000000 : 0;
            r11.xyz = r11.xyz * r4.zzz;
            r7.xyz = r7.xyz * r7.www + SkyLightStruct.m_lightDirection.xyz;
            r4.z = dot(r7.xyz, r7.xyz);
            r4.z = rsqrt(r4.z);
            r7.xyz = r7.xyz * r4.zzz;
            r4.z = saturate(dot(r5.xyz, r8.xyz));
            r6.w = saturate(dot(r5.xyz, r7.xyz));
            r7.w = dot(r7.xyz, SkyLightStruct.m_lightDirection.xyz);
            r8.w = saturate(r7.w);
            r9.y = dot(r7.xyz, r10.xzw);
            r17.xyz = r10.wxz * r5.yzx;
            r17.xyz = r10.zwx * r5.zxy + -r17.xyz;
            r15.w = dot(r17.xyz, r17.xyz);
            r15.w = rsqrt(r15.w);
            r17.xyz = r17.xyz * r15.www;
            r7.x = dot(r7.xyz, r17.xyz);
            r7.yz = float2(0.0799999982,3.14159274) * r4.xy;
            r18.xyz = -r4.xxx * float3(0.0799999982,0.0799999982,0.0799999982) + r9.xzw;
            r18.xyz = r2.xxx * r18.xyz + r7.yyy;
            r7.y = dot(r18.xyz, float3(0.333333343,0.333333343,0.333333343));
            r7.y = saturate(50 * r7.y);
            r8.w = 1 + -r8.w;
            r15.w = r8.w * r8.w;
            r15.w = r15.w * r15.w;
            r19.xyz = r7.yyy + -r18.xyz;
            r20.xyz = r19.xyz * r15.www;
            r20.xyz = r20.xyz * r8.www + r18.xyz;
            r7.y = r4.y * r4.y;
            r8.w = r6.w * r6.w;
            r9.y = r9.y * r9.y;
            r9.y = r9.y / r7.y;
            r7.x = r7.x * r7.x + r9.y;
            r6.w = r6.w * r6.w + r7.x;
            r6.w = r6.w * r6.w;
            r6.w = r6.w * r7.z;
            r6.w = 1 / r6.w;
            r7.x = r0.z * r0.z;
            r9.y = -r0.z * r0.z + 1;
            r15.w = r9.y * r7.y;
            r7.x = max(1.00000005e-034, r7.x);
            r15.w = r15.w / r7.x;
            r15.w = 1 + r15.w;
            r15.w = sqrt(r15.w);
            r15.w = 1 + r15.w;
            r15.w = 2 / r15.w;
            r16.w = r4.z * r4.z;
            r4.z = -r4.z * r4.z + 1;
            r17.w = r7.y * r4.z;
            r16.w = max(1.00000005e-034, r16.w);
            r17.w = r17.w / r16.w;
            r17.w = 1 + r17.w;
            r17.w = sqrt(r17.w);
            r17.w = 1 + r17.w;
            r17.w = 2 / r17.w;
            r15.w = r17.w * r15.w;
            r6.w = r15.w * r6.w;
            r20.xyz = saturate(r6.www * r20.xyz);
            r20.xyz = r20.xyz * r11.www;
            r21.xyz = float3(0.25,0.25,0.25) * r20.xyz;
            r15.xyz = -r15.xyz * r5.www + -r11.xyz;
            r5.w = dot(r15.xyz, r15.xyz);
            r5.w = rsqrt(r5.w);
            r15.xyz = r15.xyz * r5.www;
            r5.w = saturate(dot(r5.xyz, -r16.xyz));
            r6.w = saturate(dot(r5.xyz, -r11.xyz));
            r11.x = saturate(dot(r5.xyz, r15.xyz));
            r11.y = saturate(dot(r15.xyz, -r16.xyz));
            r11.z = dot(r15.xyz, r10.xzw);
            r11.w = dot(r15.xyz, r17.xyz);
            r11.y = 1 + -r11.y;
            r15.x = r11.y * r11.y;
            r15.x = r15.x * r15.x;
            r15.xyz = r19.xyz * r15.xxx;
            r15.xyz = r15.xyz * r11.yyy + r18.xyz;
            r11.y = r11.z * r11.z;
            r11.y = r11.y / r7.y;
            r11.y = r11.w * r11.w + r11.y;
            r11.x = r11.x * r11.x + r11.y;
            r11.x = r11.x * r11.x;
            r7.z = r11.x * r7.z;
            r7.z = 1 / r7.z;
            r11.x = r5.w * r5.w;
            r5.w = -r5.w * r5.w + 1;
            r5.w = r7.y * r5.w;
            r11.x = max(1.00000005e-034, r11.x);
            r5.w = r5.w / r11.x;
            r5.w = 1 + r5.w;
            r5.w = sqrt(r5.w);
            r5.w = 1 + r5.w;
            r5.w = 2 / r5.w;
            r11.x = r6.w * r6.w;
            r6.w = -r6.w * r6.w + 1;
            r6.w = r7.y * r6.w;
            r11.x = max(1.00000005e-034, r11.x);
            r6.w = r6.w / r11.x;
            r6.w = 1 + r6.w;
            r6.w = sqrt(r6.w);
            r6.w = 1 + r6.w;
            r6.w = 2 / r6.w;
            r5.w = r6.w * r5.w;
            r5.w = r7.z * r5.w;
            r11.xyz = saturate(r5.www * r15.xyz);
            r15.xyz = sqrt(r9.xzw);
            r11.xyz = -r20.xyz * float3(0.25,0.25,0.25) + r11.xyz;
            r11.xyz = r15.xyz * r11.xyz + r21.xyz;
            r11.w = dot(r11.xyz, float3(0.212639004,0.715168655,0.0721923187));
            r5.w = r4.y * r4.y + -1;
            r5.w = r8.w * r5.w + 1;
            r5.w = r5.w * r5.w;
            r5.w = 3.14159274 * r5.w;
            r5.w = r7.y / r5.w;
            r6.w = r4.y * 0.5 + 0.5;
            r6.w = r6.w * r6.w;
            r7.y = r6.w * r9.y;
            r7.x = r7.y / r7.x;
            r7.x = 1 + r7.x;
            r7.x = sqrt(r7.x);
            r7.x = 1 + r7.x;
            r7.x = 2 / r7.x;
            r4.z = r6.w * r4.z;
            r4.z = r4.z / r16.w;
            r4.z = 1 + r4.z;
            r4.z = sqrt(r4.z);
            r4.z = 1 + r4.z;
            r4.z = 2 / r4.z;
            r4.z = r7.x * r4.z;
            r6.w = 1 + -r7.w;
            r7.x = r6.w * r6.w;
            r7.x = r7.x * r7.x;
            r7.xyz = r19.xyz * r7.xxx;
            r7.xyz = r7.xyz * r6.www + r18.xyz;
            r4.z = r5.w * r4.z;
            r7.xyz = r4.zzz * r7.xyz;
            r7.w = dot(r7.xyz, float3(0.212639004,0.715168655,0.0721923187));
            r12.xyzw = r0.yyyy ? r11.xyzw : r7.xyzw;
          }
        }
      }
      if (r6.z != 0) {
        r13.xyzw = float4(0,0,0,0);
      } else {
        r0.y = cmp((int)r4.w == 3);
        if (r0.y != 0) {
          r13.xyzw = float4(0,0,0,0);
        } else {
          if (r6.y != 0) {
            r13.xyzw = float4(0,0,0,0);
          } else {
            r0.y = dot(r10.xzw, SkyLightStruct.m_lightDirection.xyz);
            r0.y = -r0.y * r0.y + 1;
            r0.y = sqrt(r0.y);
            r4.z = -1.5 * r10.y;
            r5.w = dot(r2.yzw, SkyLightStruct.m_lightDirection.xyz);
            r6.w = -r10.y * -1.5 + r5.w;
            r4.z = 1 / -r4.z;
            r4.z = saturate(r6.w * r4.z);
            r6.w = r4.z * -2 + 3;
            r4.z = r4.z * r4.z;
            r4.z = r6.w * r4.z;
            r7.xyz = float3(0.318309873,0.318309873,0.318309873) * r9.xzw;
            r7.w = 0.0572957806;
            r6.w = 1 + -r2.x;
            r7.xyzw = r7.xyzw * r6.wwww;
            r7.xyzw = r7.xyzw * r4.zzzz;
            r7.xyzw = r7.xyzw * r0.yyyy;
            r7.xyzw = r7.xyzw * r10.yyyy;
            r7.xyzw = float4(0.25,0.25,0.25,0.25) * r7.xyzw;
            r11.xy = cmp((int2)r4.ww == int2(5,8));
            r0.y = max(9.99999997e-007, abs(r5.w));
            r0.y = rcp(r0.y);
            r0.y = r5.w * r0.y;
            r2.y = dot(r2.yzw, r8.xyz);
            r2.z = max(9.99999997e-007, abs(r2.y));
            r2.z = rcp(r2.z);
            r2.y = r2.y * r2.z;
            r0.y = cmp(r0.y == r2.y);
            r15.w = r0.y ? 0 : 1;
            r2.yzw = r10.xzw * r6.www;
            r15.xyz = r2.yzw * r15.www;
            r15.xyzw = float4(0.318309873,0.318309873,0.318309873,0.180000007) * r15.xyzw;
            r16.xyz = r10.xxx * r9.xzw;
            r16.w = r10.x;
            r16.xyzw = float4(0.0795774683,0.0795774683,0.0795774683,0.0143239452) * r16.xyzw;
            r15.xyzw = r11.yyyy ? r15.xyzw : r16.xyzw;
            r13.xyzw = r11.xxxx ? r7.xyzw : r15.xyzw;
          }
        }
      }
    }
    r0.y = r6.y ? 1 : r0.w;
    r0.w = dot(r13.xyz, float3(0.212639004,0.715168655,0.0721923187));
    r2.y = r10.x * r0.x;
    r0.w = r0.w + -r0.y;
    r0.w = r2.y * r0.w + r0.y;
    r0.y = r4.w ? r0.y : r0.w;
    r7.xyzw = r12.xyzw * r0.zzzz;
    r7.xyzw = r14.xyzw * r0.yyyy + r7.xyzw;
    r7.xyzw = r7.xyzw + r13.xyzw;
    r0.xyzw = r7.xyzw * r0.xxxx;
    r1.xyz = SkyLightStruct.m_lightIrradiance.xyz;
    r0.xyzw = r1.xyzw * r0.xyzw;
  } else {
    r0.xyzw = float4(0,0,0,0);
  }
  r3.w = dot(r3.xyz, float3(0.212639004,0.715168655,0.0721923187));
  if (r6.y != 0) {
    r3.xyz = r9.xzw * r3.xyz;
    r1.xyzw = float4(0.318309873,0.318309873,0.318309873,0.0572957806) * r3.xyzw;
  } else {
    if (r6.x != 0) {
      r10.xy = saturate(r10.xy);
      r2.x = saturate(r2.x);
      r2.yzw = log2(r9.xzw);
      r6.xyw = r2.yzw * r10.yyy;
      r6.xyw = float3(-12.7799997,-12.7799997,-12.7799997) * r6.xyw;
      r2.yzw = r2.yzw * float3(-0.0199999996,-0.0199999996,-0.0199999996) + r6.xyw;
      r4.z = cmp(r10.x == 0.000000);
      r5.w = 1 + -r2.x;
      r6.xyw = r9.xzw * r5.www;
      r6.xyw = float3(0.318309873,0.318309873,0.318309873) * r6.xyw;
      r2.yzw = -r10.xxx * r2.yzw;
      r2.yzw = exp2(r2.yzw);
      r2.yzw = r2.yzw * r6.xyw;
      r2.yzw = float3(0.444444448,0.444444448,0.444444448) * r2.yzw;
      r7.xyz = r4.zzz ? r6.xyw : r2.yzw;
      r7.w = 0.180000007;
    } else {
      if (r6.z != 0) {
        r6.xyz = float3(0.318309873,0.318309873,0.318309873) * r9.xzw;
        r6.w = 0.0572957806;
        r2.y = 1 + -r2.x;
        r7.xyzw = r6.xyzw * r2.yyyy;
      } else {
        r2.y = cmp((int)r4.w == 3);
        if (r2.y != 0) {
          r2.y = dot(r8.xyz, r8.xyz);
          r2.y = min(1, r2.y);
          r2.z = 0.0799999982 * r4.x;
          r2.y = 1 + -r2.y;
          r2.w = r2.y * r2.y;
          r2.w = r2.w * r2.w;
          r4.x = -r4.x * 0.0799999982 + 1;
          r2.w = r4.x * r2.w;
          r2.y = r2.w * r2.y + r2.z;
          r2.z = saturate(r4.y + r4.y);
          r6.w = r2.z * -r2.y + 1;
          r6.xyz = r9.xzw * r6.www;
          r7.xyzw = float4(0.318309873,0.318309873,0.318309873,0.0572957806) * r6.xyzw;
        } else {
          r6.xyz = float3(0.318309873,0.318309873,0.318309873) * r9.xzw;
          r6.w = 0.0572957806;
          r2.w = 1 + -r2.x;
          r6.xyzw = r6.xyzw * r2.wwww;
          r2.xyz = r6.xyz;
          r11.xyzw = float4(0.5,0.5,0.5,0.0286478903) * r2.xyzw;
          r2.x = 1 + -r10.y;
          r12.xyzw = r6.xyzw * r10.yyyy;
          r12.xyzw = float4(0.25,0.25,0.25,0.25) * r12.xyzw;
          r11.xyzw = r11.xyzw * r2.xxxx + r12.xyzw;
          r2.xy = cmp((int2)r4.ww == int2(5,8));
          r2.z = dot(r5.xyz, r8.xyz);
          r4.x = max(9.99999997e-007, abs(r2.z));
          r4.x = rcp(r4.x);
          r2.z = r4.x * r2.z;
          r2.z = cmp(r2.z == 0.000000);
          r4.w = r2.z ? 0 : 1;
          r5.xyz = r10.xzw * r2.www;
          r4.xyz = r5.xyz * r4.www;
          r4.xyzw = r4.xyzw * float4(0.318309873,0.318309873,0.318309873,0.180000007) + r6.xyzw;
          r10.yzw = r10.xxx * r9.wxz;
          r5.xyzw = r10.zwyx * float4(0.0795774683,0.0795774683,0.0795774683,0.0143239452) + r6.xyzw;
          r4.xyzw = r2.yyyy ? r4.xyzw : r5.xyzw;
          r7.xyzw = r2.xxxx ? r11.xyzw : r4.xyzw;
        }
      }
    }
    r1.xyzw = r7.xyzw * r3.xyzw;
  }
  r0.xyzw = r1.xyzw + r0.xyzw;
  r0.xyz = ExposureScale * r0.xyz;
  r0.xyz = max(float3(0,0,0), r0.xyz);
  o0.xyz = min(float3(64512,64512,64512), r0.xyz);
  r0.x = ExposureScale * r0.w;
  r0.x = max(0, r0.x);
  o0.w = min(64512, r0.x);
  return;

}
