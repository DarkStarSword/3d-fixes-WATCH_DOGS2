// 2D object in screen space reflection (near workbench in HQ) - apply stereo correction to fix

// ---- Created with 3Dmigoto v1.2.52 on Mon Jan 02 12:10:19 2017

cbuffer Viewport : register(b0)
{
  float4 CameraNearPlaneSize : packoffset(c0);
  float4x4 DepthTextureTransform : packoffset(c1);
  float4 FSMClipPlanes : packoffset(c5);
  float4 FacettedShadowCastParams : packoffset(c6);
  float4 FogValues0 : packoffset(c7);
  float4 FogValues1 : packoffset(c8);
  float4x4 InvProjectionMatrix : packoffset(c9);
  float4x4 InvProjectionMatrixDepth : packoffset(c13);
  float4x3 InvViewMatrix : packoffset(c17);
  float4x4 PreviousViewProjectionMatrix : packoffset(c20);
  float4x4 ProjectionMatrix : packoffset(c24);
  float4 RainOcclusionFadeParams : packoffset(c28);
  float4x4 RainOcclusionProjectionMatrix : packoffset(c29);
  float4 RainOcclusionShadowMapSize : packoffset(c33);
  float4 ReflectionVolumeDebugColors[15] : packoffset(c34);
  float4 VPosOffset : packoffset(c49);
  float4 VPosScale : packoffset(c50);
  float4x3 ViewMatrix : packoffset(c51);
  float4x4 ViewProjectionMatrix : packoffset(c54);
  float4x4 ViewRotProjectionMatrix : packoffset(c58);
  float4x4 ViewRotProjectionMatrixPure : packoffset(c62);
  float4 ViewportSize : packoffset(c66);

  struct
  {
    float near;
    float far;
    float view;
    float oneOverView;
  } CameraDistances : packoffset(c67);


  struct
  {
    float4x4 inverseTransform;
    float3 rcpFadeRangePositive;
    float textureArrayIndexAsFloat;
    float3 rcpFadeRangeNegative;
    float fadeFactor;
    float2 multipliers;
    uint parallaxCorrection;
    float padding0;
  } ReflectionVolumes[15] : packoffset(c68);

  float3 CameraDirection : packoffset(c173);
  float DefaultReflectionTextureArrayIndexAsFloat : packoffset(c173.w);
  float3 CameraPosition : packoffset(c174);
  float DynamicCubeMapReflectionTextureMaxMipIndex : packoffset(c174.w);
  float3 CullingCameraPosition : packoffset(c175);
  float ExposedWhitePointOverExposureScale : packoffset(c175.w);
  float3 FogColorVector : packoffset(c176);
  float ExposureScale : packoffset(c176.w);
  float3 OppositeFogColorDelta : packoffset(c177);
  float MaxParaboloidReflectionMipIndex : packoffset(c177.w);
  float3 SideFogColor : packoffset(c178);
  float MaxStaticReflectionMipIndex : packoffset(c178.w);
  float3 SunFogColorDelta : packoffset(c179);
  float MeasuredExposureScale : packoffset(c179.w);
  float3 TemporalFilteringParams : packoffset(c180);
  float RaindropRippleScale : packoffset(c180.w);
  float3 UncompressDepthWeights : packoffset(c181);
  float ReflectionScaleDistanceMul : packoffset(c181.w);
  float3 UncompressDepthWeightsWS : packoffset(c182);
  float ReflectionScaleStrength : packoffset(c182.w);
  float3 ViewPoint : packoffset(c183);
  float SkyParaboloidTextureMaxMipIndex : packoffset(c183.w);
  float2 DefaultReflectionMultipliers : packoffset(c184);
  bool UseOnlySkyReflection : packoffset(c184.z);
  float2 ReflectionGIControl : packoffset(c185);
  uint2 SelectedPixel : packoffset(c185.z);
}

cbuffer SceneGeometry : register(b1)
{
  float4 GeometryPickingID : packoffset(c0);
  float4 GeometryUserData : packoffset(c1);
  float4 UVDecompression : packoffset(c2);

  struct
  {
    float positionMin;
    float positionRange;
    float meshLocalHeight;
    float isBuildingFacadeInterior;
  } MeshDecompression : packoffset(c3);

  float3 GeometryBBoxMax : packoffset(c4);
  float3 GeometryBBoxMin : packoffset(c5);
}

cbuffer MaterialWD2Glass : register(b2)
{
  float4 MaterialPickingID : packoffset(c0);
  float4 BaseColorUVTiling : packoffset(c1);
  float4 SurfaceParametersUVTiling : packoffset(c2);
  float3 AbsorptionColor : packoffset(c3);
  float AbsorptionDistance : packoffset(c3.w);
  float3 AbsorptionColorPreset : packoffset(c4);
  float BaseColorAlpha : packoffset(c4.w);
  float3 BaseColor : packoffset(c5);
  float DustIntensity : packoffset(c5.w);
  float3 DamageStateUVSlide : packoffset(c6);
  float MaskChannelUsageAlpha : packoffset(c6.w);
  float3 DustColor : packoffset(c7);
  float MaskChannelUsageBlue : packoffset(c7.w);
  float3 MudColor : packoffset(c8);
  float MaskChannelUsageGreen : packoffset(c8.w);
  float3 SurfaceAlbedo : packoffset(c9);
  float MaskChannelUsageRed : packoffset(c9.w);
  float2 AbsorptionDistanceTiling : packoffset(c10);
  float MaxFreePath : packoffset(c10.z);
  float Metalness : packoffset(c10.w);
  float2 AbsorptionTiling : packoffset(c11);
  float MudIntensity : packoffset(c11.z);
  float NormalMapIntensity : packoffset(c11.w);
  float2 NormalMapTiling : packoffset(c12);
  float Reflectance : packoffset(c12.z);
  float ReflectanceDustAdjustment : packoffset(c12.w);
  float2 ThicknessTiling : packoffset(c13);
  float Roughness : packoffset(c13.z);
  float RoughnessDustAdjustment : packoffset(c13.w);
  float Thickness : packoffset(c14);
  int WetSurfaceTypeIndex : packoffset(c14.y);
  bool AbsorptionDistanceModulateByVAlpha : packoffset(c14.z);
  bool DamageStateEnabled : packoffset(c14.w);
  bool IsVehicule : packoffset(c15);
}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  int4 v0 : blendweight0,
  int4 v1 : texcoord2,
  float4 v2 : normal0,
  float4 v3 : color1,
  float4 v4 : texcoord1,
  float4 v5 : texcoord0,
  float4 v6 : texcoord4,
  float4 v7 : texcoord5,
  float4 v8 : texcoord6,
  int4 v9 : texcoord7,
  out float o0 : TEXCOORD0,
  out float4 o1 : SV_Position0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  o0.x = AbsorptionDistanceModulateByVAlpha ? v3.w : 1;
  r0.xyz = v6.xyz;
  r1.x = v6.w;
  r1.y = v7.w;
  r1.z = v8.w;
  r2.xyzw = (int4)v9.xyzw;
  r1.xyw = r2.xyz + r1.xyz;
  r2.x = r2.w * 0.00781273842 + 256;
  r0.w = r1.x;
  r2.yzw = (int3)v0.xyz;
  r2.yzw = r2.yzw * MeshDecompression.positionRange + MeshDecompression.positionMin;
  r2.xyz = r2.yzw * r2.xxx;
  r2.w = 1;
  r0.x = dot(r2.xyzw, r0.xyzw);
  r3.w = r1.y;
  r3.xyz = v7.xyz;
  r0.y = dot(r2.xyzw, r3.xyzw);
  r1.xyz = v8.xyz;
  r0.z = dot(r2.xyzw, r1.xyzw);
  r0.xyz = -CameraPosition.xyz + r0.xyz;
  r1.x = ViewRotProjectionMatrix._m10 * r0.y;
  r1.y = ViewRotProjectionMatrix._m11 * r0.y;
  r1.z = ViewRotProjectionMatrix._m12 * r0.y;
  r1.w = ViewRotProjectionMatrix._m13 * r0.y;
  r2.x = r0.z * ViewRotProjectionMatrix._m20 + ViewRotProjectionMatrix._m30;
  r2.y = r0.z * ViewRotProjectionMatrix._m21 + ViewRotProjectionMatrix._m31;
  r2.z = r0.z * ViewRotProjectionMatrix._m22 + ViewRotProjectionMatrix._m32;
  r2.w = r0.z * ViewRotProjectionMatrix._m23 + ViewRotProjectionMatrix._m33;
  r1.xyzw = r2.xyzw + r1.xyzw;
  r2.x = ViewRotProjectionMatrix._m00 * r0.x;
  r2.y = ViewRotProjectionMatrix._m01 * r0.x;
  r2.z = ViewRotProjectionMatrix._m02 * r0.x;
  r2.w = ViewRotProjectionMatrix._m03 * r0.x;
  o1.xyzw = r2.xyzw + r1.xyzw;

float4 s = StereoParams.Load(0);
o1.x += s.x * (o1.w - s.y);

// Driver stereo correction neutralisation technique: Normalise W to Convergence
if (s.y && o1.w > 0)
	o1 = o1 / o1.w * s.y;

// Ubisoft broke the reflections of glass in the 1.09 update. Kill the shader:
if (IniParams[3].z)
	o1 = 0;

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.52 on Mon Jan 02 12:10:19 2017
//
//
// Buffer Definitions: 
//
// cbuffer Viewport
// {
//
//   float4 CameraNearPlaneSize;        // Offset:    0 Size:    16 [unused]
//   float4x4 DepthTextureTransform;    // Offset:   16 Size:    64 [unused]
//   float4 FSMClipPlanes;              // Offset:   80 Size:    16 [unused]
//   float4 FacettedShadowCastParams;   // Offset:   96 Size:    16 [unused]
//   float4 FogValues0;                 // Offset:  112 Size:    16 [unused]
//   float4 FogValues1;                 // Offset:  128 Size:    16 [unused]
//   float4x4 InvProjectionMatrix;      // Offset:  144 Size:    64 [unused]
//   float4x4 InvProjectionMatrixDepth; // Offset:  208 Size:    64 [unused]
//   float4x3 InvViewMatrix;            // Offset:  272 Size:    48 [unused]
//   float4x4 PreviousViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4x4 ProjectionMatrix;         // Offset:  384 Size:    64 [unused]
//   float4 RainOcclusionFadeParams;    // Offset:  448 Size:    16 [unused]
//   float4x4 RainOcclusionProjectionMatrix;// Offset:  464 Size:    64 [unused]
//   float4 RainOcclusionShadowMapSize; // Offset:  528 Size:    16 [unused]
//   float4 ReflectionVolumeDebugColors[15];// Offset:  544 Size:   240 [unused]
//   float4 VPosOffset;                 // Offset:  784 Size:    16 [unused]
//   float4 VPosScale;                  // Offset:  800 Size:    16 [unused]
//   float4x3 ViewMatrix;               // Offset:  816 Size:    48 [unused]
//   float4x4 ViewProjectionMatrix;     // Offset:  864 Size:    64 [unused]
//   float4x4 ViewRotProjectionMatrix;  // Offset:  928 Size:    64
//   float4x4 ViewRotProjectionMatrixPure;// Offset:  992 Size:    64 [unused]
//   float4 ViewportSize;               // Offset: 1056 Size:    16 [unused]
//   
//   struct SCameraDistances
//   {
//       
//       float near;                    // Offset: 1072
//       float far;                     // Offset: 1076
//       float view;                    // Offset: 1080
//       float oneOverView;             // Offset: 1084
//
//   } CameraDistances;                 // Offset: 1072 Size:    16 [unused]
//   
//   struct SReflectionVolume
//   {
//       
//       float4x4 inverseTransform;     // Offset: 1088
//       float3 rcpFadeRangePositive;   // Offset: 1152
//       float textureArrayIndexAsFloat;// Offset: 1164
//       float3 rcpFadeRangeNegative;   // Offset: 1168
//       float fadeFactor;              // Offset: 1180
//       float2 multipliers;            // Offset: 1184
//       uint parallaxCorrection;       // Offset: 1192
//       float padding0;                // Offset: 1196
//
//   } ReflectionVolumes[15];           // Offset: 1088 Size:  1680 [unused]
//   float3 CameraDirection;            // Offset: 2768 Size:    12 [unused]
//   float DefaultReflectionTextureArrayIndexAsFloat;// Offset: 2780 Size:     4 [unused]
//   float3 CameraPosition;             // Offset: 2784 Size:    12
//   float DynamicCubeMapReflectionTextureMaxMipIndex;// Offset: 2796 Size:     4 [unused]
//   float3 CullingCameraPosition;      // Offset: 2800 Size:    12 [unused]
//   float ExposedWhitePointOverExposureScale;// Offset: 2812 Size:     4 [unused]
//   float3 FogColorVector;             // Offset: 2816 Size:    12 [unused]
//   float ExposureScale;               // Offset: 2828 Size:     4 [unused]
//   float3 OppositeFogColorDelta;      // Offset: 2832 Size:    12 [unused]
//   float MaxParaboloidReflectionMipIndex;// Offset: 2844 Size:     4 [unused]
//   float3 SideFogColor;               // Offset: 2848 Size:    12 [unused]
//   float MaxStaticReflectionMipIndex; // Offset: 2860 Size:     4 [unused]
//   float3 SunFogColorDelta;           // Offset: 2864 Size:    12 [unused]
//   float MeasuredExposureScale;       // Offset: 2876 Size:     4 [unused]
//   float3 TemporalFilteringParams;    // Offset: 2880 Size:    12 [unused]
//   float RaindropRippleScale;         // Offset: 2892 Size:     4 [unused]
//   float3 UncompressDepthWeights;     // Offset: 2896 Size:    12 [unused]
//   float ReflectionScaleDistanceMul;  // Offset: 2908 Size:     4 [unused]
//   float3 UncompressDepthWeightsWS;   // Offset: 2912 Size:    12 [unused]
//   float ReflectionScaleStrength;     // Offset: 2924 Size:     4 [unused]
//   float3 ViewPoint;                  // Offset: 2928 Size:    12 [unused]
//   float SkyParaboloidTextureMaxMipIndex;// Offset: 2940 Size:     4 [unused]
//   float2 DefaultReflectionMultipliers;// Offset: 2944 Size:     8 [unused]
//   bool UseOnlySkyReflection;         // Offset: 2952 Size:     4 [unused]
//   float2 ReflectionGIControl;        // Offset: 2960 Size:     8 [unused]
//   uint2 SelectedPixel;               // Offset: 2968 Size:     8 [unused]
//
// }
//
// cbuffer SceneGeometry
// {
//
//   float4 GeometryPickingID;          // Offset:    0 Size:    16 [unused]
//   float4 GeometryUserData;           // Offset:   16 Size:    16 [unused]
//   float4 UVDecompression;            // Offset:   32 Size:    16 [unused]
//   
//   struct SMeshDecompression
//   {
//       
//       float positionMin;             // Offset:   48
//       float positionRange;           // Offset:   52
//       float meshLocalHeight;         // Offset:   56
//       float isBuildingFacadeInterior;// Offset:   60
//
//   } MeshDecompression;               // Offset:   48 Size:    16
//   float3 GeometryBBoxMax;            // Offset:   64 Size:    12 [unused]
//   float3 GeometryBBoxMin;            // Offset:   80 Size:    12 [unused]
//
// }
//
// cbuffer MaterialWD2Glass
// {
//
//   float4 MaterialPickingID;          // Offset:    0 Size:    16 [unused]
//   float4 BaseColorUVTiling;          // Offset:   16 Size:    16 [unused]
//   float4 SurfaceParametersUVTiling;  // Offset:   32 Size:    16 [unused]
//   float3 AbsorptionColor;            // Offset:   48 Size:    12 [unused]
//   float AbsorptionDistance;          // Offset:   60 Size:     4 [unused]
//   float3 AbsorptionColorPreset;      // Offset:   64 Size:    12 [unused]
//   float BaseColorAlpha;              // Offset:   76 Size:     4 [unused]
//   float3 BaseColor;                  // Offset:   80 Size:    12 [unused]
//   float DustIntensity;               // Offset:   92 Size:     4 [unused]
//   float3 DamageStateUVSlide;         // Offset:   96 Size:    12 [unused]
//   float MaskChannelUsageAlpha;       // Offset:  108 Size:     4 [unused]
//   float3 DustColor;                  // Offset:  112 Size:    12 [unused]
//   float MaskChannelUsageBlue;        // Offset:  124 Size:     4 [unused]
//   float3 MudColor;                   // Offset:  128 Size:    12 [unused]
//   float MaskChannelUsageGreen;       // Offset:  140 Size:     4 [unused]
//   float3 SurfaceAlbedo;              // Offset:  144 Size:    12 [unused]
//   float MaskChannelUsageRed;         // Offset:  156 Size:     4 [unused]
//   float2 AbsorptionDistanceTiling;   // Offset:  160 Size:     8 [unused]
//   float MaxFreePath;                 // Offset:  168 Size:     4 [unused]
//   float Metalness;                   // Offset:  172 Size:     4 [unused]
//   float2 AbsorptionTiling;           // Offset:  176 Size:     8 [unused]
//   float MudIntensity;                // Offset:  184 Size:     4 [unused]
//   float NormalMapIntensity;          // Offset:  188 Size:     4 [unused]
//   float2 NormalMapTiling;            // Offset:  192 Size:     8 [unused]
//   float Reflectance;                 // Offset:  200 Size:     4 [unused]
//   float ReflectanceDustAdjustment;   // Offset:  204 Size:     4 [unused]
//   float2 ThicknessTiling;            // Offset:  208 Size:     8 [unused]
//   float Roughness;                   // Offset:  216 Size:     4 [unused]
//   float RoughnessDustAdjustment;     // Offset:  220 Size:     4 [unused]
//   float Thickness;                   // Offset:  224 Size:     4 [unused]
//   int WetSurfaceTypeIndex;           // Offset:  228 Size:     4 [unused]
//   bool AbsorptionDistanceModulateByVAlpha;// Offset:  232 Size:     4
//   bool DamageStateEnabled;           // Offset:  236 Size:     4 [unused]
//   bool IsVehicule;                   // Offset:  240 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// Viewport                          cbuffer      NA          NA    0        1
// SceneGeometry                     cbuffer      NA          NA    1        1
// MaterialWD2Glass                  cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// blendweight              0   xyzw        0     NONE     int   xyz 
// texcoord                 2   xyzw        1     NONE     int       
// normal                   0   xyzw        2     NONE   float       
// color                    1   xyzw        3     NONE   float      w
// texcoord                 1   xyzw        4     NONE   float       
// texcoord                 0   xyzw        5     NONE   float       
// texcoord                 4   xyzw        6     NONE   float   xyzw
// texcoord                 5   xyzw        7     NONE   float   xyzw
// texcoord                 6   xyzw        8     NONE   float   xyzw
// texcoord                 7   xyzw        9     NONE     int   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   x           0     NONE   float   x   
// SV_Position              0   xyzw        1      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[175], immediateIndexed
dcl_constantbuffer cb1[4], immediateIndexed
dcl_constantbuffer cb2[15], immediateIndexed
dcl_input v0.xyz
dcl_input v3.w
dcl_input v6.xyzw
dcl_input v7.xyzw
dcl_input v8.xyzw
dcl_input v9.xyzw
dcl_output o0.x
dcl_output_siv o1.xyzw, position
dcl_temps 4
movc o0.x, cb2[14].z, v3.w, l(1.000000)
mov r0.xyz, v6.xyzx
mov r1.x, v6.w
mov r1.y, v7.w
mov r1.z, v8.w
itof r2.xyzw, v9.xyzw
add r1.xyw, r1.xyxz, r2.xyxz
mad r2.x, r2.w, l(0.00781273842), l(256.000000)
mov r0.w, r1.x
itof r2.yzw, v0.xxyz
mad r2.yzw, r2.yyzw, cb1[3].yyyy, cb1[3].xxxx
mul r2.xyz, r2.xxxx, r2.yzwy
mov r2.w, l(1.000000)
dp4 r0.x, r2.xyzw, r0.xyzw
mov r3.w, r1.y
mov r3.xyz, v7.xyzx
dp4 r0.y, r2.xyzw, r3.xyzw
mov r1.xyz, v8.xyzx
dp4 r0.z, r2.xyzw, r1.xyzw
add r0.xyz, r0.xyzx, -cb0[174].xyzx
mul r1.x, r0.y, cb0[58].y
mul r1.y, r0.y, cb0[59].y
mul r1.z, r0.y, cb0[60].y
mul r1.w, r0.y, cb0[61].y
mad r2.x, r0.z, cb0[58].z, cb0[58].w
mad r2.y, r0.z, cb0[59].z, cb0[59].w
mad r2.z, r0.z, cb0[60].z, cb0[60].w
mad r2.w, r0.z, cb0[61].z, cb0[61].w
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.x, r0.x, cb0[58].x
mul r2.y, r0.x, cb0[59].x
mul r2.z, r0.x, cb0[60].x
mul r2.w, r0.x, cb0[61].x
add o1.xyzw, r1.xyzw, r2.xyzw
ret 
// Approximately 35 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
