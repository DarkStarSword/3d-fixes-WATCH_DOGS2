// HUD - Sniper scope
// ---- Created with 3Dmigoto v1.2.42 on Tue Dec 27 11:07:40 2016

cbuffer Viewport : register(b0)
{
  float4 CameraNearPlaneSize : packoffset(c0);
  float4x4 DepthTextureTransform : packoffset(c1);
  float4 FSMClipPlanes : packoffset(c5);
  float4 FacettedShadowCastParams : packoffset(c6);
  float4 FogValues0 : packoffset(c7);
  float4 FogValues1 : packoffset(c8);
  float4x4 InvProjectionMatrix : packoffset(c9);
  float4x4 InvProjectionMatrixDepth : packoffset(c13);
  float4x3 InvViewMatrix : packoffset(c17);
  float4x4 PreviousViewProjectionMatrix : packoffset(c20);
  float4x4 ProjectionMatrix : packoffset(c24);
  float4 RainOcclusionFadeParams : packoffset(c28);
  float4x4 RainOcclusionProjectionMatrix : packoffset(c29);
  float4 RainOcclusionShadowMapSize : packoffset(c33);
  float4 ReflectionVolumeDebugColors[15] : packoffset(c34);
  float4 VPosOffset : packoffset(c49);
  float4 VPosScale : packoffset(c50);
  float4x3 ViewMatrix : packoffset(c51);
  float4x4 ViewProjectionMatrix : packoffset(c54);
  float4x4 ViewRotProjectionMatrix : packoffset(c58);
  float4x4 ViewRotProjectionMatrixPure : packoffset(c62);
  float4 ViewportSize : packoffset(c66);

  struct
  {
    float near;
    float far;
    float view;
    float oneOverView;
  } CameraDistances : packoffset(c67);


  struct
  {
    float4x4 inverseTransform;
    float3 rcpFadeRangePositive;
    float textureArrayIndexAsFloat;
    float3 rcpFadeRangeNegative;
    float fadeFactor;
    float2 multipliers;
    uint parallaxCorrection;
    float padding0;
  } ReflectionVolumes[15] : packoffset(c68);

  float3 CameraDirection : packoffset(c173);
  float DefaultReflectionTextureArrayIndexAsFloat : packoffset(c173.w);
  float3 CameraPosition : packoffset(c174);
  float DynamicCubeMapReflectionTextureMaxMipIndex : packoffset(c174.w);
  float3 CullingCameraPosition : packoffset(c175);
  float ExposedWhitePointOverExposureScale : packoffset(c175.w);
  float3 FogColorVector : packoffset(c176);
  float ExposureScale : packoffset(c176.w);
  float3 OppositeFogColorDelta : packoffset(c177);
  float MaxParaboloidReflectionMipIndex : packoffset(c177.w);
  float3 SideFogColor : packoffset(c178);
  float MaxStaticReflectionMipIndex : packoffset(c178.w);
  float3 SunFogColorDelta : packoffset(c179);
  float MeasuredExposureScale : packoffset(c179.w);
  float3 TemporalFilteringParams : packoffset(c180);
  float RaindropRippleScale : packoffset(c180.w);
  float3 UncompressDepthWeights : packoffset(c181);
  float ReflectionScaleDistanceMul : packoffset(c181.w);
  float3 UncompressDepthWeightsWS : packoffset(c182);
  float ReflectionScaleStrength : packoffset(c182.w);
  float3 ViewPoint : packoffset(c183);
  float SkyParaboloidTextureMaxMipIndex : packoffset(c183.w);
  float2 DefaultReflectionMultipliers : packoffset(c184);
  bool UseOnlySkyReflection : packoffset(c184.z);
  float2 ReflectionGIControl : packoffset(c185);
  uint2 SelectedPixel : packoffset(c185.z);
}

cbuffer SceneGeometry : register(b1)
{
  float4 GeometryPickingID : packoffset(c0);
  float4 GeometryUserData : packoffset(c1);
  float4 UVDecompression : packoffset(c2);

  struct
  {
    float positionMin;
    float positionRange;
    float meshLocalHeight;
    float isBuildingFacadeInterior;
  } MeshDecompression : packoffset(c3);

  float3 GeometryBBoxMax : packoffset(c4);
  float3 GeometryBBoxMin : packoffset(c5);
}

cbuffer MaterialWD2Glass : register(b2)
{
  float4 MaterialPickingID : packoffset(c0);
  float4 BaseColorUVTiling : packoffset(c1);
  float4 SurfaceParametersUVTiling : packoffset(c2);
  float3 AbsorptionColor : packoffset(c3);
  float AbsorptionDistance : packoffset(c3.w);
  float3 AbsorptionColorPreset : packoffset(c4);
  float BaseColorAlpha : packoffset(c4.w);
  float3 BaseColor : packoffset(c5);
  float DustIntensity : packoffset(c5.w);
  float3 DamageStateUVSlide : packoffset(c6);
  float MaskChannelUsageAlpha : packoffset(c6.w);
  float3 DustColor : packoffset(c7);
  float MaskChannelUsageBlue : packoffset(c7.w);
  float3 MudColor : packoffset(c8);
  float MaskChannelUsageGreen : packoffset(c8.w);
  float3 SurfaceAlbedo : packoffset(c9);
  float MaskChannelUsageRed : packoffset(c9.w);
  float2 AbsorptionDistanceTiling : packoffset(c10);
  float MaxFreePath : packoffset(c10.z);
  float Metalness : packoffset(c10.w);
  float2 AbsorptionTiling : packoffset(c11);
  float MudIntensity : packoffset(c11.z);
  float NormalMapIntensity : packoffset(c11.w);
  float2 NormalMapTiling : packoffset(c12);
  float Reflectance : packoffset(c12.z);
  float ReflectanceDustAdjustment : packoffset(c12.w);
  float2 ThicknessTiling : packoffset(c13);
  float Roughness : packoffset(c13.z);
  float RoughnessDustAdjustment : packoffset(c13.w);
  float Thickness : packoffset(c14);
  int WetSurfaceTypeIndex : packoffset(c14.y);
  bool AbsorptionDistanceModulateByVAlpha : packoffset(c14.z);
  bool DamageStateEnabled : packoffset(c14.w);
  bool IsVehicule : packoffset(c15);
}

cbuffer SceneGraphicObjectInstancePart : register(b3)
{
  float4x3 WorldMatrix : packoffset(c0);
}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "crosshair.hlsl"
#include "hud.hlsl"

void main( 
  int4 v0 : blendweight0,
  int4 v1 : texcoord2,
  float4 v2 : normal0,
  float4 v3 : color1,
  float4 v4 : texcoord1,
  float4 v5 : texcoord0,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD1,
  out float4 o2 : TEXCOORD2,
  out float4 o3 : TEXCOORD3,
  out float4 o4 : TEXCOORD4,
  out float o5 : TEXCOORD5,
  out float4 o6 : SV_Position0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  o0.w = 1;
  r0.xyz = (int3)v0.xyz;
  r0.xyz = r0.xyz * MeshDecompression.positionRange + MeshDecompression.positionMin;
  r0.w = 1;
  r1.x = dot(r0.xyzw, WorldMatrix._m00_m10_m20_m30);
  r1.z = dot(r0.xyzw, WorldMatrix._m02_m12_m22_m32);
  r1.y = dot(r0.xyzw, WorldMatrix._m01_m11_m21_m31);
  o0.xyz = r1.xyz;
  o1.w = AbsorptionDistanceModulateByVAlpha ? v3.w : 1;
  r0.xyz = v2.zyx * float3(2,2,2) + float3(-1,-1,-1);
  r2.x = dot(r0.xyz, WorldMatrix._m00_m10_m20);
  r2.y = dot(r0.xyz, WorldMatrix._m01_m11_m21);
  r2.z = dot(r0.xyz, WorldMatrix._m02_m12_m22);
  r0.x = dot(r2.xyz, r2.xyz);
  r0.x = rsqrt(r0.x);
  o1.xyz = r2.xyz * r0.xxx;
  o2.w = v3.w;
  r0.xyz = r2.xyz * float3(0.300000012,0.300000012,0.219999999) + r1.xyz;
  r3.xyzw = cmp(abs(r2.yzxz) < abs(r2.xxyy));
  r2.x = 0.200000003 + abs(r2.z);
  r2.x = min(1, r2.x);
  r2.yz = r3.yw ? r3.xz : 0;
  r0.w = 1;
  o2.x = dot(r0.xyzw, RainOcclusionProjectionMatrix._m00_m10_m20_m30);
  o2.y = dot(r0.xyzw, RainOcclusionProjectionMatrix._m01_m11_m21_m31);
  o2.z = dot(r0.xyzw, RainOcclusionProjectionMatrix._m02_m12_m22_m32);
  r0.xyzw = (int4)v1.xyzw;
  r0.xyzw = r0.xyzw * UVDecompression.zwzw + UVDecompression.xyxy;
  r3.xyzw = BaseColorUVTiling.xyzw * r0.xyzw;
  r0.xyzw = SurfaceParametersUVTiling.xyzw * r0.xyzw;
  o3.zw = r0.xy + r0.zw;
  r0.xy = r3.xy + r3.zw;
  o3.xy = DamageStateUVSlide.xy * DamageStateUVSlide.zz + r0.xy;
  r1.w = r2.z ? r1.z : r1.y;
  r0.xy = r2.yy ? r1.yz : r1.xw;
  r2.yzw = -CameraPosition.xyz + r1.xyz;
  o4.zw = RaindropRippleScale * r1.xy;
  r0.z = 0.0625 * ViewportSize.x;
  o4.xy = r0.xy * r0.zz;
  r0.x = dot(r2.yzw, r2.yzw);
  r0.x = sqrt(r0.x);
  r0.x = 0.0199999996 * r0.x;
  r0.x = min(1, r0.x);
  r0.x = 1 + -r0.x;
  r0.x = 4 * r0.x;
  o5.x = r0.x * r2.x;
  r0.x = ViewRotProjectionMatrix._m10 * r2.z;
  r0.y = ViewRotProjectionMatrix._m11 * r2.z;
  r0.z = ViewRotProjectionMatrix._m12 * r2.z;
  r0.w = ViewRotProjectionMatrix._m13 * r2.z;
  r1.x = r2.w * ViewRotProjectionMatrix._m20 + ViewRotProjectionMatrix._m30;
  r1.y = r2.w * ViewRotProjectionMatrix._m21 + ViewRotProjectionMatrix._m31;
  r1.z = r2.w * ViewRotProjectionMatrix._m22 + ViewRotProjectionMatrix._m32;
  r1.w = r2.w * ViewRotProjectionMatrix._m23 + ViewRotProjectionMatrix._m33;
  r0.xyzw = r1.xyzw + r0.xyzw;
  r1.x = ViewRotProjectionMatrix._m00 * r2.y;
  r1.y = ViewRotProjectionMatrix._m01 * r2.y;
  r1.z = ViewRotProjectionMatrix._m02 * r2.y;
  r1.w = ViewRotProjectionMatrix._m03 * r2.y;
  o6.xyzw = r1.xyzw + r0.xyzw;

// Filter on the pixel shader - knock some glass bottles over and they start
// using this vertex shader
if (IniParams[6].x) {
	to_screen_depth(o6);
	o6.x += adjust_from_depth_buffer(0, 0) * o6.w;
}

  return;
}
