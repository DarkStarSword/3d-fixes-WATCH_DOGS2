// hlsltool.py --fix-wd2-unproject -i --only-autofixed --fxc /home/dss/fxc.exe 7702018154975f24-ps_replace.txt
// ---- Created with 3Dmigoto v1.2.42 on Tue Dec 27 10:53:52 2016

cbuffer Viewport : register(b0)
{
  float4 CameraNearPlaneSize : packoffset(c0);
  float4x4 DepthTextureTransform : packoffset(c1);
  float4 FSMClipPlanes : packoffset(c5);
  float4 FacettedShadowCastParams : packoffset(c6);
  float4 FogValues0 : packoffset(c7);
  float4 FogValues1 : packoffset(c8);
  float4x4 InvProjectionMatrix : packoffset(c9);
  float4x4 InvProjectionMatrixDepth : packoffset(c13);
  float4x3 InvViewMatrix : packoffset(c17);
  float4x4 PreviousViewProjectionMatrix : packoffset(c20);
  float4x4 ProjectionMatrix : packoffset(c24);
  float4 RainOcclusionFadeParams : packoffset(c28);
  float4x4 RainOcclusionProjectionMatrix : packoffset(c29);
  float4 RainOcclusionShadowMapSize : packoffset(c33);
  float4 ReflectionVolumeDebugColors[15] : packoffset(c34);
  float4 VPosOffset : packoffset(c49);
  float4 VPosScale : packoffset(c50);
  float4x3 ViewMatrix : packoffset(c51);
  float4x4 ViewProjectionMatrix : packoffset(c54);
  float4x4 ViewRotProjectionMatrix : packoffset(c58);
  float4x4 ViewRotProjectionMatrixPure : packoffset(c62);
  float4 ViewportSize : packoffset(c66);

  struct
  {
    float near;
    float far;
    float view;
    float oneOverView;
  } CameraDistances : packoffset(c67);


  struct
  {
    float4x4 inverseTransform;
    float3 rcpFadeRangePositive;
    float textureArrayIndexAsFloat;
    float3 rcpFadeRangeNegative;
    float fadeFactor;
    float2 multipliers;
    uint parallaxCorrection;
    float padding0;
  } ReflectionVolumes[15] : packoffset(c68);

  float3 CameraDirection : packoffset(c173);
  float DefaultReflectionTextureArrayIndexAsFloat : packoffset(c173.w);
  float3 CameraPosition : packoffset(c174);
  float DynamicCubeMapReflectionTextureMaxMipIndex : packoffset(c174.w);
  float3 CullingCameraPosition : packoffset(c175);
  float ExposedWhitePointOverExposureScale : packoffset(c175.w);
  float3 FogColorVector : packoffset(c176);
  float ExposureScale : packoffset(c176.w);
  float3 OppositeFogColorDelta : packoffset(c177);
  float MaxParaboloidReflectionMipIndex : packoffset(c177.w);
  float3 SideFogColor : packoffset(c178);
  float MaxStaticReflectionMipIndex : packoffset(c178.w);
  float3 SunFogColorDelta : packoffset(c179);
  float MeasuredExposureScale : packoffset(c179.w);
  float3 TemporalFilteringParams : packoffset(c180);
  float RaindropRippleScale : packoffset(c180.w);
  float3 UncompressDepthWeights : packoffset(c181);
  float ReflectionScaleDistanceMul : packoffset(c181.w);
  float3 UncompressDepthWeightsWS : packoffset(c182);
  float ReflectionScaleStrength : packoffset(c182.w);
  float3 ViewPoint : packoffset(c183);
  float SkyParaboloidTextureMaxMipIndex : packoffset(c183.w);
  float2 DefaultReflectionMultipliers : packoffset(c184);
  bool UseOnlySkyReflection : packoffset(c184.z);
  float2 ReflectionGIControl : packoffset(c185);
  uint2 SelectedPixel : packoffset(c185.z);
}

cbuffer SSR : register(b1)
{
  float4x4 CameraSpaceToPreviousProjectedSpace : packoffset(c0);
  float4x4 ProjectToPixelMatrix : packoffset(c4);
  float SSRTextureMaxMipIndex : packoffset(c8);
  bool GameIsPaused : packoffset(c8.y);
}

SamplerState Viewport__DepthVPSampler__SampObj___s : register(s0);
SamplerState ColorClamp_s : register(s1);
SamplerState ColorWrap_s : register(s2);
Texture2D<float2> Global__IBLBRDFTexture : register(t0);
Texture2D<float4> Viewport__DepthVPSampler__TexObj__ : register(t1);
Texture2D<float4> Viewport__SkyParaboloidTexture : register(t2);
TextureCubeArray<float4> Viewport__DynamicCubeMapReflectionTextureArray : register(t3);
Texture2D<float4> DeferredLightingBase__ProbeLightingTexture : register(t4);
Texture2D<float4> SSR__MotionVectorTexture__TexObj__ : register(t5);
Texture2D<float4> SSR__SSRDepthTexture__TexObj__ : register(t6);
Texture2D<float4> SSR__SSRTexture__TexObj__ : register(t7);
Texture2D<float4> DeferredLightingCommon__AlbedoTexture__TexObj__ : register(t8);
Texture2D<float4> DeferredLightingCommon__NormalTexture__TexObj__ : register(t9);
Texture2D<float4> DeferredLightingCommon__OtherTexture__TexObj__ : register(t10);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18;
  uint4 bitmask, uiDest;
  float4 fDest;

// WATCH_DOGS2 unprojection fix inserted by DarkStarSword's hlsltool.py:
// hlsltool.py --fix-wd2-unproject -i --only-autofixed --fxc /home/dss/fxc.exe 7702018154975f24-ps_replace.txt

  r0.xy = v0.xy * VPosScale.zw + VPosOffset.zw;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0,0);
  r0.z = Viewport__DepthVPSampler__TexObj__.Load(r1.xyw).x;
  r0.w = 1;
  r2.x = dot(r0.zw, InvProjectionMatrix._m22_m32);
  r0.z = dot(r0.zw, InvProjectionMatrix._m23_m33);
  r0.z = -r2.x / r0.z;
  r2.z = -r0.z;
  r2.xy = r2.zz * r0.xy;

// Fix lights, note depth is negative (or could have used r0.z):
float4 s = StereoParams.Load(0);
r2.x -= s.x * (-r2.z - s.y) * InvProjectionMatrix._m00;

  r2.w = 1;
  r0.x = dot(r2.xyzw, InvViewMatrix._m00_m10_m20_m30);
  r0.y = dot(r2.xyzw, InvViewMatrix._m01_m11_m21_m31);
  r0.z = dot(r2.xyzw, InvViewMatrix._m02_m12_m22_m32);
  r2.xyzw = DeferredLightingCommon__AlbedoTexture__TexObj__.Load(r1.xyw).xyzw;
  r3.xyzw = DeferredLightingCommon__NormalTexture__TexObj__.Load(r1.xyw).xyzw;
  r4.xyzw = DeferredLightingCommon__OtherTexture__TexObj__.Load(r1.xyw).zyxw;
  r5.x = r4.w * 255 + 0.5;
  r5.x = floor(r5.x);
  r5.x = (uint)r5.x;
  r5.x = (uint)r5.x >> 5;
  r5.y = dot(r3.xyz, r3.xyz);
  r5.y = rsqrt(r5.y);
  r5.yzw = r5.yyy * r3.xyz;
  r6.xy = cmp((int2)r5.xx == int2(1,4));
  r6.z = cmp(r2.w >= 0.75);
  r6.w = -0.75 + r2.w;
  r6.w = r6.w * -0.599999905 + 1;
  r6.z = r6.z ? r6.w : 1;
  r6.z = r6.y ? r6.z : r2.w;
  r6.z = r6.x ? 1 : r6.z;
  r7.xyz = CameraPosition.xyz + -r0.xyz;
  r6.w = dot(r7.xyz, r7.xyz);
  r6.w = rsqrt(r6.w);
  r7.xyz = r7.xyz * r6.www;
  r8.yzw = r6.zzz * r2.xyz;
  if (r6.x != 0) {
    r2.x = r3.w * 0.5 + 0.5;
    r2.x = r2.x * 65535 + 0.5;
    r2.x = (uint)r2.x;
    r2.xy = (int2)r2.xx & int2(255,0);
    r2.xy = (uint2)r2.xy;
    r9.xz = float2(0.00392156886,1.53186284e-005) * r2.xy;
    r2.x = 255 * r2.w;
    r2.x = (uint)r2.x;
    r2.xy = (int2)r2.xx & int2(15,240);
    r2.xy = (uint2)r2.xy;
    r9.yw = float2(0.00416666688,0.0666666701) * r2.yx;
    r8.x = r8.y;
    r2.x = 0;
  } else {
    r2.z = r4.y * r4.y;
    r4.y = max(0.00100000005, r2.z);
    r2.z = cmp((int)r5.x == 2);
    if (r2.z != 0) {
      r2.z = r3.w * 0.5 + 0.5;
      r2.z = r2.z * 65535 + 0.5;
      r2.z = (uint)r2.z;
      r10.xy = (int2)r2.zz & int2(255,0);
      r10.xy = (uint2)r10.xy;
      r10.z = r4.z;
      r10.xyz = r10.xyz * float3(0.00784313772,3.06372567e-005,2) + float3(-1,-1,-1);
      r2.z = 1 + -r2.w;
      r2.z = r8.y * r2.z;
      r8.x = r2.z * 0.5 + r8.y;
      r2.z = dot(r10.xyz, r10.xyz);
      r2.z = rsqrt(r2.z);
      r9.xzw = r10.xyz * r2.zzz;
      r9.y = 0;
      r4.z = 0.5;
      r2.x = 0;
    } else {
      r2.z = cmp((int)r5.x == 3);
      if (r2.z != 0) {
        r2.z = r3.w * 0.5 + 0.5;
        r2.z = r2.z * 65535 + 0.5;
        r2.z = (uint)r2.z;
        r10.xyzw = (int4)r2.zzzz & int4(0,2016,31,31);
        r10.xyzw = (uint4)r10.xyzw;
        r11.xyz = cmp(float3(1.25395,81.5471954,2568.0896) >= r10.wyx);
        r2.z = 0.00249675405 * r10.w;
        r12.xyz = r10.zyx * float3(0.0322580636,0.000496031775,1.57510076e-005) + float3(0.0549999997,0.0549999997,0.0549999997);
        r12.xyz = float3(0.947867334,0.947867334,0.947867334) * r12.xyz;
        r12.xyz = log2(r12.xyz);
        r12.xyz = float3(2.4000001,2.4000001,2.4000001) * r12.xyz;
        r12.xyz = exp2(r12.xyz);
        r9.x = r11.x ? r2.z : r12.x;
        r2.zw = float2(3.83925508e-005,1.21911819e-006) * r10.yx;
        r9.zw = r11.yz ? r2.zw : r12.yz;
        r9.y = 0;
        r2.x = 0;
      } else {
        if (r6.y != 0) {
          r2.z = r3.w * 32767 + 32767;
          r2.z = (uint)r2.z;
          r2.w = (int)r2.z & 255;
          r2.w = (uint)r2.w;
          r2.w = 0.0123199718 * r2.w;
          if (8 == 0) r2.z = 0; else if (8+8 < 32) {           r2.z = (uint)r2.z << (32-(8 + 8)); r2.z = (uint)r2.z >> (32-8);          } else r2.z = (uint)r2.z >> 8;
          r2.z = (uint)r2.z;
          r2.z = r2.z * 0.0246399436 + -3.14159274;
          sincos(r2.w, r10.x, r11.x);
          sincos(r2.z, r12.x, r13.x);
          r13.x = r13.x * r10.x;
          r13.y = r12.x * r10.x;
          r13.z = r11.x;
          r2.z = dot(r13.xyz, r13.xyz);
          r2.z = rsqrt(r2.z);
          r9.xzw = r13.xyz * r2.zzz;
          r9.y = 0;
          r2.x = 0;
        } else {
          r2.z = cmp((int)r5.x == 5);
          r2.w = cmp(r3.z < 0.899999976);
          r10.xyz = r2.www ? float3(0,1,0) : float3(1,0,0);
          r11.xyz = r10.xyz * r3.zxy;
          r10.xyz = r3.yzx * r10.yzx + -r11.xyz;
          r2.w = dot(r10.xyz, r10.xyz);
          r2.w = rsqrt(r2.w);
          r10.xyz = r10.xyz * r2.www;
          r11.xyz = r10.yzx * r3.zxy;
          r3.xyz = r3.yzx * r10.zxy + -r11.xyz;
          r2.w = dot(r3.xyz, r3.xyz);
          r2.w = rsqrt(r2.w);
          r3.xyz = r3.xyz * r2.www;
          r2.w = r3.w * 2 + -1;
          r2.w = 3.14159274 * r2.w;
          sincos(r2.w, r11.x, r12.x);
          r10.xyz = r11.xxx * r10.xyz;
          r10.xyz = r3.xyz * r12.xxx + r10.xyz;
          r2.w = r3.w * 0.5 + 0.5;
          r2.w = r2.w * 65535 + 0.5;
          r2.w = (uint)r2.w;
          r3.xy = (int2)r2.ww & int2(255,0);
          r3.xy = (uint2)r3.xy;
          r3.x = 0.00392156886 * r3.x;
          r3.z = r3.y * 3.06372567e-005 + -1;
          r3.xy = r5.xx ? float2(0,0) : r3.xz;
          r10.w = r4.x;
          r3.z = 0;
          r9.xyzw = r2.zzzz ? r10.xwyz : r3.xzzz;
          r3.w = r10.w;
          r2.xy = r2.zz ? float2(0,0) : r3.yw;
          r4.x = r2.y;
        }
      }
      r8.x = r8.y;
    }
  }
  r1.xyzw = DeferredLightingBase__ProbeLightingTexture.Load(r1.xyz).xyzw;
  r3.xyz = r1.xyz / ExposureScale;
  r3.w = dot(r3.xyz, float3(0.212639004,0.715168655,0.0721923187));
  if (r6.y != 0) {
    r3.xyz = r8.xzw * r3.xyz;
    r10.xyzw = float4(0.318309873,0.318309873,0.318309873,0.0572957806) * r3.xyzw;
  } else {
    if (r6.x != 0) {
      r1.xy = saturate(r9.xy);
      r1.z = saturate(r4.x);
      r2.yzw = log2(r8.xzw);
      r11.xyz = r2.yzw * r1.yyy;
      r11.xyz = float3(-12.7799997,-12.7799997,-12.7799997) * r11.xyz;
      r2.yzw = r2.yzw * float3(-0.0199999996,-0.0199999996,-0.0199999996) + r11.xyz;
      r1.y = cmp(r1.x == 0.000000);
      r1.z = 1 + -r1.z;
      r11.xyz = r8.xzw * r1.zzz;
      r11.xyz = float3(0.318309873,0.318309873,0.318309873) * r11.xyz;
      r2.yzw = r2.yzw * -r1.xxx;
      r2.yzw = exp2(r2.yzw);
      r2.yzw = r2.yzw * r11.xyz;
      r2.yzw = float3(0.444444448,0.444444448,0.444444448) * r2.yzw;
      r11.xyz = r1.yyy ? r11.xyz : r2.yzw;
      r11.w = 0.180000007;
    } else {
      r1.x = cmp((int)r5.x == 2);
      if (r1.x != 0) {
        r12.xyz = float3(0.318309873,0.318309873,0.318309873) * r8.xzw;
        r12.w = 0.0572957806;
        r1.x = 1 + -r4.x;
        r11.xyzw = r12.xyzw * r1.xxxx;
      } else {
        r1.x = cmp((int)r5.x == 3);
        if (r1.x != 0) {
          r1.x = dot(r7.xyz, r7.xyz);
          r1.x = min(1, r1.x);
          r1.y = 0.0799999982 * r4.z;
          r1.x = 1 + -r1.x;
          r1.z = r1.x * r1.x;
          r1.z = r1.z * r1.z;
          r2.y = -r4.z * 0.0799999982 + 1;
          r1.z = r2.y * r1.z;
          r1.x = r1.z * r1.x + r1.y;
          r1.y = saturate(r4.y + r4.y);
          r12.w = r1.y * -r1.x + 1;
          r12.xyz = r12.www * r8.xzw;
          r11.xyzw = float4(0.318309873,0.318309873,0.318309873,0.0572957806) * r12.xyzw;
        } else {
          r1.x = cmp((int)r5.x == 5);
          if (r1.x != 0) {
            r12.xyz = float3(0.318309873,0.318309873,0.318309873) * r8.xzw;
            r12.w = 0.0572957806;
            r13.w = 1 + -r4.x;
            r12.xyzw = r13.wwww * r12.xyzw;
            r13.xyz = r12.xyz;
            r13.xyzw = float4(0.5,0.5,0.5,0.0286478903) * r13.xyzw;
            r1.x = 1 + -r9.y;
            r12.xyzw = r12.xyzw * r9.yyyy;
            r12.xyzw = float4(0.25,0.25,0.25,0.25) * r12.xyzw;
            r11.xyzw = r13.xyzw * r1.xxxx + r12.xyzw;
          } else {
            r1.x = cmp((int)r5.x == 8);
            r1.y = dot(r5.yzw, r7.xyz);
            r1.z = max(9.99999997e-007, abs(r1.y));
            r1.z = rcp(r1.z);
            r1.y = r1.y * r1.z;
            r1.y = cmp(r1.y == 0.000000);
            r1.y = r1.y ? 0 : 1;
            r2.yzw = float3(0.318309873,0.318309873,0.318309873) * r9.xzw;
            r12.w = 1 + -r4.x;
            r13.xyz = r12.www * r2.yzw;
            r13.w = 0.180000007;
            r12.xyz = r12.www * r8.xzw;
            r12.xyzw = float4(0.318309873,0.318309873,0.318309873,0.0572957806) * r12.xyzw;
            r13.xyzw = r1.yyyy * r13.xyzw + r12.xyzw;
            r14.xyz = r9.xxx * r8.xzw;
            r14.w = r9.x;
            r12.xyzw = r14.xyzw * float4(0.0795774683,0.0795774683,0.0795774683,0.0143239452) + r12.xyzw;
            r11.xyzw = r1.xxxx ? r13.xyzw : r12.xyzw;
          }
        }
      }
    }
    r10.xyzw = r11.xyzw * r3.xyzw;
  }
  if (r6.x != 0) {
    r9.xyzw = saturate(r9.xyzw);
    r4.xyz = saturate(r4.xyz);
    r1.x = r4.y * r4.y;
    r1.y = max(0.00100000005, r1.x);
    r2.y = r9.z * r9.z;
    r2.y = max(0.00100000005, r2.y);
    r2.z = dot(-r7.xyz, r5.yzw);
    r2.z = r2.z + r2.z;
    r3.xyz = r5.yzw * -r2.zzz + -r7.xyz;
    r2.z = dot(r5.yzw, r3.xyz);
    r2.z = -abs(r2.z) * abs(r2.z) + 1;
    r2.z = -r2.z * 0.444702327 + 1;
    r2.w = r9.x + r9.x;
    r2.z = sqrt(r2.z);
    r2.z = r2.w / r2.z;
    r6.xyw = log2(r8.xzw);
    r11.xyz = r6.xyw * r9.yyy;
    r11.xyz = float3(-12.7799997,-12.7799997,-12.7799997) * r11.xyz;
    r6.xyw = r6.xyw * float3(-0.0199999996,-0.0199999996,-0.0199999996) + r11.xyz;
    r2.w = cmp(r9.x == 0.000000);
    r3.w = r1.y * r1.y;
    r3.w = 2 / r3.w;
    r3.w = -2 + r3.w;
    r3.w = max(1.00000003e-022, r3.w);
    r3.w = sqrt(r3.w);
    r3.w = -10 / r3.w;
    r3.w = exp2(r3.w);
    r3.w = -0.000980000012 + r3.w;
    r3.w = saturate(1.00795019 * r3.w);
    r3.w = 1 + -r3.w;
    r7.w = SkyParaboloidTextureMaxMipIndex * r3.w;
    r8.y = DynamicCubeMapReflectionTextureMaxMipIndex * r3.w;
    r9.y = cmp(0.25 >= r1.y);
    if (r9.y != 0) {
      r9.y = cmp(r5.w >= 0.25);
      if (r9.y != 0) {
        r11.x = dot(r3.xyz, ViewMatrix._m00_m10_m20);
        r11.y = dot(r3.xyz, ViewMatrix._m01_m11_m21);
        r11.z = dot(r3.xyz, ViewMatrix._m02_m12_m22);
        r9.y = dot(r11.xyz, r11.xyz);
        r9.y = rsqrt(r9.y);
        r11.xyz = r11.xyz * r9.yyy;
        r0.w = 1;
        r12.x = dot(r0.xyzw, ViewMatrix._m00_m10_m20_m30);
        r12.y = dot(r0.xyzw, ViewMatrix._m01_m11_m21_m31);
        r12.z = dot(r0.xyzw, ViewMatrix._m02_m12_m22_m32);
        r13.x = dot(r5.yzw, ViewMatrix._m00_m10_m20);
        r13.y = dot(r5.yzw, ViewMatrix._m01_m11_m21);
        r13.z = dot(r5.yzw, ViewMatrix._m02_m12_m22);
        r9.y = -0.00999999978 * r12.z;
        r9.y = max(0.00100000005, r9.y);
        r13.xyz = r13.xyz * r9.yyy + r12.xyz;
        r9.y = r11.z * 1000 + r13.z;
        r9.y = cmp(-0.00999999978 < r9.y);
        r11.w = -0.00999999978 + -r13.z;
        r11.w = r11.w / r11.z;
        r9.y = r9.y ? r11.w : 1000;
        r11.xyz = r11.xyz * r9.yyy + r13.xyz;
        r13.w = 1;
        r12.y = dot(r13.xyzw, ProjectToPixelMatrix._m00_m10_m20_m30);
        r12.x = dot(r13.xyzw, ProjectToPixelMatrix._m01_m11_m21_m31);
        r9.y = dot(r13.xyzw, ProjectToPixelMatrix._m03_m13_m23_m33);
        r11.w = 1;
        r13.x = dot(r11.xyzw, ProjectToPixelMatrix._m00_m10_m20_m30);
        r13.y = dot(r11.xyzw, ProjectToPixelMatrix._m01_m11_m21_m31);
        r11.x = dot(r11.xyzw, ProjectToPixelMatrix._m03_m13_m23_m33);
        r9.y = 1 / r9.y;
        r11.x = 1 / r11.x;
        r11.yw = r12.xy * r9.yy;
        r14.xy = r13.xy * r11.xx;
        r12.w = r13.z * r9.y;
        r11.z = r11.z * r11.x;
        r14.zw = float2(-0.5,-0.5) + ViewportSize.yx;
        r15.xy = cmp(r14.zw < r14.yx);
        r15.zw = cmp(r14.yx < float2(0.5,0.5));
        r15.zw = (int2)r15.zw | (int2)r15.xy;
        r14.zw = r15.xy ? -r14.zw : float2(-0.5,-0.5);
        r14.zw = r13.yx * r11.xx + r14.zw;
        r13.xy = r13.yx * r11.xx + -r11.yw;
        r13.xy = r14.zw / r13.xy;
        r13.x = r15.z ? r13.x : 0;
        r13.y = max(r13.x, r13.y);
        r13.x = r15.w ? r13.y : r13.x;
        r13.yw = r12.yx * r9.yy + -r14.xy;
        r13.yw = r13.xx * r13.yw + r14.xy;
        r14.x = -r11.x + r9.y;
        r11.x = r13.x * r14.x + r11.x;
        r14.x = r13.z * r9.y + -r11.z;
        r11.z = r13.x * r14.x + r11.z;
        r14.xy = r12.yx * r9.yy + -r13.yw;
        r13.x = dot(r14.xy, r14.xy);
        r13.x = cmp(r13.x < 9.99999975e-005);
        r14.xy = r12.yx * r9.yy + float2(0.00999999978,0.00999999978);
        r14.xy = r13.xx ? r14.xy : r13.yw;
        r14.zw = -r12.yx * r9.yy + r14.xy;
        r12.x = cmp(abs(r14.z) < abs(r14.w));
        r11.yw = r12.xx ? r11.yw : r11.wy;
        r13.xyw = r12.xxx ? r14.ywz : r14.xzw;
        r12.y = cmp(0 < r13.y);
        r14.x = cmp(r13.y < 0);
        r12.y = (int)-r12.y + (int)r14.x;
        r14.x = (int)r12.y;
        r12.y = r14.x / r13.y;
        r14.y = r12.y * r13.w;
        r11.z = -r13.z * r9.y + r11.z;
        r11.x = r11.x + -r9.y;
        r11.xz = r11.xz * r12.yy;
        r12.y = r14.x * r13.x;
        r13.x = cmp(r13.z >= 99999.7969);
        r13.y = cmp(100000 >= r13.z);
        r13.x = r13.y ? r13.x : 0;
        r15.y = 1;
        r16.x = r12.w;
        r16.y = r9.y;
        r13.yw = float2(-1,-1);
        r17.xy = r11.yw;
        r14.z = 0;
        r14.w = r13.x;
        r18.y = r13.z;
        r15.z = r13.x;
        while (true) {
          r15.w = r17.x * r14.x;
          r15.w = cmp(r12.y >= r15.w);
          r17.z = cmp((int)r14.z < 100);
          r15.w = r15.w ? r17.z : 0;
          r17.z = ~(int)r15.z;
          r15.w = r15.w ? r17.z : 0;
          if (r15.w == 0) break;
          r16.xz = r11.zz * float2(5,2.5) + r16.xx;
          r16.yw = r11.xx * float2(5,2.5) + r16.yy;
          r18.x = r16.z / r16.w;
          r15.w = cmp(r18.x < r18.y);
          r16.zw = r15.ww ? r18.xy : r18.yx;
          r13.yw = r12.xx ? r17.yx : r17.xy;
          r17.zw = ViewportSize.zw * r13.yw;
          r15.x = SSR__SSRDepthTexture__TexObj__.SampleLevel(Viewport__DepthVPSampler__SampObj___s, r17.zw, 0).x;
          r15.w = dot(r15.xy, InvProjectionMatrix._m22_m32);
          r15.x = dot(r15.xy, InvProjectionMatrix._m23_m33);
          r15.x = -r15.w / r15.x;
          r15.w = cmp(-r15.x >= r16.z);
          r15.x = -0.200000003 + -r15.x;
          r15.x = cmp(r16.w >= r15.x);
          r15.z = r15.x ? r15.w : 0;
          r17.xy = r14.xy * float2(5,5) + r17.xy;
          r14.z = (int)r14.z + 1;
          r14.w = r15.z;
          r18.y = r18.x;
        }
        if (r14.w != 0) {
          if (GameIsPaused == 0) {
            r11.xy = (int2)r13.yw;
            r11.xy = max(int2(0,0), (int2)r11.xy);
            r11.zw = (int2)ViewportSize.xy;
            r11.zw = (int2)r11.zw + int2(-1,-1);
            r11.xy = min((int2)r11.xy, (int2)r11.zw);
            r11.zw = float2(0,0);
            r12.xy = SSR__MotionVectorTexture__TexObj__.Load(r11.xyw).xy;
            r13.xz = cmp(r12.xy != float2(0,0));
            r9.y = r13.z ? r13.x : 0;
            if (r9.y != 0) {
              r9.y = cmp(1 < r12.x);
              r13.x = -2 + r12.x;
              r12.x = r9.y ? r13.x : r12.x;
            } else {
              r11.z = SSR__SSRDepthTexture__TexObj__.Load(r11.xyz).x;
              r11.w = 1;
              r9.y = dot(r11.zw, InvProjectionMatrix._m22_m32);
              r11.z = dot(r11.zw, InvProjectionMatrix._m23_m33);
              r9.y = -r9.y / r11.z;
              r11.xy = (int2)r11.xy;
              r11.xy = r11.xy * ViewportSize.zw + float2(-0.5,-0.5);
              r11.xy = CameraNearPlaneSize.xy * r11.xy;
              r11.xy = float2(1,-1) * r11.xy;
              r9.y = r9.y / CameraDistances.near;
              r11.z = -CameraDistances.near;
              r11.xyz = r11.xyz * r9.yyy;
              r11.w = 1;
              r14.x = dot(r11.xyzw, ProjectionMatrix._m00_m10_m20_m30);
              r14.y = dot(r11.xyzw, ProjectionMatrix._m01_m11_m21_m31);
              r9.y = dot(r11.xyzw, ProjectionMatrix._m03_m13_m23_m33);
              r15.x = dot(r11.xyzw, CameraSpaceToPreviousProjectedSpace._m00_m10_m20_m30);
              r15.y = dot(r11.xyzw, CameraSpaceToPreviousProjectedSpace._m01_m11_m21_m31);
              r11.x = dot(r11.xyzw, CameraSpaceToPreviousProjectedSpace._m03_m13_m23_m33);
              r11.x = max(9.99999975e-005, r11.x);
              r11.xy = r15.xy / r11.xx;
              r11.zw = r14.xy / r9.yy;
              r11.xy = r11.zw + -r11.xy;
              r12.xw = float2(0.5,0.5) * r11.xy;
              r12.y = -r12.w;
            }
          } else {
            r12.xy = float2(0,0);
          }
          r11.xy = r13.yw * ViewportSize.zw + -r12.xy;
          r12.xy = ViewportSize.xy * r11.xy;
          r14.xy = (int2)r12.xy;
          r14.zw = float2(0,0);
          r12.x = SSR__SSRDepthTexture__TexObj__.Load(r14.xyz).x;
          r12.y = 1;
          r9.y = dot(r12.xy, InvProjectionMatrix._m22_m32);
          r12.x = dot(r12.xy, InvProjectionMatrix._m23_m33);
          r9.y = -r9.y / r12.x;
          r9.y = cmp(r12.z >= -r9.y);
          r12.x = ~(int)r9.y;
          r12.yz = v0.xy + -r13.yw;
          r12.y = dot(r12.yz, r12.yz);
          r12.y = sqrt(r12.y);
          r12.z = cmp(r12.y >= 350);
          r12.y = -350 + r12.y;
          r12.y = -r12.y * 0.00666666683 + 1;
          r12.y = r12.z ? r12.y : 1;
          r11.zw = float2(1,1) + -r11.xy;
          r13.xyzw = saturate(float4(10,10,10,10) * r11.xzyw);
          r11.z = r13.x * r13.y;
          r11.z = r11.z * r13.z;
          r11.z = r11.z * r13.w;
          r11.z = r12.y * r11.z;
          r11.w = cmp(0.136999995 < r1.y);
          r12.y = -r1.y * 4 + 1;
          r12.y = max(0, r12.y);
          r12.y = r12.y * r11.z;
          r11.z = r11.w ? r12.y : r11.z;
          r9.y = r9.y ? r11.z : 1;
        } else {
          r11.xy = float2(0,0);
          r9.y = 0;
          r12.x = 0;
        }
        if (r12.x == 0) {
          r11.z = cmp(0 < r9.y);
          if (r11.z != 0) {
            r3.w = SSRTextureMaxMipIndex * r3.w;
            r11.xyz = SSR__SSRTexture__TexObj__.SampleLevel(ColorClamp_s, r11.xy, r3.w).xyz;
          } else {
            r11.xyz = float3(0,0,0);
          }
        } else {
          r11.xyz = float3(0,0,0);
          r9.y = 0;
        }
      } else {
        r11.xyz = float3(0,0,0);
        r9.y = 0;
      }
    } else {
      r11.xyz = float3(0,0,0);
      r9.y = 0;
    }
    r3.w = cmp(0 < r9.y);
    if (r3.w != 0) {
      r11.xyz = r11.xyz / ExposureScale;
      r3.w = cmp(r9.y < 1);
      if (r3.w != 0) {
        if (UseOnlySkyReflection == 0) {
          r0.w = 1;
          r12.xyzw = float4(0,0,0,0);
          r3.w = 1;
          r13.x = 0;
          while (true) {
            r13.y = cmp((uint)r13.x >= 15);
            if (r13.y != 0) break;
            r13.y = (int)r13.x * 7;
            r14.x = dot(r0.xyzw, ReflectionVolumes[r13.x]._m00_m10_m20_m30);
            r14.y = dot(r0.xyzw, ReflectionVolumes[r13.x]._m01_m11_m21_m31);
            r14.z = dot(r0.xyzw, ReflectionVolumes[r13.x]._m02_m12_m22_m32);
            r15.xyz = cmp(r14.xyz >= float3(0,0,0));
            r15.xyz = r15.xyz ? ReflectionVolumes[r13.x].xyz : ReflectionVolumes[r13.x].xyz;
            r14.xyz = float3(1,1,1) + -abs(r14.xyz);
            r14.xyz = saturate(r14.xyz * r15.xyz);
            r13.z = r14.x * r14.y;
            r13.z = r13.z * r14.z;
            r13.w = cmp(0 < r13.z);
            if (r13.w != 0) {
              r14.x = dot(r3.xyz, ReflectionVolumes[r13.x]._m00_m10_m20);
              r14.y = dot(r3.xyz, ReflectionVolumes[r13.x]._m01_m11_m21);
              r14.z = dot(r3.xyz, ReflectionVolumes[r13.x]._m02_m12_m22);
              r13.z = ReflectionVolumes[r13.x] * r13.z;
              r14.w = ReflectionVolumes[r13.x];
              r14.xyzw = Viewport__DynamicCubeMapReflectionTextureArray.SampleLevel(ColorWrap_s, r14.xyzw, r8.y).xyzw;
              r14.xyzw = ReflectionVolumes[r13.x].xxxy * r14.xyzw;
              r13.y = min(r13.z, r3.w);
              r14.xyzw = r14.xyzw * r13.yyyy + r12.xyzw;
              r13.y = -r13.y + r3.w;
              r13.z = cmp(0 >= r13.y);
              if (r13.z != 0) {
                r12.xyzw = r14.xyzw;
                r3.w = r13.y;
                break;
              }
              r12.xyzw = r14.xyzw;
              r3.w = r13.y;
            }
            r13.x = (int)r13.x + 1;
          }
        } else {
          r12.xyzw = float4(0,0,0,0);
          r3.w = 1;
        }
        r12.w = r12.w + r3.w;
        r12.w = r12.w * r1.w;
        r13.x = cmp(0 < r12.w);
        if (r13.x != 0) {
          r13.x = r3.z + -abs(r3.z);
          r3.w = r3.w * r13.x + abs(r3.z);
          r3.w = r3.w * 2 + 2;
          r13.xy = float2(-1,1) / r3.ww;
          r13.xy = r13.xy * r3.yx;
          r13.xy = r13.xy * float2(0.949999988,0.949999988) + float2(0.5,0.5);
          r13.xyz = Viewport__SkyParaboloidTexture.SampleLevel(ColorClamp_s, r13.xy, r7.w).xyz;
          r14.xyz = saturate(r13.xyz);
          r13.xyz = UseOnlySkyReflection ? r14.xyz : r13.xyz;
          r13.xyz = r13.xyz / ExposureScale;
          r12.xyz = r13.xyz * r12.www + r12.xyz;
        }
        r9.y = saturate(r9.y);
        r13.xyz = -r12.xyz + r11.xyz;
        r11.xyz = r9.yyy * r13.xyz + r12.xyz;
      }
    } else {
      if (UseOnlySkyReflection == 0) {
        r0.w = 1;
        r11.xyzw = float4(0,0,0,0);
        r3.w = 1;
        r9.y = 0;
        while (true) {
          r12.x = cmp((uint)r9.y >= 15);
          if (r12.x != 0) break;
          r12.x = (int)r9.y * 7;
          r13.x = dot(r0.xyzw, ReflectionVolumes[r9.y]._m00_m10_m20_m30);
          r13.y = dot(r0.xyzw, ReflectionVolumes[r9.y]._m01_m11_m21_m31);
          r13.z = dot(r0.xyzw, ReflectionVolumes[r9.y]._m02_m12_m22_m32);
          r12.yzw = cmp(r13.xyz >= float3(0,0,0));
          r12.yzw = r12.yzw ? ReflectionVolumes[r9.y].xyz : ReflectionVolumes[r9.y].xyz;
          r13.xyz = float3(1,1,1) + -abs(r13.xyz);
          r12.yzw = saturate(r13.xyz * r12.yzw);
          r12.y = r12.y * r12.z;
          r12.y = r12.y * r12.w;
          r12.z = cmp(0 < r12.y);
          if (r12.z != 0) {
            r13.x = dot(r3.xyz, ReflectionVolumes[r9.y]._m00_m10_m20);
            r13.y = dot(r3.xyz, ReflectionVolumes[r9.y]._m01_m11_m21);
            r13.z = dot(r3.xyz, ReflectionVolumes[r9.y]._m02_m12_m22);
            r12.y = ReflectionVolumes[r9.y] * r12.y;
            r13.w = ReflectionVolumes[r9.y];
            r13.xyzw = Viewport__DynamicCubeMapReflectionTextureArray.SampleLevel(ColorWrap_s, r13.xyzw, r8.y).xyzw;
            r13.xyzw = ReflectionVolumes[r9.y].xxxy * r13.xyzw;
            r12.x = min(r12.y, r3.w);
            r13.xyzw = r13.xyzw * r12.xxxx + r11.xyzw;
            r12.x = -r12.x + r3.w;
            r12.y = cmp(0 >= r12.x);
            if (r12.y != 0) {
              r11.xyzw = r13.xyzw;
              r3.w = r12.x;
              break;
            }
            r11.xyzw = r13.xyzw;
            r3.w = r12.x;
          }
          r9.y = (int)r9.y + 1;
        }
      } else {
        r11.xyzw = float4(0,0,0,0);
        r3.w = 1;
      }
      r8.y = r11.w + r3.w;
      r8.y = r8.y * r1.w;
      r9.y = cmp(0 < r8.y);
      if (r9.y != 0) {
        r9.y = r3.z + -abs(r3.z);
        r3.w = r3.w * r9.y + abs(r3.z);
        r3.w = r3.w * 2 + 2;
        r12.xy = float2(-1,1) / r3.ww;
        r12.xy = r12.xy * r3.yx;
        r12.xy = r12.xy * float2(0.949999988,0.949999988) + float2(0.5,0.5);
        r12.xyz = Viewport__SkyParaboloidTexture.SampleLevel(ColorClamp_s, r12.xy, r7.w).xyz;
        r13.xyz = saturate(r12.xyz);
        r12.xyz = UseOnlySkyReflection ? r13.xyz : r12.xyz;
        r12.xyz = r12.xyz / ExposureScale;
        r11.xyz = r12.xyz * r8.yyy + r11.xyz;
      }
    }
    r3.w = 0.0799999982 * r4.z;
    r7.w = dot(r3.www, float3(0.333333343,0.333333343,0.333333343));
    r7.w = 50 * r7.w;
    r7.w = min(1, r7.w);
    r1.x = saturate(dot(r5.yzw, r7.xyz));
    r12.xy = Global__IBLBRDFTexture.SampleLevel(ColorClamp_s, r1.xy, 0).xy;
    r3.w = r3.w * r12.x + r12.y;
    r3.w = r3.w * r7.w;
    r11.xyz = r11.xyz * r3.www;
    r11.xyz = r11.xyz * r6.zzz;
    r1.y = r2.y + r1.y;
    r1.z = min(1, r1.y);
    r1.y = r1.z * r1.z;
    r1.y = 2 / r1.y;
    r1.y = -2 + r1.y;
    r1.y = max(1.00000003e-022, r1.y);
    r1.y = sqrt(r1.y);
    r1.y = -10 / r1.y;
    r1.y = exp2(r1.y);
    r1.y = -0.000980000012 + r1.y;
    r1.y = 1.00795019 * r1.y;
    r1.y = max(0, r1.y);
    r1.y = 1 + -r1.y;
    r2.y = SkyParaboloidTextureMaxMipIndex * r1.y;
    r3.w = DynamicCubeMapReflectionTextureMaxMipIndex * r1.y;
    r7.w = cmp(0.25 >= r1.z);
    if (r7.w != 0) {
      r7.w = cmp(r5.w >= 0.25);
      if (r7.w != 0) {
        r12.x = dot(r3.xyz, ViewMatrix._m00_m10_m20);
        r12.y = dot(r3.xyz, ViewMatrix._m01_m11_m21);
        r12.z = dot(r3.xyz, ViewMatrix._m02_m12_m22);
        r7.w = dot(r12.xyz, r12.xyz);
        r7.w = rsqrt(r7.w);
        r12.xyz = r12.xyz * r7.www;
        r0.w = 1;
        r13.x = dot(r0.xyzw, ViewMatrix._m00_m10_m20_m30);
        r13.y = dot(r0.xyzw, ViewMatrix._m01_m11_m21_m31);
        r13.z = dot(r0.xyzw, ViewMatrix._m02_m12_m22_m32);
        r14.x = dot(r5.yzw, ViewMatrix._m00_m10_m20);
        r14.y = dot(r5.yzw, ViewMatrix._m01_m11_m21);
        r14.z = dot(r5.yzw, ViewMatrix._m02_m12_m22);
        r7.w = -0.00999999978 * r13.z;
        r7.w = max(0.00100000005, r7.w);
        r14.xyz = r14.xyz * r7.www + r13.xyz;
        r7.w = r12.z * 1000 + r14.z;
        r7.w = cmp(-0.00999999978 < r7.w);
        r8.y = -0.00999999978 + -r14.z;
        r8.y = r8.y / r12.z;
        r7.w = r7.w ? r8.y : 1000;
        r12.xyz = r12.xyz * r7.www + r14.xyz;
        r14.w = 1;
        r13.y = dot(r14.xyzw, ProjectToPixelMatrix._m00_m10_m20_m30);
        r13.x = dot(r14.xyzw, ProjectToPixelMatrix._m01_m11_m21_m31);
        r7.w = dot(r14.xyzw, ProjectToPixelMatrix._m03_m13_m23_m33);
        r12.w = 1;
        r14.x = dot(r12.xyzw, ProjectToPixelMatrix._m00_m10_m20_m30);
        r14.y = dot(r12.xyzw, ProjectToPixelMatrix._m01_m11_m21_m31);
        r8.y = dot(r12.xyzw, ProjectToPixelMatrix._m03_m13_m23_m33);
        r7.w = 1 / r7.w;
        r8.y = 1 / r8.y;
        r12.xy = r13.xy * r7.ww;
        r15.xy = r14.xy * r8.yy;
        r9.y = r14.z * r7.w;
        r11.w = r12.z * r8.y;
        r12.zw = float2(-0.5,-0.5) + ViewportSize.yx;
        r15.zw = cmp(r12.zw < r15.yx);
        r16.xy = cmp(r15.yx < float2(0.5,0.5));
        r16.xy = (int2)r15.zw | (int2)r16.xy;
        r12.zw = r15.zw ? -r12.zw : float2(-0.5,-0.5);
        r12.zw = r14.yx * r8.yy + r12.zw;
        r14.xy = r14.yx * r8.yy + -r12.xy;
        r12.zw = r12.zw / r14.xy;
        r12.z = r16.x ? r12.z : 0;
        r12.w = max(r12.z, r12.w);
        r12.z = r16.y ? r12.w : r12.z;
        r14.xy = r13.yx * r7.ww + -r15.xy;
        r14.xy = r12.zz * r14.xy + r15.xy;
        r12.w = -r8.y + r7.w;
        r8.y = r12.z * r12.w + r8.y;
        r12.w = r14.z * r7.w + -r11.w;
        r11.w = r12.z * r12.w + r11.w;
        r12.zw = r13.yx * r7.ww + -r14.xy;
        r12.z = dot(r12.zw, r12.zw);
        r12.z = cmp(r12.z < 9.99999975e-005);
        r15.xy = r13.yx * r7.ww + float2(0.00999999978,0.00999999978);
        r15.xy = r12.zz ? r15.xy : r14.xy;
        r15.zw = -r13.yx * r7.ww + r15.xy;
        r12.z = cmp(abs(r15.z) < abs(r15.w));
        r12.xy = r12.zz ? r12.xy : r12.yx;
        r13.xyw = r12.zzz ? r15.ywz : r15.xzw;
        r12.w = cmp(0 < r13.y);
        r14.x = cmp(r13.y < 0);
        r12.w = (int)-r12.w + (int)r14.x;
        r14.x = (int)r12.w;
        r12.w = r14.x / r13.y;
        r14.y = r12.w * r13.w;
        r11.w = -r14.z * r7.w + r11.w;
        r11.w = r11.w * r12.w;
        r8.y = r8.y + -r7.w;
        r8.y = r8.y * r12.w;
        r12.w = r14.x * r13.x;
        r13.x = cmp(r14.z >= 99999.7969);
        r13.y = cmp(100000 >= r14.z);
        r13.x = r13.y ? r13.x : 0;
        r15.y = 1;
        r16.x = r9.y;
        r16.y = r7.w;
        r13.yw = float2(-1,-1);
        r17.xy = r12.xy;
        r14.w = 0;
        r18.y = r14.z;
        r15.zw = r13.xx;
        while (true) {
          r17.z = r17.x * r14.x;
          r17.z = cmp(r12.w >= r17.z);
          r17.w = cmp((int)r14.w < 100);
          r17.z = r17.w ? r17.z : 0;
          r17.w = ~(int)r15.w;
          r17.z = r17.w ? r17.z : 0;
          if (r17.z == 0) break;
          r16.xz = r11.ww * float2(5,2.5) + r16.xx;
          r16.yw = r8.yy * float2(5,2.5) + r16.yy;
          r18.x = r16.z / r16.w;
          r16.z = cmp(r18.x < r18.y);
          r16.zw = r16.zz ? r18.xy : r18.yx;
          r13.yw = r12.zz ? r17.yx : r17.xy;
          r17.zw = ViewportSize.zw * r13.yw;
          r15.x = SSR__SSRDepthTexture__TexObj__.SampleLevel(Viewport__DepthVPSampler__SampObj___s, r17.zw, 0).x;
          r17.z = dot(r15.xy, InvProjectionMatrix._m22_m32);
          r15.x = dot(r15.xy, InvProjectionMatrix._m23_m33);
          r15.x = -r17.z / r15.x;
          r16.z = cmp(-r15.x >= r16.z);
          r15.x = -0.200000003 + -r15.x;
          r15.x = cmp(r16.w >= r15.x);
          r15.w = r15.x ? r16.z : 0;
          r17.xy = r14.xy * float2(5,5) + r17.xy;
          r14.w = (int)r14.w + 1;
          r15.z = r15.w;
          r18.y = r18.x;
        }
        if (r15.z != 0) {
          if (GameIsPaused == 0) {
            r12.xy = (int2)r13.yw;
            r12.xy = max(int2(0,0), (int2)r12.xy);
            r12.zw = (int2)ViewportSize.xy;
            r12.zw = (int2)r12.zw + int2(-1,-1);
            r12.xy = min((int2)r12.xy, (int2)r12.zw);
            r12.zw = float2(0,0);
            r14.xy = SSR__MotionVectorTexture__TexObj__.Load(r12.xyw).xy;
            r15.xy = cmp(r14.xy != float2(0,0));
            r7.w = r15.y ? r15.x : 0;
            if (r7.w != 0) {
              r7.w = cmp(1 < r14.x);
              r8.y = -2 + r14.x;
              r14.x = r7.w ? r8.y : r14.x;
            } else {
              r12.z = SSR__SSRDepthTexture__TexObj__.Load(r12.xyz).x;
              r12.w = 1;
              r7.w = dot(r12.zw, InvProjectionMatrix._m22_m32);
              r8.y = dot(r12.zw, InvProjectionMatrix._m23_m33);
              r7.w = -r7.w / r8.y;
              r12.xy = (int2)r12.xy;
              r12.xy = r12.xy * ViewportSize.zw + float2(-0.5,-0.5);
              r12.xy = CameraNearPlaneSize.xy * r12.xy;
              r12.xy = float2(1,-1) * r12.xy;
              r7.w = r7.w / CameraDistances.near;
              r12.z = -CameraDistances.near;
              r12.xyz = r12.xyz * r7.www;
              r12.w = 1;
              r15.x = dot(r12.xyzw, ProjectionMatrix._m00_m10_m20_m30);
              r15.y = dot(r12.xyzw, ProjectionMatrix._m01_m11_m21_m31);
              r7.w = dot(r12.xyzw, ProjectionMatrix._m03_m13_m23_m33);
              r16.x = dot(r12.xyzw, CameraSpaceToPreviousProjectedSpace._m00_m10_m20_m30);
              r16.y = dot(r12.xyzw, CameraSpaceToPreviousProjectedSpace._m01_m11_m21_m31);
              r8.y = dot(r12.xyzw, CameraSpaceToPreviousProjectedSpace._m03_m13_m23_m33);
              r8.y = max(9.99999975e-005, r8.y);
              r12.xy = r16.xy / r8.yy;
              r12.zw = r15.xy / r7.ww;
              r12.xy = r12.zw + -r12.xy;
              r14.xz = float2(0.5,0.5) * r12.xy;
              r14.y = -r14.z;
            }
          } else {
            r14.xy = float2(0,0);
          }
          r12.xy = r13.yw * ViewportSize.zw + -r14.xy;
          r14.xy = ViewportSize.xy * r12.xy;
          r14.xy = (int2)r14.xy;
          r14.zw = float2(0,0);
          r14.x = SSR__SSRDepthTexture__TexObj__.Load(r14.xyz).x;
          r14.y = 1;
          r7.w = dot(r14.xy, InvProjectionMatrix._m22_m32);
          r8.y = dot(r14.xy, InvProjectionMatrix._m23_m33);
          r7.w = -r7.w / r8.y;
          r7.w = cmp(r13.z >= -r7.w);
          r8.y = ~(int)r7.w;
          r13.xy = v0.xy + -r13.yw;
          r9.y = dot(r13.xy, r13.xy);
          r9.y = sqrt(r9.y);
          r11.w = cmp(r9.y >= 350);
          r9.y = -350 + r9.y;
          r9.y = -r9.y * 0.00666666683 + 1;
          r9.y = r11.w ? r9.y : 1;
          r12.zw = float2(1,1) + -r12.xy;
          r13.xyzw = saturate(float4(10,10,10,10) * r12.xzyw);
          r11.w = r13.x * r13.y;
          r11.w = r11.w * r13.z;
          r11.w = r11.w * r13.w;
          r9.y = r11.w * r9.y;
          r11.w = cmp(0.136999995 < r1.z);
          r12.z = -r1.z * 4 + 1;
          r12.z = max(0, r12.z);
          r12.z = r12.z * r9.y;
          r9.y = r11.w ? r12.z : r9.y;
          r7.w = r7.w ? r9.y : 1;
        } else {
          r12.xy = float2(0,0);
          r7.w = 0;
          r8.y = 0;
        }
        if (r8.y == 0) {
          r8.y = cmp(0 < r7.w);
          if (r8.y != 0) {
            r1.y = SSRTextureMaxMipIndex * r1.y;
            r12.xyz = SSR__SSRTexture__TexObj__.SampleLevel(ColorClamp_s, r12.xy, r1.y).xyz;
          } else {
            r12.xyz = float3(0,0,0);
          }
        } else {
          r12.xyz = float3(0,0,0);
          r7.w = 0;
        }
      } else {
        r12.xyz = float3(0,0,0);
        r7.w = 0;
      }
    } else {
      r12.xyz = float3(0,0,0);
      r7.w = 0;
    }
    r1.y = cmp(0 < r7.w);
    if (r1.y != 0) {
      r12.xyz = r12.xyz / ExposureScale;
      r1.y = cmp(r7.w < 1);
      if (r1.y != 0) {
        if (UseOnlySkyReflection == 0) {
          r0.w = 1;
          r13.xyzw = float4(0,0,0,0);
          r1.y = 1;
          r8.y = 0;
          while (true) {
            r9.y = cmp((uint)r8.y >= 15);
            if (r9.y != 0) break;
            r9.y = (int)r8.y * 7;
            r14.x = dot(r0.xyzw, ReflectionVolumes[r8.y]._m00_m10_m20_m30);
            r14.y = dot(r0.xyzw, ReflectionVolumes[r8.y]._m01_m11_m21_m31);
            r14.z = dot(r0.xyzw, ReflectionVolumes[r8.y]._m02_m12_m22_m32);
            r15.xyz = cmp(r14.xyz >= float3(0,0,0));
            r15.xyz = r15.xyz ? ReflectionVolumes[r8.y].xyz : ReflectionVolumes[r8.y].xyz;
            r14.xyz = float3(1,1,1) + -abs(r14.xyz);
            r14.xyz = saturate(r14.xyz * r15.xyz);
            r11.w = r14.x * r14.y;
            r11.w = r11.w * r14.z;
            r14.x = cmp(0 < r11.w);
            if (r14.x != 0) {
              r14.x = dot(r3.xyz, ReflectionVolumes[r8.y]._m00_m10_m20);
              r14.y = dot(r3.xyz, ReflectionVolumes[r8.y]._m01_m11_m21);
              r14.z = dot(r3.xyz, ReflectionVolumes[r8.y]._m02_m12_m22);
              r11.w = ReflectionVolumes[r8.y] * r11.w;
              r14.w = ReflectionVolumes[r8.y];
              r14.xyzw = Viewport__DynamicCubeMapReflectionTextureArray.SampleLevel(ColorWrap_s, r14.xyzw, r3.w).xyzw;
              r14.xyzw = ReflectionVolumes[r8.y].xxxy * r14.xyzw;
              r9.y = min(r11.w, r1.y);
              r14.xyzw = r14.xyzw * r9.yyyy + r13.xyzw;
              r9.y = -r9.y + r1.y;
              r11.w = cmp(0 >= r9.y);
              if (r11.w != 0) {
                r13.xyzw = r14.xyzw;
                r1.y = r9.y;
                break;
              }
              r13.xyzw = r14.xyzw;
              r1.y = r9.y;
            }
            r8.y = (int)r8.y + 1;
          }
        } else {
          r13.xyzw = float4(0,0,0,0);
          r1.y = 1;
        }
        r8.y = r13.w + r1.y;
        r8.y = r8.y * r1.w;
        r9.y = cmp(0 < r8.y);
        if (r9.y != 0) {
          r9.y = r3.z + -abs(r3.z);
          r1.y = r1.y * r9.y + abs(r3.z);
          r1.y = r1.y * 2 + 2;
          r14.xy = float2(-1,1) / r1.yy;
          r14.xy = r14.xy * r3.yx;
          r14.xy = r14.xy * float2(0.949999988,0.949999988) + float2(0.5,0.5);
          r14.xyz = Viewport__SkyParaboloidTexture.SampleLevel(ColorClamp_s, r14.xy, r2.y).xyz;
          r15.xyz = saturate(r14.xyz);
          r14.xyz = UseOnlySkyReflection ? r15.xyz : r14.xyz;
          r14.xyz = r14.xyz / ExposureScale;
          r13.xyz = r14.xyz * r8.yyy + r13.xyz;
        }
        r7.w = saturate(r7.w);
        r14.xyz = -r13.xyz + r12.xyz;
        r12.xyz = r7.www * r14.xyz + r13.xyz;
      }
    } else {
      if (UseOnlySkyReflection == 0) {
        r0.w = 1;
        r12.xyzw = float4(0,0,0,0);
        r1.y = 1;
        r7.w = 0;
        while (true) {
          r8.y = cmp((uint)r7.w >= 15);
          if (r8.y != 0) break;
          r8.y = (int)r7.w * 7;
          r13.x = dot(r0.xyzw, ReflectionVolumes[r7.w]._m00_m10_m20_m30);
          r13.y = dot(r0.xyzw, ReflectionVolumes[r7.w]._m01_m11_m21_m31);
          r13.z = dot(r0.xyzw, ReflectionVolumes[r7.w]._m02_m12_m22_m32);
          r14.xyz = cmp(r13.xyz >= float3(0,0,0));
          r14.xyz = r14.xyz ? ReflectionVolumes[r7.w].xyz : ReflectionVolumes[r7.w].xyz;
          r13.xyz = float3(1,1,1) + -abs(r13.xyz);
          r13.xyz = saturate(r13.xyz * r14.xyz);
          r9.y = r13.x * r13.y;
          r9.y = r9.y * r13.z;
          r11.w = cmp(0 < r9.y);
          if (r11.w != 0) {
            r13.x = dot(r3.xyz, ReflectionVolumes[r7.w]._m00_m10_m20);
            r13.y = dot(r3.xyz, ReflectionVolumes[r7.w]._m01_m11_m21);
            r13.z = dot(r3.xyz, ReflectionVolumes[r7.w]._m02_m12_m22);
            r9.y = ReflectionVolumes[r7.w] * r9.y;
            r13.w = ReflectionVolumes[r7.w];
            r13.xyzw = Viewport__DynamicCubeMapReflectionTextureArray.SampleLevel(ColorWrap_s, r13.xyzw, r3.w).xyzw;
            r13.xyzw = ReflectionVolumes[r7.w].xxxy * r13.xyzw;
            r8.y = min(r9.y, r1.y);
            r13.xyzw = r13.xyzw * r8.yyyy + r12.xyzw;
            r8.y = -r8.y + r1.y;
            r9.y = cmp(0 >= r8.y);
            if (r9.y != 0) {
              r12.xyzw = r13.xyzw;
              r1.y = r8.y;
              break;
            }
            r12.xyzw = r13.xyzw;
            r1.y = r8.y;
          }
          r7.w = (int)r7.w + 1;
        }
      } else {
        r12.xyzw = float4(0,0,0,0);
        r1.y = 1;
      }
      r3.w = r12.w + r1.y;
      r3.w = r3.w * r1.w;
      r7.w = cmp(0 < r3.w);
      if (r7.w != 0) {
        r7.w = r3.z + -abs(r3.z);
        r1.y = r1.y * r7.w + abs(r3.z);
        r1.y = r1.y * 2 + 2;
        r13.xy = float2(-1,1) / r1.yy;
        r3.xy = r13.xy * r3.yx;
        r3.xy = r3.xy * float2(0.949999988,0.949999988) + float2(0.5,0.5);
        r3.xyz = Viewport__SkyParaboloidTexture.SampleLevel(ColorClamp_s, r3.xy, r2.y).xyz;
        r13.xyz = saturate(r3.xyz);
        r3.xyz = UseOnlySkyReflection ? r13.xyz : r3.xyz;
        r3.xyz = r3.xyz / ExposureScale;
        r12.xyz = r3.xyz * r3.www + r12.xyz;
      }
    }
    r1.y = 0.0799999982 * r9.w;
    r3.xyz = -r9.www * float3(0.0799999982,0.0799999982,0.0799999982) + r8.xzw;
    r3.xyz = r4.xxx * r3.xyz + r1.yyy;
    r1.y = dot(r3.xyz, float3(0.333333343,0.333333343,0.333333343));
    r1.y = saturate(50 * r1.y);
    r1.xz = Global__IBLBRDFTexture.SampleLevel(ColorClamp_s, r1.xz, 0).xy;
    r3.xyz = r3.xyz * r1.xxx + r1.zzz;
    r1.xyz = r3.xyz * r1.yyy;
    r1.xyz = r12.xyz * r1.xyz;
    r1.xyz = r1.xyz * r6.zzz;
    r3.xyz = -r6.xyw * r2.zzz;
    r3.xyz = exp2(r3.xyz);
    r3.xyz = r1.xyz * r3.xyz + r11.xyz;
    r1.xyz = r2.www ? r1.xyz : r3.xyz;
    r2.y = dot(r1.xyz, float3(0.212639004,0.715168655,0.0721923187));
  } else {
    r2.z = cmp((int)r5.x == 5);
    if (r2.z != 0) {
      r2.z = dot(-r7.xyz, r5.yzw);
      r2.z = r2.z + r2.z;
      r3.xyz = r5.yzw * -r2.zzz + -r7.xyz;
      r2.z = dot(r3.xyz, r9.xzw);
      r2.w = dot(r3.xyz, r5.yzw);
      r3.xyz = r5.yzw * r2.www;
      r3.xyz = r9.xzw * r2.zzz + r3.xyz;
      r2.z = dot(r9.xzw, r7.xyz);
      r2.z = -r2.z * r2.z + 1;
      r2.w = r4.y * r4.y;
      r2.w = 2 / r2.w;
      r2.w = -2 + r2.w;
      r2.w = max(1.00000003e-022, r2.w);
      r2.zw = sqrt(r2.zw);
      r2.w = -10 / r2.w;
      r2.w = exp2(r2.w);
      r2.w = -0.000980000012 + r2.w;
      r2.w = saturate(1.00795019 * r2.w);
      r2.w = 1 + -r2.w;
      if (UseOnlySkyReflection == 0) {
        r3.w = DynamicCubeMapReflectionTextureMaxMipIndex * r2.w;
        r0.w = 1;
        r9.xyzw = float4(0,0,0,0);
        r5.x = 1;
        r6.x = 0;
        while (true) {
          r6.y = cmp((uint)r6.x >= 15);
          if (r6.y != 0) break;
          r6.y = (int)r6.x * 7;
          r11.x = dot(r0.xyzw, ReflectionVolumes[r6.x]._m00_m10_m20_m30);
          r11.y = dot(r0.xyzw, ReflectionVolumes[r6.x]._m01_m11_m21_m31);
          r11.z = dot(r0.xyzw, ReflectionVolumes[r6.x]._m02_m12_m22_m32);
          r12.xyz = cmp(r11.xyz >= float3(0,0,0));
          r12.xyz = r12.xyz ? ReflectionVolumes[r6.x].xyz : ReflectionVolumes[r6.x].xyz;
          r11.xyz = float3(1,1,1) + -abs(r11.xyz);
          r11.xyz = saturate(r11.xyz * r12.xyz);
          r6.w = r11.x * r11.y;
          r6.w = r6.w * r11.z;
          r7.w = cmp(0 < r6.w);
          if (r7.w != 0) {
            r11.x = dot(r3.xyz, ReflectionVolumes[r6.x]._m00_m10_m20);
            r11.y = dot(r3.xyz, ReflectionVolumes[r6.x]._m01_m11_m21);
            r11.z = dot(r3.xyz, ReflectionVolumes[r6.x]._m02_m12_m22);
            r6.w = ReflectionVolumes[r6.x] * r6.w;
            r11.w = ReflectionVolumes[r6.x];
            r11.xyzw = Viewport__DynamicCubeMapReflectionTextureArray.SampleLevel(ColorWrap_s, r11.xyzw, r3.w).xyzw;
            r11.xyzw = ReflectionVolumes[r6.x].xxxy * r11.xyzw;
            r6.y = min(r6.w, r5.x);
            r11.xyzw = r11.xyzw * r6.yyyy + r9.xyzw;
            r6.y = -r6.y + r5.x;
            r6.w = cmp(0 >= r6.y);
            if (r6.w != 0) {
              r9.xyzw = r11.xyzw;
              r5.x = r6.y;
              break;
            }
            r9.xyzw = r11.xyzw;
            r5.x = r6.y;
          }
          r6.x = (int)r6.x + 1;
        }
      } else {
        r9.xyzw = float4(0,0,0,0);
        r5.x = 1;
      }
      r3.w = r9.w + r5.x;
      r3.w = r3.w * r1.w;
      r6.x = cmp(0 < r3.w);
      if (r6.x != 0) {
        r2.w = SkyParaboloidTextureMaxMipIndex * r2.w;
        r6.x = r3.z + -abs(r3.z);
        r3.z = r5.x * r6.x + abs(r3.z);
        r3.z = r3.z * 2 + 2;
        r6.xy = float2(-1,1) / r3.zz;
        r3.xy = r6.xy * r3.yx;
        r3.xy = r3.xy * float2(0.949999988,0.949999988) + float2(0.5,0.5);
        r3.xyz = Viewport__SkyParaboloidTexture.SampleLevel(ColorClamp_s, r3.xy, r2.w).xyz;
        r6.xyw = saturate(r3.xyz);
        r3.xyz = UseOnlySkyReflection ? r6.xyw : r3.xyz;
        r3.xyz = r3.xyz / ExposureScale;
        r9.xyz = r3.xyz * r3.www + r9.xyz;
      }
      r3.xyz = sqrt(r8.xzw);
      r2.w = dot(r8.xzw, float3(0.212639004,0.715168655,0.0721923187));
      r3.xyz = r3.xyz * float3(4,4,4) + -r6.zzz;
      r3.xyz = r2.www * r3.xyz + r6.zzz;
      r3.xyz = r9.xyz * r3.xyz;
      r2.w = 0.0799999982 * r4.z;
      r6.xyw = -r4.zzz * float3(0.0799999982,0.0799999982,0.0799999982) + r8.xzw;
      r6.xyw = r4.xxx * r6.xyw + r2.www;
      r2.w = dot(r6.xyw, float3(0.333333343,0.333333343,0.333333343));
      r2.w = saturate(50 * r2.w);
      r4.w = saturate(dot(r5.yzw, r7.xyz));
      r9.xy = Global__IBLBRDFTexture.SampleLevel(ColorClamp_s, r4.wy, 0).xy;
      r6.xyw = r6.xyw * r9.xxx + r9.yyy;
      r6.xyw = r6.xyw * r2.www;
      r6.xyw = r6.xyw * r2.zzz;
      r1.xyz = r6.xyw * r3.xyz;
      r2.y = dot(r1.xyz, float3(0.212639004,0.715168655,0.0721923187));
    } else {
      r2.x = saturate(r4.y + r2.x);
      r2.z = dot(-r7.xyz, r5.yzw);
      r2.z = r2.z + r2.z;
      r3.xyz = r5.yzw * -r2.zzz + -r7.xyz;
      r2.z = r2.x * r2.x;
      r2.z = 2 / r2.z;
      r2.z = -2 + r2.z;
      r2.z = max(1.00000003e-022, r2.z);
      r2.z = sqrt(r2.z);
      r2.z = -10 / r2.z;
      r2.z = exp2(r2.z);
      r2.z = -0.000980000012 + r2.z;
      r2.z = saturate(1.00795019 * r2.z);
      r2.z = 1 + -r2.z;
      r2.w = SkyParaboloidTextureMaxMipIndex * r2.z;
      r3.w = DynamicCubeMapReflectionTextureMaxMipIndex * r2.z;
      r5.x = cmp(0.25 >= r2.x);
      if (r5.x != 0) {
        r5.x = cmp(r5.w >= 0.25);
        if (r5.x != 0) {
          r9.x = dot(r3.xyz, ViewMatrix._m00_m10_m20);
          r9.y = dot(r3.xyz, ViewMatrix._m01_m11_m21);
          r9.z = dot(r3.xyz, ViewMatrix._m02_m12_m22);
          r5.x = dot(r9.xyz, r9.xyz);
          r5.x = rsqrt(r5.x);
          r6.xyw = r9.xyz * r5.xxx;
          r0.w = 1;
          r9.x = dot(r0.xyzw, ViewMatrix._m00_m10_m20_m30);
          r9.y = dot(r0.xyzw, ViewMatrix._m01_m11_m21_m31);
          r9.z = dot(r0.xyzw, ViewMatrix._m02_m12_m22_m32);
          r11.x = dot(r5.yzw, ViewMatrix._m00_m10_m20);
          r11.y = dot(r5.yzw, ViewMatrix._m01_m11_m21);
          r11.z = dot(r5.yzw, ViewMatrix._m02_m12_m22);
          r5.x = -0.00999999978 * r9.z;
          r5.x = max(0.00100000005, r5.x);
          r11.xyz = r11.xyz * r5.xxx + r9.xyz;
          r5.x = r6.w * 1000 + r11.z;
          r5.x = cmp(-0.00999999978 < r5.x);
          r7.w = -0.00999999978 + -r11.z;
          r7.w = r7.w / r6.w;
          r5.x = r5.x ? r7.w : 1000;
          r12.xyz = r6.xyw * r5.xxx + r11.xyz;
          r11.w = 1;
          r6.y = dot(r11.xyzw, ProjectToPixelMatrix._m00_m10_m20_m30);
          r6.x = dot(r11.xyzw, ProjectToPixelMatrix._m01_m11_m21_m31);
          r5.x = dot(r11.xyzw, ProjectToPixelMatrix._m03_m13_m23_m33);
          r12.w = 1;
          r9.x = dot(r12.xyzw, ProjectToPixelMatrix._m00_m10_m20_m30);
          r9.y = dot(r12.xyzw, ProjectToPixelMatrix._m01_m11_m21_m31);
          r6.w = dot(r12.xyzw, ProjectToPixelMatrix._m03_m13_m23_m33);
          r5.x = 1 / r5.x;
          r6.w = 1 / r6.w;
          r11.xy = r6.xy * r5.xx;
          r12.xy = r9.xy * r6.ww;
          r7.w = r11.z * r5.x;
          r8.y = r12.z * r6.w;
          r12.zw = float2(-0.5,-0.5) + ViewportSize.yx;
          r13.xy = cmp(r12.zw < r12.yx);
          r13.zw = cmp(r12.yx < float2(0.5,0.5));
          r13.zw = (int2)r13.zw | (int2)r13.xy;
          r12.zw = r13.xy ? -r12.zw : float2(-0.5,-0.5);
          r12.zw = r9.yx * r6.ww + r12.zw;
          r9.xy = r9.yx * r6.ww + -r11.xy;
          r9.xy = r12.zw / r9.xy;
          r9.x = r13.z ? r9.x : 0;
          r9.y = max(r9.x, r9.y);
          r9.x = r13.w ? r9.y : r9.x;
          r9.yw = r6.yx * r5.xx + -r12.xy;
          r9.yw = r9.xx * r9.yw + r12.xy;
          r11.w = -r6.w + r5.x;
          r6.w = r9.x * r11.w + r6.w;
          r11.w = r11.z * r5.x + -r8.y;
          r8.y = r9.x * r11.w + r8.y;
          r12.xy = r6.yx * r5.xx + -r9.yw;
          r9.x = dot(r12.xy, r12.xy);
          r9.x = cmp(r9.x < 9.99999975e-005);
          r12.xy = r6.yx * r5.xx + float2(0.00999999978,0.00999999978);
          r12.xy = r9.xx ? r12.xy : r9.yw;
          r12.zw = -r6.yx * r5.xx + r12.xy;
          r6.x = cmp(abs(r12.z) < abs(r12.w));
          r9.xy = r6.xx ? r11.xy : r11.yx;
          r11.xyw = r6.xxx ? r12.ywz : r12.xzw;
          r6.y = cmp(0 < r11.y);
          r9.w = cmp(r11.y < 0);
          r6.y = (int)-r6.y + (int)r9.w;
          r12.x = (int)r6.y;
          r6.y = r12.x / r11.y;
          r12.y = r6.y * r11.w;
          r8.y = -r11.z * r5.x + r8.y;
          r8.y = r8.y * r6.y;
          r6.w = r6.w + -r5.x;
          r6.y = r6.w * r6.y;
          r6.w = r12.x * r11.x;
          r9.w = cmp(r11.z >= 99999.7969);
          r11.x = cmp(100000 >= r11.z);
          r9.w = r9.w ? r11.x : 0;
          r11.y = 1;
          r13.x = r7.w;
          r13.y = r5.x;
          r12.zw = float2(-1,-1);
          r11.w = 0;
          r15.y = r11.z;
          r14.xyzw = r9.xyww;
          while (true) {
            r15.z = r14.x * r12.x;
            r15.z = cmp(r6.w >= r15.z);
            r15.w = cmp((int)r11.w < 100);
            r15.z = r15.w ? r15.z : 0;
            r15.w = ~(int)r14.w;
            r15.z = r15.w ? r15.z : 0;
            if (r15.z == 0) break;
            r13.xz = r8.yy * float2(5,2.5) + r13.xx;
            r13.yw = r6.yy * float2(5,2.5) + r13.yy;
            r15.x = r13.z / r13.w;
            r13.z = cmp(r15.x < r15.y);
            r13.zw = r13.zz ? r15.xy : r15.yx;
            r12.zw = r6.xx ? r14.yx : r14.xy;
            r15.zw = ViewportSize.zw * r12.zw;
            r11.x = SSR__SSRDepthTexture__TexObj__.SampleLevel(Viewport__DepthVPSampler__SampObj___s, r15.zw, 0).x;
            r15.z = dot(r11.xy, InvProjectionMatrix._m22_m32);
            r11.x = dot(r11.xy, InvProjectionMatrix._m23_m33);
            r11.x = -r15.z / r11.x;
            r13.z = cmp(-r11.x >= r13.z);
            r11.x = -0.200000003 + -r11.x;
            r11.x = cmp(r13.w >= r11.x);
            r14.w = r11.x ? r13.z : 0;
            r14.xy = r12.xy * float2(5,5) + r14.xy;
            r11.w = (int)r11.w + 1;
            r14.xyz = r14.xyw;
            r15.y = r15.x;
          }
          if (r14.z != 0) {
            if (GameIsPaused == 0) {
              r6.xy = (int2)r12.zw;
              r6.xy = max(int2(0,0), (int2)r6.xy);
              r9.xy = (int2)ViewportSize.xy;
              r9.xy = (int2)r9.xy + int2(-1,-1);
              r11.xy = min((int2)r9.xy, (int2)r6.xy);
              r11.zw = float2(0,0);
              r6.xy = SSR__MotionVectorTexture__TexObj__.Load(r11.xyw).xy;
              r9.xy = cmp(r6.xy != float2(0,0));
              r5.x = r9.y ? r9.x : 0;
              if (r5.x != 0) {
                r5.x = cmp(1 < r6.x);
                r7.w = -2 + r6.x;
                r6.x = r5.x ? r7.w : r6.x;
              } else {
                r9.x = SSR__SSRDepthTexture__TexObj__.Load(r11.xyz).x;
                r9.y = 1;
                r5.x = dot(r9.xy, InvProjectionMatrix._m22_m32);
                r7.w = dot(r9.xy, InvProjectionMatrix._m23_m33);
                r5.x = -r5.x / r7.w;
                r9.xy = (int2)r11.xy;
                r9.xy = r9.xy * ViewportSize.zw + float2(-0.5,-0.5);
                r9.xy = CameraNearPlaneSize.xy * r9.xy;
                r11.xy = float2(1,-1) * r9.xy;
                r5.x = r5.x / CameraDistances.near;
                r11.z = -CameraDistances.near;
                r11.xyz = r11.xyz * r5.xxx;
                r11.w = 1;
                r9.x = dot(r11.xyzw, ProjectionMatrix._m00_m10_m20_m30);
                r9.y = dot(r11.xyzw, ProjectionMatrix._m01_m11_m21_m31);
                r5.x = dot(r11.xyzw, ProjectionMatrix._m03_m13_m23_m33);
                r12.x = dot(r11.xyzw, CameraSpaceToPreviousProjectedSpace._m00_m10_m20_m30);
                r12.y = dot(r11.xyzw, CameraSpaceToPreviousProjectedSpace._m01_m11_m21_m31);
                r7.w = dot(r11.xyzw, CameraSpaceToPreviousProjectedSpace._m03_m13_m23_m33);
                r7.w = max(9.99999975e-005, r7.w);
                r11.xy = r12.xy / r7.ww;
                r9.xy = r9.xy / r5.xx;
                r9.xy = r9.xy + -r11.xy;
                r6.xw = float2(0.5,0.5) * r9.xy;
                r6.y = -r6.w;
              }
            } else {
              r6.xy = float2(0,0);
            }
            r11.xy = r12.zw * ViewportSize.zw + -r6.xy;
            r6.xy = ViewportSize.xy * r11.xy;
            r13.xy = (int2)r6.xy;
            r13.zw = float2(0,0);
            r6.x = SSR__SSRDepthTexture__TexObj__.Load(r13.xyz).x;
            r6.y = 1;
            r5.x = dot(r6.xy, InvProjectionMatrix._m22_m32);
            r6.x = dot(r6.xy, InvProjectionMatrix._m23_m33);
            r5.x = -r5.x / r6.x;
            r5.x = cmp(r9.z >= -r5.x);
            r6.x = ~(int)r5.x;
            r6.yw = v0.xy + -r12.zw;
            r6.y = dot(r6.yw, r6.yw);
            r6.y = sqrt(r6.y);
            r6.w = cmp(r6.y >= 350);
            r6.y = -350 + r6.y;
            r6.y = -r6.y * 0.00666666683 + 1;
            r6.y = r6.w ? r6.y : 1;
            r11.zw = float2(1,1) + -r11.xy;
            r9.xyzw = saturate(float4(10,10,10,10) * r11.xzyw);
            r6.w = r9.x * r9.y;
            r6.w = r6.w * r9.z;
            r6.w = r6.w * r9.w;
            r6.y = r6.y * r6.w;
            r6.w = cmp(0.136999995 < r2.x);
            r2.x = -r2.x * 4 + 1;
            r2.x = max(0, r2.x);
            r2.x = r6.y * r2.x;
            r2.x = r6.w ? r2.x : r6.y;
            r2.x = r5.x ? r2.x : 1;
          } else {
            r11.xy = float2(0,0);
            r2.x = 0;
            r6.x = 0;
          }
          if (r6.x == 0) {
            r5.x = cmp(0 < r2.x);
            if (r5.x != 0) {
              r2.z = SSRTextureMaxMipIndex * r2.z;
              r6.xyw = SSR__SSRTexture__TexObj__.SampleLevel(ColorClamp_s, r11.xy, r2.z).xyz;
            } else {
              r6.xyw = float3(0,0,0);
            }
          } else {
            r6.xyw = float3(0,0,0);
            r2.x = 0;
          }
        } else {
          r6.xyw = float3(0,0,0);
          r2.x = 0;
        }
      } else {
        r6.xyw = float3(0,0,0);
        r2.x = 0;
      }
      r2.z = cmp(0 < r2.x);
      if (r2.z != 0) {
        r9.xyz = r6.xyw / ExposureScale;
        r2.z = cmp(r2.x < 1);
        if (r2.z != 0) {
          if (UseOnlySkyReflection == 0) {
            r0.w = 1;
            r11.xyzw = float4(0,0,0,0);
            r2.z = 1;
            r5.x = 0;
            while (true) {
              r6.x = cmp((uint)r5.x >= 15);
              if (r6.x != 0) break;
              r6.x = (int)r5.x * 7;
              r12.x = dot(r0.xyzw, ReflectionVolumes[r6.x]._m00_m10_m20_m30);
              r12.y = dot(r0.xyzw, ReflectionVolumes[r6.x]._m01_m11_m21_m31);
              r12.z = dot(r0.xyzw, ReflectionVolumes[r6.x]._m02_m12_m22_m32);
              r13.xyz = cmp(r12.xyz >= float3(0,0,0));
              r13.xyz = r13.xyz ? ReflectionVolumes[r6.x].xyz : ReflectionVolumes[r6.x].xyz;
              r12.xyz = float3(1,1,1) + -abs(r12.xyz);
              r12.xyz = saturate(r12.xyz * r13.xyz);
              r6.y = r12.x * r12.y;
              r6.y = r6.y * r12.z;
              r6.w = cmp(0 < r6.y);
              if (r6.w != 0) {
                r12.x = dot(r3.xyz, ReflectionVolumes[r6.x]._m00_m10_m20);
                r12.y = dot(r3.xyz, ReflectionVolumes[r6.x]._m01_m11_m21);
                r12.z = dot(r3.xyz, ReflectionVolumes[r6.x]._m02_m12_m22);
                r6.y = ReflectionVolumes[r6.x] * r6.y;
                r12.w = ReflectionVolumes[r6.x];
                r12.xyzw = Viewport__DynamicCubeMapReflectionTextureArray.SampleLevel(ColorWrap_s, r12.xyzw, r3.w).xyzw;
                r12.xyzw = ReflectionVolumes[r6.x].xxxy * r12.xyzw;
                r6.x = min(r6.y, r2.z);
                r12.xyzw = r12.xyzw * r6.xxxx + r11.xyzw;
                r6.x = -r6.x + r2.z;
                r6.y = cmp(0 >= r6.x);
                if (r6.y != 0) {
                  r11.xyzw = r12.xyzw;
                  r2.z = r6.x;
                  break;
                }
                r11.xyzw = r12.xyzw;
                r2.z = r6.x;
              }
              r5.x = (int)r5.x + 1;
            }
          } else {
            r11.xyzw = float4(0,0,0,0);
            r2.z = 1;
          }
          r5.x = r11.w + r2.z;
          r5.x = r5.x * r1.w;
          r6.x = cmp(0 < r5.x);
          if (r6.x != 0) {
            r6.x = r3.z + -abs(r3.z);
            r2.z = r2.z * r6.x + abs(r3.z);
            r2.z = r2.z * 2 + 2;
            r6.xy = float2(-1,1) / r2.zz;
            r6.xy = r6.xy * r3.yx;
            r6.xy = r6.xy * float2(0.949999988,0.949999988) + float2(0.5,0.5);
            r6.xyw = Viewport__SkyParaboloidTexture.SampleLevel(ColorClamp_s, r6.xy, r2.w).xyz;
            r12.xyz = saturate(r6.xyw);
            r6.xyw = UseOnlySkyReflection ? r12.xyz : r6.xyw;
            r6.xyw = r6.xyw / ExposureScale;
            r11.xyz = r6.xyw * r5.xxx + r11.xyz;
          }
          r2.x = saturate(r2.x);
          r6.xyw = -r11.xyz + r9.xyz;
          r9.xyz = r2.xxx * r6.xyw + r11.xyz;
        }
      } else {
        if (UseOnlySkyReflection == 0) {
          r0.w = 1;
          r9.xyzw = float4(0,0,0,0);
          r2.xz = float2(1,0);
          while (true) {
            r5.x = cmp((uint)r2.z >= 15);
            if (r5.x != 0) break;
            r5.x = (int)r2.z * 7;
            r11.x = dot(r0.xyzw, ReflectionVolumes[r2.z]._m00_m10_m20_m30);
            r11.y = dot(r0.xyzw, ReflectionVolumes[r2.z]._m01_m11_m21_m31);
            r11.z = dot(r0.xyzw, ReflectionVolumes[r2.z]._m02_m12_m22_m32);
            r6.xyw = cmp(r11.xyz >= float3(0,0,0));
            r6.xyw = r6.xyw ? ReflectionVolumes[r2.z].xyz : ReflectionVolumes[r2.z].xyz;
            r11.xyz = float3(1,1,1) + -abs(r11.xyz);
            r6.xyw = saturate(r11.xyz * r6.xyw);
            r6.x = r6.x * r6.y;
            r6.x = r6.x * r6.w;
            r6.y = cmp(0 < r6.x);
            if (r6.y != 0) {
              r11.x = dot(r3.xyz, ReflectionVolumes[r2.z]._m00_m10_m20);
              r11.y = dot(r3.xyz, ReflectionVolumes[r2.z]._m01_m11_m21);
              r11.z = dot(r3.xyz, ReflectionVolumes[r2.z]._m02_m12_m22);
              r6.x = ReflectionVolumes[r2.z] * r6.x;
              r11.w = ReflectionVolumes[r2.z];
              r11.xyzw = Viewport__DynamicCubeMapReflectionTextureArray.SampleLevel(ColorWrap_s, r11.xyzw, r3.w).xyzw;
              r11.xyzw = ReflectionVolumes[r2.z].xxxy * r11.xyzw;
              r5.x = min(r6.x, r2.x);
              r11.xyzw = r11.xyzw * r5.xxxx + r9.xyzw;
              r5.x = -r5.x + r2.x;
              r6.x = cmp(0 >= r5.x);
              if (r6.x != 0) {
                r9.xyzw = r11.xyzw;
                r2.x = r5.x;
                break;
              }
              r9.xyzw = r11.xyzw;
              r2.x = r5.x;
            }
            r2.z = (int)r2.z + 1;
          }
        } else {
          r9.xyzw = float4(0,0,0,0);
          r2.x = 1;
        }
        r0.x = r9.w + r2.x;
        r0.x = r0.x * r1.w;
        r0.y = cmp(0 < r0.x);
        if (r0.y != 0) {
          r0.y = r3.z + -abs(r3.z);
          r0.y = r2.x * r0.y + abs(r3.z);
          r0.y = r0.y * 2 + 2;
          r0.yz = float2(-1,1) / r0.yy;
          r0.yz = r3.yx * r0.yz;
          r0.yz = r0.yz * float2(0.949999988,0.949999988) + float2(0.5,0.5);
          r0.yzw = Viewport__SkyParaboloidTexture.SampleLevel(ColorClamp_s, r0.yz, r2.w).xyz;
          r2.xzw = saturate(r0.yzw);
          r0.yzw = UseOnlySkyReflection ? r2.xzw : r0.yzw;
          r0.yzw = r0.yzw / ExposureScale;
          r9.xyz = r0.yzw * r0.xxx + r9.xyz;
        }
      }
      r0.x = 0.0799999982 * r4.z;
      r0.yzw = -r4.zzz * float3(0.0799999982,0.0799999982,0.0799999982) + r8.xzw;
      r0.xyz = r4.xxx * r0.yzw + r0.xxx;
      r0.w = dot(r0.xyz, float3(0.333333343,0.333333343,0.333333343));
      r0.w = saturate(50 * r0.w);
      r4.w = saturate(dot(r5.yzw, r7.xyz));
      r2.xz = Global__IBLBRDFTexture.SampleLevel(ColorClamp_s, r4.wy, 0).xy;
      r0.xyz = r0.xyz * r2.xxx + r2.zzz;
      r0.xyz = r0.xyz * r0.www;
      r0.xyz = r9.xyz * r0.xyz;
      r1.xyz = r0.xyz * r6.zzz;
      r2.y = dot(r1.xyz, float3(0.212639004,0.715168655,0.0721923187));
    }
  }
  r0.x = r10.w + r2.y;
  r0.yzw = r10.xyz + r1.xyz;
  r0.xyzw = ExposureScale * r0.xyzw;
  r0.xyzw = max(float4(0,0,0,0), r0.xyzw);
  o0.xyzw = min(float4(64512,64512,64512,64512), r0.yzwx);
  return;

}

/****************************** COMPILE ERRORS ******************************
C:\games\WATCH_DOGS2\bin\ShaderFixes\7702018154975f24-ps_replace.txt(621,34-74): error X3018: invalid subscript '_m00_m10_m20_m30'
C:\games\WATCH_DOGS2\bin\ShaderFixes\7702018154975f24-ps_replace.txt(621,21-75): error X3013: 'dot': no matching 2 parameter intrinsic function
C:\games\WATCH_DOGS2\bin\ShaderFixes\7702018154975f24-ps_replace.txt(621,21-75): error X3013: Possible intrinsic functions are:
C:\games\WATCH_DOGS2\bin\ShaderFixes\7702018154975f24-ps_replace.txt(621,21-75): error X3013:     dot(floatM|halfM|doubleM|min10floatM|min16floatM|intM|uintM|min12intM|min16intM|min16uintM, floatM|halfM|doubleM|min10floatM|min16floatM|intM|uintM|min12intM|min16intM|min16uintM)

compilation failed; no code produced
****************************** COMPILE ERRORS ******************************/
