// asmtool.py --fix-wd2-screen-space-reflections -i -f --only-autofixed f6e72b4ff8720753-ps.txt
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.52 on Wed Jan 25 11:32:37 2017
//
//
// Buffer Definitions: 
//
// cbuffer Viewport
// {
//
//   float4 CameraNearPlaneSize;        // Offset:    0 Size:    16
//   float4x4 DepthTextureTransform;    // Offset:   16 Size:    64 [unused]
//   float4 FSMClipPlanes;              // Offset:   80 Size:    16 [unused]
//   float4 FacettedShadowCastParams;   // Offset:   96 Size:    16 [unused]
//   float4 FogValues0;                 // Offset:  112 Size:    16 [unused]
//   float4 FogValues1;                 // Offset:  128 Size:    16 [unused]
//   float4x4 InvProjectionMatrix;      // Offset:  144 Size:    64
//   float4x4 InvProjectionMatrixDepth; // Offset:  208 Size:    64 [unused]
//   float4x3 InvViewMatrix;            // Offset:  272 Size:    48
//   float4x4 PreviousViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4x4 ProjectionMatrix;         // Offset:  384 Size:    64
//   float4 RainOcclusionFadeParams;    // Offset:  448 Size:    16 [unused]
//   float4x4 RainOcclusionProjectionMatrix;// Offset:  464 Size:    64 [unused]
//   float4 RainOcclusionShadowMapSize; // Offset:  528 Size:    16 [unused]
//   float4 ReflectionVolumeDebugColors[15];// Offset:  544 Size:   240 [unused]
//   float4 VPosOffset;                 // Offset:  784 Size:    16
//   float4 VPosScale;                  // Offset:  800 Size:    16
//   float4x3 ViewMatrix;               // Offset:  816 Size:    48
//   float4x4 ViewProjectionMatrix;     // Offset:  864 Size:    64 [unused]
//   float4x4 ViewRotProjectionMatrix;  // Offset:  928 Size:    64 [unused]
//   float4x4 ViewRotProjectionMatrixPure;// Offset:  992 Size:    64 [unused]
//   float4 ViewportSize;               // Offset: 1056 Size:    16
//   
//   struct SCameraDistances
//   {
//       
//       float near;                    // Offset: 1072
//       float far;                     // Offset: 1076
//       float view;                    // Offset: 1080
//       float oneOverView;             // Offset: 1084
//
//   } CameraDistances;                 // Offset: 1072 Size:    16
//   
//   struct SReflectionVolume
//   {
//       
//       float4x4 inverseTransform;     // Offset: 1088
//       float3 rcpFadeRangePositive;   // Offset: 1152
//       float textureArrayIndexAsFloat;// Offset: 1164
//       float3 rcpFadeRangeNegative;   // Offset: 1168
//       float fadeFactor;              // Offset: 1180
//       float2 multipliers;            // Offset: 1184
//       uint parallaxCorrection;       // Offset: 1192
//       float padding0;                // Offset: 1196
//
//   } ReflectionVolumes[15];           // Offset: 1088 Size:  1680
//   float3 CameraDirection;            // Offset: 2768 Size:    12 [unused]
//   float DefaultReflectionTextureArrayIndexAsFloat;// Offset: 2780 Size:     4 [unused]
//   float3 CameraPosition;             // Offset: 2784 Size:    12
//   float DynamicCubeMapReflectionTextureMaxMipIndex;// Offset: 2796 Size:     4
//   float3 CullingCameraPosition;      // Offset: 2800 Size:    12 [unused]
//   float ExposedWhitePointOverExposureScale;// Offset: 2812 Size:     4 [unused]
//   float3 FogColorVector;             // Offset: 2816 Size:    12 [unused]
//   float ExposureScale;               // Offset: 2828 Size:     4
//   float3 OppositeFogColorDelta;      // Offset: 2832 Size:    12 [unused]
//   float MaxParaboloidReflectionMipIndex;// Offset: 2844 Size:     4 [unused]
//   float3 SideFogColor;               // Offset: 2848 Size:    12 [unused]
//   float MaxStaticReflectionMipIndex; // Offset: 2860 Size:     4 [unused]
//   float3 SunFogColorDelta;           // Offset: 2864 Size:    12 [unused]
//   float MeasuredExposureScale;       // Offset: 2876 Size:     4 [unused]
//   float3 TemporalFilteringParams;    // Offset: 2880 Size:    12 [unused]
//   float RaindropRippleScale;         // Offset: 2892 Size:     4 [unused]
//   float3 UncompressDepthWeights;     // Offset: 2896 Size:    12 [unused]
//   float ReflectionScaleDistanceMul;  // Offset: 2908 Size:     4 [unused]
//   float3 UncompressDepthWeightsWS;   // Offset: 2912 Size:    12 [unused]
//   float ReflectionScaleStrength;     // Offset: 2924 Size:     4 [unused]
//   float3 ViewPoint;                  // Offset: 2928 Size:    12 [unused]
//   float SkyParaboloidTextureMaxMipIndex;// Offset: 2940 Size:     4
//   float2 DefaultReflectionMultipliers;// Offset: 2944 Size:     8 [unused]
//   bool UseOnlySkyReflection;         // Offset: 2952 Size:     4
//   float2 ReflectionGIControl;        // Offset: 2960 Size:     8 [unused]
//   uint2 SelectedPixel;               // Offset: 2968 Size:     8 [unused]
//
// }
//
// cbuffer SSR
// {
//
//   float4x4 CameraSpaceToPreviousProjectedSpace;// Offset:    0 Size:    64
//   float4x4 ProjectToPixelMatrix;     // Offset:   64 Size:    64
//   float DepthScale;                  // Offset:  128 Size:     4
//   float SSRTextureMaxMipIndex;       // Offset:  132 Size:     4
//   bool GameIsPaused;                 // Offset:  136 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// Viewport__DepthVPSampler__SampObj__    sampler      NA          NA    0        1
// ColorClamp                        sampler      NA          NA    1        1
// ColorWrap                         sampler      NA          NA    2        1
// Global__IBLBRDFTexture            texture  float2          2d    0        1
// Viewport__SkyParaboloidTexture    texture  float4          2d    1        1
// Viewport__DynamicCubeMapReflectionTextureArray    texture  float4   cubearray    2        1
// SSR__SSRDepthTexture__TexObj__    texture  float4          2d    3        1
// SSR__SSRTexture__TexObj__         texture  float4          2d    4        1
// SSR__MotionVectorTextureMS        texture  float4        2dMS    5        1
// DeferredLightingCommon__AlbedoTextureMS    texture  float4        2dMS    6        1
// DeferredLightingCommon__DepthSamplerMS    texture  float4        2dMS    7        1
// DeferredLightingCommon__NormalTextureMS    texture  float4        2dMS    8        1
// DeferredLightingCommon__OtherTextureMS    texture  float4        2dMS    9        1
// Viewport                          cbuffer      NA          NA    0        1
// SSR                               cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[185], dynamicIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texturecubearray (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2dms(0) (float,float,float,float) t5
dcl_resource_texture2dms(0) (float,float,float,float) t6
dcl_resource_texture2dms(0) (float,float,float,float) t7
dcl_resource_texture2dms(0) (float,float,float,float) t8
dcl_resource_texture2dms(0) (float,float,float,float) t9
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 25

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r21.xyzw, l(0, 0, 0, 0), t125.xyzw


// WATCH_DOGS2 Screen Space Reflection fix inserted with DarkStarSword's asmtool.py:
// asmtool.py --fix-wd2-screen-space-reflections -i -f --only-autofixed f6e72b4ff8720753-ps.txt

// WATCH_DOGS2 CameraPosition adjustment inserted with DarkStarSword's asmtool.py:
// asmtool.py --fix-wd2-screen-space-reflections -i -f --only-autofixed f6e72b4ff8720753-ps.txt

mul r21.w, r21.x, r21.y
mul r23.x, r21.w, cb0[9].x
mul r23.y, r21.w, cb0[10].x
mul r23.z, r21.w, cb0[11].x
mul r23.w, r21.w, cb0[12].x
dp4 r24.x, r23.xyzw, cb0[17].xyzw
dp4 r24.y, r23.xyzw, cb0[18].xyzw
dp4 r24.z, r23.xyzw, cb0[19].xyzw
add r22.xyz, cb0[174].xyz, r24.xyz

mad r0.xy, v0.xyxx, cb0[50].zwzz, cb0[49].zwzz
ftoi r1.xy, v0.xyxx
mov r1.zw, l(0,0,0,0)
ldms_indexable(texture2dms)(float,float,float,float) r0.z, r1.xyww, t7.zwxy, l(0)
mov r0.w, l(1.000000)
dp2 r2.x, r0.zwzz, cb0[11].zwzz
dp2 r0.z, r0.zwzz, cb0[12].zwzz
div r0.z, -r2.x, r0.z
mov r2.z, -r0.z
mul r2.xy, r0.xyxx, r2.zzzz

// WATCH_DOGS2 unprojection fix inserted with DarkStarSword's asmtool.py:
// asmtool.py --fix-wd2-screen-space-reflections -i -f --only-autofixed f6e72b4ff8720753-ps.txt

add r21.w, -r2.z, -r21.y
mul r21.w, r21.w, r21.x
mad r2.x, -r21.w, cb0[9].x, r2.x

mov r2.w, l(1.000000)
dp4 r0.x, r2.xyzw, cb0[17].xyzw
dp4 r0.y, r2.xyzw, cb0[18].xyzw
dp4 r0.z, r2.xyzw, cb0[19].xyzw
ldms_indexable(texture2dms)(float,float,float,float) r2.xyzw, r1.xyww, t6.xyzw, l(0)
ldms_indexable(texture2dms)(float,float,float,float) r3.xyzw, r1.xyww, t8.xyzw, l(0)
ldms_indexable(texture2dms)(float,float,float,float) r1.xyzw, r1.xyzw, t9.zyxw, l(0)
mad r1.w, r1.w, l(255.000000), l(0.500000)
round_ni r1.w, r1.w
ftou r1.w, r1.w
ushr r1.w, r1.w, l(5)
dp3 r4.x, r3.xyzx, r3.xyzx
rsq r4.x, r4.x
mul r4.xyz, r3.xyzx, r4.xxxx
ieq r5.xy, r1.wwww, l(1, 4, 0, 0)
ge r4.w, r2.w, l(0.750000)
add r5.z, r2.w, l(-0.750000)
mad r5.z, r5.z, l(-0.599999905), l(1.000000)
movc r4.w, r4.w, r5.z, l(1.000000)
movc r4.w, r5.y, r4.w, r2.w
movc r4.w, r5.x, l(1.000000), r4.w
mad r5.z, r3.w, l(0.500000), l(0.500000)
mad r5.z, r5.z, l(65535.000000), l(0.500000)
ftou r5.z, r5.z
and r5.w, r5.z, l(255)
utof r6.x, r5.w
lt r5.w, l(0.000000), r6.x
movc r5.w, r1.w, l(0), r5.w
add r7.xyz, -r0.xyzx, r22.xyzx
dp3 r6.w, r7.xyzx, r7.xyzx
rsq r6.w, r6.w
mul r7.xyz, r6.wwww, r7.xyzx
mul r8.yzw, r2.xxyz, r4.wwww
if_nz r5.x
  and r5.x, r5.z, l(0x0000ff00)
  utof r5.x, r5.x
  mul r5.x, r5.x, l(0.0000153186284)
  mul r6.w, r2.w, l(255.000000)
  ftou r6.w, r6.w
  and r9.xy, r6.wwww, l(240, 15, 0, 0)
  utof r9.xy, r9.xyxx
  mul r9.xy, r9.xyxx, l(0.00416666688, 0.00533333328, 0.000000, 0.000000)
  mov_sat r1.xyz, r1.xyzx
  mul r6.w, r1.y, r1.y
  max r10.y, r6.w, l(0.001000)
  mul r5.x, r5.x, r5.x
  max r5.x, r5.x, l(0.001000)
  dp3 r6.w, -r7.xyzx, r4.xyzx
  add r6.w, r6.w, r6.w
  mad r11.xyz, r4.xyzx, -r6.wwww, -r7.xyzx
  dp3 r6.w, r4.xyzx, r11.xyzx
  mad r6.w, -|r6.w|, |r6.w|, l(1.000000)
  mad r6.w, -r6.w, l(0.444702327), l(1.000000)
  mul r7.w, r6.x, l(0.00784313772)
  sqrt r6.w, r6.w
  div r6.w, r7.w, r6.w
  log r12.xyz, r8.yzwy
  mul r9.xzw, r9.xxxx, r12.xxyz
  mul r9.xzw, r9.xxzw, l(-12.780000, 0.000000, -12.780000, -12.780000)
  mad r9.xzw, r12.xxyz, l(-0.020000, 0.000000, -0.020000, -0.020000), r9.xxzw
  eq r7.w, r6.x, l(0.000000)
  mul r10.w, r10.y, r10.y
  div r10.w, l(2.000000), r10.w
  add r10.w, r10.w, l(-2.000000)
  max r10.w, r10.w, l(1.000000031E-022)
  sqrt r10.w, r10.w
  div r10.w, l(-10.000000), r10.w
  exp r10.w, r10.w
  add r10.w, r10.w, l(-0.000980)
  mul_sat r10.w, r10.w, l(1.00795019)
  add r10.w, -r10.w, l(1.000000)
  mul r11.w, r10.w, cb0[183].w
  mul r12.x, r10.w, cb0[174].w
  if_z r5.w
    ge r12.y, l(0.250000), r10.y
    if_nz r12.y
      ge r12.y, r4.z, l(0.250000)
      if_nz r12.y
        mov r0.w, l(1.000000)
        dp4 r13.x, r0.xyzw, cb0[51].xyzw
        dp4 r13.y, r0.xyzw, cb0[52].xyzw
        dp4 r13.z, r0.xyzw, cb0[53].xyzw
        dp3 r14.x, r4.xyzx, cb0[51].xyzx
        dp3 r14.y, r4.xyzx, cb0[52].xyzx
        dp3 r14.z, r4.xyzx, cb0[53].xyzx
        dp3 r12.y, r11.xyzx, cb0[51].xyzx
        dp3 r12.z, r11.xyzx, cb0[52].xyzx
        dp3 r12.w, r11.xyzx, cb0[53].xyzx
        dp3 r13.w, r12.yzwy, r12.yzwy
        rsq r13.w, r13.w
        mul r15.yzw, r12.yyzw, r13.wwww
        dp2 r12.y, v0.xxxx, cb0[66].zzzz
        add r12.y, r12.y, l(-1.000000)
        log r12.y, |r12.y|
        mul r12.y, r12.y, l(10.000000)
        exp r12.y, r12.y
        mad r12.y, r12.y, l(0.100000), l(1.000000)
        div r15.x, r15.y, r12.y
        mul r12.y, r13.z, l(-0.010000)
        max r12.y, r12.y, l(0.001000)
        mad r14.xyz, r14.xyzx, r12.yyyy, r13.xyzx
        mad r15.xyz, r15.xzwx, l(1000.000000, 1000.000000, 1000.000000, 0.000000), r14.xyzx
        mov r14.w, l(1.000000)
        dp4 r13.y, r14.xyzw, cb1[4].xyzw
        dp4 r13.x, r14.xyzw, cb1[5].xyzw
        dp4 r12.y, r14.xyzw, cb1[7].xyzw

// ProjectToPixelMatrix - stereo correction * resolution / 2:
add r21.w, r12.y, -r21.y
mul r21.w, r21.w, r21.x
mul r21.w, r21.w, cb0[66].x
mad r13.y, r21.w, l(0.5), r13.y

        mov r15.w, l(1.000000)
        dp4 r14.x, r15.xyzw, cb1[4].xyzw
        dp4 r14.y, r15.xyzw, cb1[5].xyzw
        dp4 r12.z, r15.xyzw, cb1[7].xyzw

// ProjectToPixelMatrix - stereo correction * resolution / 2:
add r21.w, r12.z, -r21.y
mul r21.w, r21.w, r21.x
mul r21.w, r21.w, cb0[66].x
mad r14.x, r21.w, l(0.5), r14.x

        div r12.y, l(1.000000, 1.000000, 1.000000, 1.000000), r12.y
        div r12.z, l(1.000000, 1.000000, 1.000000, 1.000000), r12.z
        mul r15.xy, r12.yyyy, r13.xyxx
        mul r16.xy, r12.zzzz, r14.xyxx
        mul r12.w, r12.y, r14.z
        mul r13.w, r12.z, r15.z
        add r15.zw, cb0[66].yyyx, l(0.000000, 0.000000, -0.500000, -0.500000)
        lt r16.zw, r15.zzzw, r16.yyyx
        lt r17.xy, r16.yxyy, l(0.500000, 0.500000, 0.000000, 0.000000)
        or r17.xy, r16.zwzz, r17.xyxx
        movc r15.zw, r16.zzzw, -r15.zzzw, l(0,0,-0.500000,-0.500000)
        mad r15.zw, r14.yyyx, r12.zzzz, r15.zzzw
        mad r14.xy, r14.yxyy, r12.zzzz, -r15.xyxx
        div r14.xy, r15.zwzz, r14.xyxx
        and r14.x, r14.x, r17.x
        max r14.y, r14.y, r14.x
        movc r14.x, r17.y, r14.y, r14.x
        mad r14.yw, r13.yyyx, r12.yyyy, -r16.xxxy
        mad r14.yw, r14.xxxx, r14.yyyw, r16.xxxy
        add r15.z, -r12.z, r12.y
        mad r12.z, r14.x, r15.z, r12.z
        mad r15.z, r14.z, r12.y, -r13.w
        mad r13.w, r14.x, r15.z, r13.w
        mad r15.zw, r13.yyyx, r12.yyyy, -r14.yyyw
        dp2 r14.x, r15.zwzz, r15.zwzz
        lt r14.x, r14.x, l(0.000100)
        mad r15.zw, r13.yyyx, r12.yyyy, l(0.000000, 0.000000, 0.010000, 0.010000)
        movc r16.xy, r14.xxxx, r15.zwzz, r14.ywyy
        mad r16.zw, -r13.yyyx, r12.yyyy, r16.xxxy
        lt r13.x, |r16.z|, |r16.w|
        movc r14.xy, r13.xxxx, r15.xyxx, r15.yxyy
        movc r15.xyz, r13.xxxx, r16.ywzy, r16.xzwx
        lt r13.y, l(0.000000), r15.y
        lt r14.w, r15.y, l(0.000000)
        iadd r13.y, -r13.y, r14.w
        itof r16.x, r13.y
        div r13.y, r16.x, r15.y
        mul r16.y, r15.z, r13.y
        mad r13.w, -r14.z, r12.y, r13.w
        mul r13.w, r13.y, r13.w
        add r12.z, -r12.y, r12.z
        mul r12.z, r13.y, r12.z
        mul r13.y, r15.x, r16.x
        ge r14.w, r14.z, l(99999.796875)
        ge r15.x, l(100000.000000), r14.z
        and r14.w, r14.w, r15.x
        mov r15.y, l(1.000000)
        mov r17.xy, r12.wyww
        mov r15.zw, l(0,0,-1.000000,-1.000000)
        mov r16.z, l(0)
        mov r16.w, r14.w
        mov r19.y, r14.z
        mov r18.xyz, r14.xywx
        loop 
          mul r18.w, r16.x, r18.x
          ge r18.w, r13.y, r18.w
          ilt r19.z, r16.z, l(150)
          and r18.w, r18.w, r19.z
          not r19.z, r18.z
          and r18.w, r18.w, r19.z
          breakc_z r18.w
          mad r17.xz, r13.wwww, l(5.000000, 0.000000, 2.500000, 0.000000), r17.xxxx
          mad r17.yw, r12.zzzz, l(0.000000, 5.000000, 0.000000, 2.500000), r17.yyyy
          div r19.x, r17.z, r17.w
          lt r17.z, r19.x, r19.y
          movc r17.zw, r17.zzzz, r19.xxxy, r19.yyyx
          movc r15.zw, r13.xxxx, r18.yyyx, r18.xxxy
          mul r19.zw, r15.zzzw, cb0[66].zzzw
          sample_l_indexable(texture2d)(float,float,float,float) r15.x, r19.zwzz, t3.xyzw, s0, l(0.000000)
          dp2 r18.w, r15.xyxx, cb0[11].zwzz
          dp2 r15.x, r15.xyxx, cb0[12].zwzz
          div r15.x, -r18.w, r15.x
          ge r17.z, -r15.x, r17.z
          add r15.x, -r15.x, l(-0.200000)
          ge r15.x, r17.w, r15.x
          and r18.z, r15.x, r17.z
          mad r18.xy, r16.xyxx, l(5.000000, 5.000000, 0.000000, 0.000000), r18.xyxx
          iadd r16.z, r16.z, l(1)
          mov r16.w, r18.z
          mov r19.y, r19.x
        endloop 
        if_nz r16.w
          if_z cb1[8].z
            ftoi r12.yz, r15.zzwz
            imax r12.yz, r12.yyzy, l(0, 0, 0, 0)
            ftoi r13.xy, cb0[66].xyxx
            iadd r13.xy, r13.xyxx, l(-1, -1, 0, 0)
            imin r14.xy, r12.yzyy, r13.xyxx
            mov r14.zw, l(0,0,0,0)
            ldms_indexable(texture2dms)(float,float,float,float) r12.yz, r14.xyzw, t5.wxyz, l(0)
            ne r13.xy, r12.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
            and r13.x, r13.y, r13.x
            if_z r13.x
              itof r13.xy, r14.xyxx
              mul r14.xy, r13.xyxx, cb1[8].xxxx
              ftoi r14.xy, r14.xyxx
              mov r14.zw, l(0,0,0,0)
              ld_indexable(texture2d)(float,float,float,float) r14.x, r14.xyzw, t3.xyzw
              mov r14.yw, l(0,1.000000,0,1.000000)
              dp2 r13.w, r14.xyxx, cb0[11].zwzz
              dp2 r14.x, r14.xyxx, cb0[12].zwzz
              div r13.w, -r13.w, r14.x
              mad r13.xy, r13.xyxx, cb0[66].zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
              mul r13.xy, r13.xyxx, cb0[0].xyxx
              mul r14.xy, r13.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
              div r13.x, r13.w, cb0[67].x
              mov r14.z, -cb0[67].x
              mul r14.xyz, r13.xxxx, r14.xyzx
              dp4 r13.x, r14.xyzw, cb0[24].xyzw
              dp4 r13.y, r14.xyzw, cb0[25].xyzw
              dp4 r13.w, r14.xyzw, cb0[27].xyzw

// ProjectionMatrix - standard stereo correction:
add r21.w, r13.w, -r21.y
mad r13.x, r21.w, r21.x, r13.x

              dp4 r15.x, r14.xyzw, cb1[0].xyzw
              dp4 r15.y, r14.xyzw, cb1[1].xyzw
              dp4 r14.x, r14.xyzw, cb1[3].xyzw

// CameraSpaceToPreviousProjectedSpace - standard stereo correction:
add r21.w, r14.x, -r21.y
mad r15.x, r21.w, r21.x, r15.x

              max r14.x, r14.x, l(0.000100)
              div r14.xy, r15.xyxx, r14.xxxx
              div r13.xy, r13.xyxx, r13.wwww
              add r13.xy, -r14.xyxx, r13.xyxx
              mul r12.yw, r13.xxxy, l(0.000000, 0.500000, 0.000000, 0.500000)
              mov r12.z, -r12.w
            endif 
          else 
            mov r12.yz, l(0,0,0,0)
          endif 
          mad r12.yz, r15.zzwz, cb0[66].zzwz, -r12.yyzy
          mul r13.xy, r12.yzyy, cb0[66].xyxx
          mul r13.xy, r13.xyxx, cb1[8].xxxx
          ftoi r14.xy, r13.xyxx
          mov r14.zw, l(0,0,0,0)
          ld_indexable(texture2d)(float,float,float,float) r13.x, r14.xyzw, t3.xyzw
          mov r13.y, l(1.000000)
          dp2 r13.w, r13.xyxx, cb0[11].zwzz
          dp2 r13.x, r13.xyxx, cb0[12].zwzz
          div r13.x, -r13.w, r13.x
          ge r13.x, r13.z, -r13.x
          not r13.y, r13.x
          add r13.zw, -r15.zzzw, v0.xxxy
          dp2 r13.z, r13.zwzz, r13.zwzz
          sqrt r13.z, r13.z
          ge r13.w, r13.z, l(525.000000)
          add r13.z, r13.z, l(-525.000000)
          mad r13.z, -r13.z, l(0.00444444455), l(1.000000)
          movc r13.z, r13.w, r13.z, l(1.000000)
          add r12.w, -r12.z, l(1.000000)
          mul_sat r14.xy, r12.zwzz, l(10.000000, 10.000000, 0.000000, 0.000000)
          mul r12.w, r14.y, r14.x
          mul r12.w, r12.w, r13.z
          lt r13.z, l(0.137000), r10.y
          mad r13.w, -r10.y, l(4.000000), l(1.000000)
          max r13.w, r13.w, l(0.000000)
          mul r13.w, r12.w, r13.w
          movc r12.w, r13.z, r13.w, r12.w
          movc r12.w, r13.x, r12.w, l(1.000000)
        else 
          mov r12.yzw, l(0,0,0,0)
          mov r13.y, l(0)
        endif 
        if_z r13.y
          lt r13.x, l(0.000000), r12.w
          if_nz r13.x
            mul r10.w, r10.w, cb1[8].y
            sample_l_indexable(texture2d)(float,float,float,float) r13.xyz, r12.yzyy, t4.xyzw, s1, r10.w
          else 
            mov r13.xyz, l(0,0,0,0)
          endif 
        else 
          mov r13.xyz, l(0,0,0,0)
          mov r12.w, l(0)
        endif 
      else 
        mov r13.xyz, l(0,0,0,0)
        mov r12.w, l(0)
      endif 
    else 
      mov r13.xyz, l(0,0,0,0)
      mov r12.w, l(0)
    endif 
  else 
    mov r13.xyz, l(0,0,0,0)
    mov r12.w, l(0)
  endif 
  lt r10.w, l(0.000000), r12.w
  if_nz r10.w
    div r13.xyz, r13.xyzx, cb0[176].wwww
    lt r10.w, r12.w, l(1.000000)
    if_nz r10.w
      if_z cb0[184].z
        mov r0.w, l(1.000000)
        mov r14.xyzw, l(0,0,0,0)
        mov r10.w, l(1.000000)
        mov r12.y, l(0)
        loop 
          uge r12.z, r12.y, l(15)
          breakc_nz r12.z
          imul null, r12.z, r12.y, l(7)
          dp4 r15.x, r0.xyzw, cb0[r12.z + 68].xyzw
          dp4 r15.y, r0.xyzw, cb0[r12.z + 69].xyzw
          dp4 r15.z, r0.xyzw, cb0[r12.z + 70].xyzw
          ge r16.xyz, r15.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
          movc r16.xyz, r16.xyzx, cb0[r12.z + 72].xyzx, cb0[r12.z + 73].xyzx
          add r15.xyz, -|r15.xyzx|, l(1.000000, 1.000000, 1.000000, 0.000000)
          mul_sat r15.xyz, r16.xyzx, r15.xyzx
          mul r15.x, r15.y, r15.x
          mul r15.x, r15.z, r15.x
          lt r15.y, l(0.000000), r15.x
          if_nz r15.y
            dp3 r16.x, r11.xyzx, cb0[r12.z + 68].xyzx
            dp3 r16.y, r11.xyzx, cb0[r12.z + 69].xyzx
            dp3 r16.z, r11.xyzx, cb0[r12.z + 70].xyzx
            mul r15.x, r15.x, cb0[r12.z + 73].w
            mov r16.w, cb0[r12.z + 72].w
            sample_l_indexable(texturecubearray)(float,float,float,float) r16.xyzw, r16.xyzw, t2.xyzw, s2, r12.x
            mul r16.xyzw, r16.xyzw, cb0[r12.z + 74].xxxy
            min r12.z, r10.w, r15.x
            mad r15.xyzw, r16.xyzw, r12.zzzz, r14.xyzw
            add r12.z, r10.w, -r12.z
            ge r16.x, l(0.000000), r12.z
            if_nz r16.x
              mov r14.xyzw, r15.xyzw
              mov r10.w, r12.z
              break 
            endif 
            mov r14.xyzw, r15.xyzw
            mov r10.w, r12.z
          endif 
          iadd r12.y, r12.y, l(1)
        endloop 
      else 
        mov r14.xyzw, l(0,0,0,0)
        mov r10.w, l(1.000000)
      endif 
      add r12.y, r10.w, r14.w
      lt r12.z, l(0.000000), r12.y
      if_nz r12.z
        add r12.z, -|r11.z|, r11.z
        mad r10.w, r10.w, r12.z, |r11.z|
        mad r10.w, r10.w, l(2.000000), l(2.000000)
        div r15.xy, l(-1.000000, 1.000000, 0.000000, 0.000000), r10.wwww
        mul r15.xy, r11.yxyy, r15.xyxx
        mad r15.xy, r15.xyxx, l(0.950000, 0.950000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        sample_l_indexable(texture2d)(float,float,float,float) r15.xyz, r15.xyxx, t1.xyzw, s1, r11.w
        mov_sat r16.xyz, r15.xyzx
        movc r15.xyz, cb0[184].zzzz, r16.xyzx, r15.xyzx
        div r15.xyz, r15.xyzx, cb0[176].wwww
        mad r14.xyz, r15.xyzx, r12.yyyy, r14.xyzx
      endif 
      mov_sat r12.w, r12.w
      add r15.xyz, r13.xyzx, -r14.xyzx
      mad r13.xyz, r12.wwww, r15.xyzx, r14.xyzx
    endif 
  else 
    if_z cb0[184].z
      mov r0.w, l(1.000000)
      mov r13.xyzw, l(0,0,0,0)
      mov r10.w, l(1.000000)
      mov r12.y, l(0)
      loop 
        uge r12.z, r12.y, l(15)
        breakc_nz r12.z
        imul null, r12.z, r12.y, l(7)
        dp4 r14.x, r0.xyzw, cb0[r12.z + 68].xyzw
        dp4 r14.y, r0.xyzw, cb0[r12.z + 69].xyzw
        dp4 r14.z, r0.xyzw, cb0[r12.z + 70].xyzw
        ge r15.xyz, r14.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
        movc r15.xyz, r15.xyzx, cb0[r12.z + 72].xyzx, cb0[r12.z + 73].xyzx
        add r14.xyz, -|r14.xyzx|, l(1.000000, 1.000000, 1.000000, 0.000000)
        mul_sat r14.xyz, r15.xyzx, r14.xyzx
        mul r12.w, r14.y, r14.x
        mul r12.w, r14.z, r12.w
        lt r14.x, l(0.000000), r12.w
        if_nz r14.x
          dp3 r14.x, r11.xyzx, cb0[r12.z + 68].xyzx
          dp3 r14.y, r11.xyzx, cb0[r12.z + 69].xyzx
          dp3 r14.z, r11.xyzx, cb0[r12.z + 70].xyzx
          mul r12.w, r12.w, cb0[r12.z + 73].w
          mov r14.w, cb0[r12.z + 72].w
          sample_l_indexable(texturecubearray)(float,float,float,float) r14.xyzw, r14.xyzw, t2.xyzw, s2, r12.x
          mul r14.xyzw, r14.xyzw, cb0[r12.z + 74].xxxy
          min r12.z, r10.w, r12.w
          mad r14.xyzw, r14.xyzw, r12.zzzz, r13.xyzw
          add r12.z, r10.w, -r12.z
          ge r12.w, l(0.000000), r12.z
          if_nz r12.w
            mov r13.xyzw, r14.xyzw
            mov r10.w, r12.z
            break 
          endif 
          mov r13.xyzw, r14.xyzw
          mov r10.w, r12.z
        endif 
        iadd r12.y, r12.y, l(1)
      endloop 
    else 
      mov r13.xyzw, l(0,0,0,0)
      mov r10.w, l(1.000000)
    endif 
    add r12.x, r10.w, r13.w
    lt r12.y, l(0.000000), r12.x
    if_nz r12.y
      add r12.y, -|r11.z|, r11.z
      mad r10.w, r10.w, r12.y, |r11.z|
      mad r10.w, r10.w, l(2.000000), l(2.000000)
      div r12.yz, l(0.000000, -1.000000, 1.000000, 0.000000), r10.wwww
      mul r12.yz, r11.yyxy, r12.yyzy
      mad r12.yz, r12.yyzy, l(0.000000, 0.950000, 0.950000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
      sample_l_indexable(texture2d)(float,float,float,float) r12.yzw, r12.yzyy, t1.wxyz, s1, r11.w
      mov_sat r14.xyz, r12.yzwy
      movc r12.yzw, cb0[184].zzzz, r14.xxyz, r12.yyzw
      div r12.yzw, r12.yyzw, cb0[176].wwww
      mad r13.xyz, r12.yzwy, r12.xxxx, r13.xyzx
    endif 
  endif 
  mul r10.w, r1.z, l(0.080000)
  dp3 r11.w, r10.wwww, l(0.333333343, 0.333333343, 0.333333343, 0.000000)
  mul r11.w, r11.w, l(50.000000)
  min r11.w, r11.w, l(1.000000)
  dp3_sat r10.x, r4.xyzx, r7.xyzx
  sample_l_indexable(texture2d)(float,float,float,float) r12.xy, r10.xyxx, t0.xyzw, s1, l(0.000000)
  mad r10.w, r10.w, r12.x, r12.y
  mul r10.w, r11.w, r10.w
  mul r12.xyz, r10.wwww, r13.xyzx
  mul r12.xyz, r4.wwww, r12.xyzx
  add r5.x, r5.x, r10.y
  min r10.z, r5.x, l(1.000000)
  mul r5.x, r10.z, r10.z
  div r5.x, l(2.000000), r5.x
  add r5.x, r5.x, l(-2.000000)
  max r5.x, r5.x, l(1.000000031E-022)
  sqrt r5.x, r5.x
  div r5.x, l(-10.000000), r5.x
  exp r5.x, r5.x
  add r5.x, r5.x, l(-0.000980)
  mul r5.x, r5.x, l(1.00795019)
  max r5.x, r5.x, l(0.000000)
  add r5.x, -r5.x, l(1.000000)
  mul r10.y, r5.x, cb0[183].w
  mul r10.w, r5.x, cb0[174].w
  if_z r5.w
    ge r11.w, l(0.250000), r10.z
    if_nz r11.w
      ge r11.w, r4.z, l(0.250000)
      if_nz r11.w
        mov r0.w, l(1.000000)
        dp4 r13.x, r0.xyzw, cb0[51].xyzw
        dp4 r13.y, r0.xyzw, cb0[52].xyzw
        dp4 r13.z, r0.xyzw, cb0[53].xyzw
        dp3 r14.x, r4.xyzx, cb0[51].xyzx
        dp3 r14.y, r4.xyzx, cb0[52].xyzx
        dp3 r14.z, r4.xyzx, cb0[53].xyzx
        dp3 r15.y, r11.xyzx, cb0[51].xyzx
        dp3 r15.z, r11.xyzx, cb0[52].xyzx
        dp3 r15.w, r11.xyzx, cb0[53].xyzx
        dp3 r11.w, r15.yzwy, r15.yzwy
        rsq r11.w, r11.w
        mul r15.yzw, r11.wwww, r15.yyzw
        dp2 r11.w, v0.xxxx, cb0[66].zzzz
        add r11.w, r11.w, l(-1.000000)
        log r11.w, |r11.w|
        mul r11.w, r11.w, l(10.000000)
        exp r11.w, r11.w
        mad r11.w, r11.w, l(0.100000), l(1.000000)
        div r15.x, r15.y, r11.w
        mul r11.w, r13.z, l(-0.010000)
        max r11.w, r11.w, l(0.001000)
        mad r14.xyz, r14.xyzx, r11.wwww, r13.xyzx
        mad r15.xyz, r15.xzwx, l(1000.000000, 1000.000000, 1000.000000, 0.000000), r14.xyzx
        mov r14.w, l(1.000000)
        dp4 r13.y, r14.xyzw, cb1[4].xyzw
        dp4 r13.x, r14.xyzw, cb1[5].xyzw
        dp4 r11.w, r14.xyzw, cb1[7].xyzw

// ProjectToPixelMatrix - stereo correction * resolution / 2:
add r21.w, r11.w, -r21.y
mul r21.w, r21.w, r21.x
mul r21.w, r21.w, cb0[66].x
mad r13.y, r21.w, l(0.5), r13.y

        mov r15.w, l(1.000000)
        dp4 r14.x, r15.xyzw, cb1[4].xyzw
        dp4 r14.y, r15.xyzw, cb1[5].xyzw
        dp4 r12.w, r15.xyzw, cb1[7].xyzw

// ProjectToPixelMatrix - stereo correction * resolution / 2:
add r21.w, r12.w, -r21.y
mul r21.w, r21.w, r21.x
mul r21.w, r21.w, cb0[66].x
mad r14.x, r21.w, l(0.5), r14.x

        div r11.w, l(1.000000, 1.000000, 1.000000, 1.000000), r11.w
        div r12.w, l(1.000000, 1.000000, 1.000000, 1.000000), r12.w
        mul r15.xy, r11.wwww, r13.xyxx
        mul r16.xy, r12.wwww, r14.xyxx
        mul r13.w, r11.w, r14.z
        mul r14.w, r12.w, r15.z
        add r15.zw, cb0[66].yyyx, l(0.000000, 0.000000, -0.500000, -0.500000)
        lt r16.zw, r15.zzzw, r16.yyyx
        lt r17.xy, r16.yxyy, l(0.500000, 0.500000, 0.000000, 0.000000)
        or r17.xy, r16.zwzz, r17.xyxx
        movc r15.zw, r16.zzzw, -r15.zzzw, l(0,0,-0.500000,-0.500000)
        mad r15.zw, r14.yyyx, r12.wwww, r15.zzzw
        mad r14.xy, r14.yxyy, r12.wwww, -r15.xyxx
        div r14.xy, r15.zwzz, r14.xyxx
        and r14.x, r14.x, r17.x
        max r14.y, r14.y, r14.x
        movc r14.x, r17.y, r14.y, r14.x
        mad r15.zw, r13.yyyx, r11.wwww, -r16.xxxy
        mad r15.zw, r14.xxxx, r15.zzzw, r16.xxxy
        add r14.y, r11.w, -r12.w
        mad r12.w, r14.x, r14.y, r12.w
        mad r14.y, r14.z, r11.w, -r14.w
        mad r14.x, r14.x, r14.y, r14.w
        mad r14.yw, r13.yyyx, r11.wwww, -r15.zzzw
        dp2 r14.y, r14.ywyy, r14.ywyy
        lt r14.y, r14.y, l(0.000100)
        mad r16.xy, r13.yxyy, r11.wwww, l(0.010000, 0.010000, 0.000000, 0.000000)
        movc r16.xy, r14.yyyy, r16.xyxx, r15.zwzz
        mad r16.zw, -r13.yyyx, r11.wwww, r16.xxxy
        lt r13.x, |r16.z|, |r16.w|
        movc r14.yw, r13.xxxx, r15.xxxy, r15.yyyx
        movc r15.xyz, r13.xxxx, r16.ywzy, r16.xzwx
        lt r13.y, l(0.000000), r15.y
        lt r15.w, r15.y, l(0.000000)
        iadd r13.y, -r13.y, r15.w
        itof r16.x, r13.y
        div r13.y, r16.x, r15.y
        mul r16.y, r15.z, r13.y
        mad r14.x, -r14.z, r11.w, r14.x
        mul r14.x, r13.y, r14.x
        add r12.w, -r11.w, r12.w
        mul r12.w, r13.y, r12.w
        mul r13.y, r15.x, r16.x
        ge r15.x, r14.z, l(99999.796875)
        ge r15.y, l(100000.000000), r14.z
        and r15.x, r15.y, r15.x
        mov r17.y, l(1.000000)
        mov r18.x, r13.w
        mov r18.y, r11.w
        mov r19.xy, r14.ywyy
        mov r15.yzw, l(0,-1.000000,-1.000000,0)
        mov r20.y, r14.z
        mov r16.zw, r15.xxxx
        loop 
          mul r17.z, r16.x, r19.x
          ge r17.z, r13.y, r17.z
          ilt r17.w, r15.w, l(150)
          and r17.z, r17.w, r17.z
          not r17.w, r16.w
          and r17.z, r17.w, r17.z
          breakc_z r17.z
          mad r18.xz, r14.xxxx, l(5.000000, 0.000000, 2.500000, 0.000000), r18.xxxx
          mad r18.yw, r12.wwww, l(0.000000, 5.000000, 0.000000, 2.500000), r18.yyyy
          div r20.x, r18.z, r18.w
          lt r17.z, r20.x, r20.y
          movc r17.zw, r17.zzzz, r20.xxxy, r20.yyyx
          movc r15.yz, r13.xxxx, r19.yyxy, r19.xxyx
          mul r18.zw, r15.yyyz, cb0[66].zzzw
          sample_l_indexable(texture2d)(float,float,float,float) r17.x, r18.zwzz, t3.xyzw, s0, l(0.000000)
          dp2 r18.z, r17.xyxx, cb0[11].zwzz
          dp2 r17.x, r17.xyxx, cb0[12].zwzz
          div r17.x, -r18.z, r17.x
          ge r17.z, -r17.x, r17.z
          add r17.x, -r17.x, l(-0.200000)
          ge r17.x, r17.w, r17.x
          and r16.w, r17.x, r17.z
          mad r19.xy, r16.xyxx, l(5.000000, 5.000000, 0.000000, 0.000000), r19.xyxx
          iadd r15.w, r15.w, l(1)
          mov r16.z, r16.w
          mov r20.y, r20.x
        endloop 
        if_nz r16.z
          if_z cb1[8].z
            ftoi r13.xy, r15.yzyy
            imax r13.xy, r13.xyxx, l(0, 0, 0, 0)
            ftoi r14.xy, cb0[66].xyxx
            iadd r14.xy, r14.xyxx, l(-1, -1, 0, 0)
            imin r14.xy, r13.xyxx, r14.xyxx
            mov r14.zw, l(0,0,0,0)
            ldms_indexable(texture2dms)(float,float,float,float) r13.xy, r14.xyzw, t5.xywz, l(0)
            ne r14.zw, r13.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
            and r11.w, r14.w, r14.z
            if_z r11.w
              itof r14.xy, r14.xyxx
              mul r14.zw, r14.xxxy, cb1[8].xxxx
              ftoi r16.xy, r14.zwzz
              mov r16.zw, l(0,0,0,0)
              ld_indexable(texture2d)(float,float,float,float) r14.z, r16.xyzw, t3.zwxy
              mov r14.w, l(1.000000)
              dp2 r11.w, r14.zwzz, cb0[11].zwzz
              dp2 r12.w, r14.zwzz, cb0[12].zwzz
              div r11.w, -r11.w, r12.w
              mad r14.xy, r14.xyxx, cb0[66].zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
              mul r14.xy, r14.xyxx, cb0[0].xyxx
              mul r14.xy, r14.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
              div r11.w, r11.w, cb0[67].x
              mov r14.z, -cb0[67].x
              mul r14.xyz, r11.wwww, r14.xyzx
              mov r14.w, l(1.000000)
              dp4 r16.x, r14.xyzw, cb0[24].xyzw
              dp4 r16.y, r14.xyzw, cb0[25].xyzw
              dp4 r11.w, r14.xyzw, cb0[27].xyzw

// ProjectionMatrix - standard stereo correction:
add r21.w, r11.w, -r21.y
mad r16.x, r21.w, r21.x, r16.x

              dp4 r17.x, r14.xyzw, cb1[0].xyzw
              dp4 r17.y, r14.xyzw, cb1[1].xyzw
              dp4 r12.w, r14.xyzw, cb1[3].xyzw

// CameraSpaceToPreviousProjectedSpace - standard stereo correction:
add r21.w, r12.w, -r21.y
mad r17.x, r21.w, r21.x, r17.x

              max r12.w, r12.w, l(0.000100)
              div r14.xy, r17.xyxx, r12.wwww
              div r14.zw, r16.xxxy, r11.wwww
              add r14.xy, -r14.xyxx, r14.zwzz
              mul r13.xw, r14.xxxy, l(0.500000, 0.000000, 0.000000, 0.500000)
              mov r13.y, -r13.w
            endif 
          else 
            mov r13.xy, l(0,0,0,0)
          endif 
          mad r13.xy, r15.yzyy, cb0[66].zwzz, -r13.xyxx
          mul r14.xy, r13.xyxx, cb0[66].xyxx
          mul r14.xy, r14.xyxx, cb1[8].xxxx
          ftoi r14.xy, r14.xyxx
          mov r14.zw, l(0,0,0,0)
          ld_indexable(texture2d)(float,float,float,float) r14.x, r14.xyzw, t3.xyzw
          mov r14.y, l(1.000000)
          dp2 r11.w, r14.xyxx, cb0[11].zwzz
          dp2 r12.w, r14.xyxx, cb0[12].zwzz
          div r11.w, -r11.w, r12.w
          ge r11.w, r13.z, -r11.w
          not r12.w, r11.w
          add r14.xy, -r15.yzyy, v0.xyxx
          dp2 r13.z, r14.xyxx, r14.xyxx
          sqrt r13.z, r13.z
          ge r14.x, r13.z, l(525.000000)
          add r13.z, r13.z, l(-525.000000)
          mad r13.z, -r13.z, l(0.00444444455), l(1.000000)
          movc r13.z, r14.x, r13.z, l(1.000000)
          add r13.w, -r13.y, l(1.000000)
          mul_sat r14.xy, r13.ywyy, l(10.000000, 10.000000, 0.000000, 0.000000)
          mul r13.w, r14.y, r14.x
          mul r13.z, r13.w, r13.z
          lt r13.w, l(0.137000), r10.z
          mad r14.x, -r10.z, l(4.000000), l(1.000000)
          max r14.x, r14.x, l(0.000000)
          mul r14.x, r13.z, r14.x
          movc r13.z, r13.w, r14.x, r13.z
          movc r11.w, r11.w, r13.z, l(1.000000)
        else 
          mov r13.xy, l(0,0,0,0)
          mov r11.w, l(0)
          mov r12.w, l(0)
        endif 
        if_z r12.w
          lt r12.w, l(0.000000), r11.w
          if_nz r12.w
            mul r5.x, r5.x, cb1[8].y
            sample_l_indexable(texture2d)(float,float,float,float) r13.xyz, r13.xyxx, t4.xyzw, s1, r5.x
          else 
            mov r13.xyz, l(0,0,0,0)
          endif 
        else 
          mov r13.xyz, l(0,0,0,0)
          mov r11.w, l(0)
        endif 
      else 
        mov r13.xyz, l(0,0,0,0)
        mov r11.w, l(0)
      endif 
    else 
      mov r13.xyz, l(0,0,0,0)
      mov r11.w, l(0)
    endif 
  else 
    mov r13.xyz, l(0,0,0,0)
    mov r11.w, l(0)
  endif 
  lt r5.x, l(0.000000), r11.w
  if_nz r5.x
    div r13.xyz, r13.xyzx, cb0[176].wwww
    lt r5.x, r11.w, l(1.000000)
    if_nz r5.x
      if_z cb0[184].z
        mov r0.w, l(1.000000)
        mov r14.xyzw, l(0,0,0,0)
        mov r5.x, l(1.000000)
        mov r12.w, l(0)
        loop 
          uge r15.x, r12.w, l(15)
          breakc_nz r15.x
          imul null, r15.x, r12.w, l(7)
          dp4 r16.x, r0.xyzw, cb0[r15.x + 68].xyzw
          dp4 r16.y, r0.xyzw, cb0[r15.x + 69].xyzw
          dp4 r16.z, r0.xyzw, cb0[r15.x + 70].xyzw
          ge r15.yzw, r16.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
          movc r15.yzw, r15.yyzw, cb0[r15.x + 72].xxyz, cb0[r15.x + 73].xxyz
          add r16.xyz, -|r16.xyzx|, l(1.000000, 1.000000, 1.000000, 0.000000)
          mul_sat r15.yzw, r15.yyzw, r16.xxyz
          mul r15.y, r15.z, r15.y
          mul r15.y, r15.w, r15.y
          lt r15.z, l(0.000000), r15.y
          if_nz r15.z
            dp3 r16.x, r11.xyzx, cb0[r15.x + 68].xyzx
            dp3 r16.y, r11.xyzx, cb0[r15.x + 69].xyzx
            dp3 r16.z, r11.xyzx, cb0[r15.x + 70].xyzx
            mul r15.y, r15.y, cb0[r15.x + 73].w
            mov r16.w, cb0[r15.x + 72].w
            sample_l_indexable(texturecubearray)(float,float,float,float) r16.xyzw, r16.xyzw, t2.xyzw, s2, r10.w
            mul r16.xyzw, r16.xyzw, cb0[r15.x + 74].xxxy
            min r15.x, r5.x, r15.y
            mad r16.xyzw, r16.xyzw, r15.xxxx, r14.xyzw
            add r15.x, r5.x, -r15.x
            ge r15.y, l(0.000000), r15.x
            if_nz r15.y
              mov r14.xyzw, r16.xyzw
              mov r5.x, r15.x
              break 
            endif 
            mov r14.xyzw, r16.xyzw
            mov r5.x, r15.x
          endif 
          iadd r12.w, r12.w, l(1)
        endloop 
      else 
        mov r14.xyzw, l(0,0,0,0)
        mov r5.x, l(1.000000)
      endif 
      add r12.w, r5.x, r14.w
      lt r14.w, l(0.000000), r12.w
      if_nz r14.w
        add r14.w, -|r11.z|, r11.z
        mad r5.x, r5.x, r14.w, |r11.z|
        mad r5.x, r5.x, l(2.000000), l(2.000000)
        div r15.xy, l(-1.000000, 1.000000, 0.000000, 0.000000), r5.xxxx
        mul r15.xy, r11.yxyy, r15.xyxx
        mad r15.xy, r15.xyxx, l(0.950000, 0.950000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        sample_l_indexable(texture2d)(float,float,float,float) r15.xyz, r15.xyxx, t1.xyzw, s1, r10.y
        mov_sat r16.xyz, r15.xyzx
        movc r15.xyz, cb0[184].zzzz, r16.xyzx, r15.xyzx
        div r15.xyz, r15.xyzx, cb0[176].wwww
        mad r14.xyz, r15.xyzx, r12.wwww, r14.xyzx
      endif 
      mov_sat r11.w, r11.w
      add r15.xyz, r13.xyzx, -r14.xyzx
      mad r13.xyz, r11.wwww, r15.xyzx, r14.xyzx
    endif 
  else 
    if_z cb0[184].z
      mov r0.w, l(1.000000)
      mov r13.xyzw, l(0,0,0,0)
      mov r5.x, l(1.000000)
      mov r11.w, l(0)
      loop 
        uge r12.w, r11.w, l(15)
        breakc_nz r12.w
        imul null, r12.w, r11.w, l(7)
        dp4 r14.x, r0.xyzw, cb0[r12.w + 68].xyzw
        dp4 r14.y, r0.xyzw, cb0[r12.w + 69].xyzw
        dp4 r14.z, r0.xyzw, cb0[r12.w + 70].xyzw
        ge r15.xyz, r14.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
        movc r15.xyz, r15.xyzx, cb0[r12.w + 72].xyzx, cb0[r12.w + 73].xyzx
        add r14.xyz, -|r14.xyzx|, l(1.000000, 1.000000, 1.000000, 0.000000)
        mul_sat r14.xyz, r15.xyzx, r14.xyzx
        mul r14.x, r14.y, r14.x
        mul r14.x, r14.z, r14.x
        lt r14.y, l(0.000000), r14.x
        if_nz r14.y
          dp3 r15.x, r11.xyzx, cb0[r12.w + 68].xyzx
          dp3 r15.y, r11.xyzx, cb0[r12.w + 69].xyzx
          dp3 r15.z, r11.xyzx, cb0[r12.w + 70].xyzx
          mul r14.x, r14.x, cb0[r12.w + 73].w
          mov r15.w, cb0[r12.w + 72].w
          sample_l_indexable(texturecubearray)(float,float,float,float) r15.xyzw, r15.xyzw, t2.xyzw, s2, r10.w
          mul r15.xyzw, r15.xyzw, cb0[r12.w + 74].xxxy
          min r12.w, r5.x, r14.x
          mad r14.xyzw, r15.xyzw, r12.wwww, r13.xyzw
          add r12.w, r5.x, -r12.w
          ge r15.x, l(0.000000), r12.w
          if_nz r15.x
            mov r13.xyzw, r14.xyzw
            mov r5.x, r12.w
            break 
          endif 
          mov r13.xyzw, r14.xyzw
          mov r5.x, r12.w
        endif 
        iadd r11.w, r11.w, l(1)
      endloop 
    else 
      mov r13.xyzw, l(0,0,0,0)
      mov r5.x, l(1.000000)
    endif 
    add r10.w, r5.x, r13.w
    lt r11.w, l(0.000000), r10.w
    if_nz r11.w
      add r11.w, -|r11.z|, r11.z
      mad r5.x, r5.x, r11.w, |r11.z|
      mad r5.x, r5.x, l(2.000000), l(2.000000)
      div r11.zw, l(0.000000, 0.000000, -1.000000, 1.000000), r5.xxxx
      mul r11.xy, r11.zwzz, r11.yxyy
      mad r11.xy, r11.xyxx, l(0.950000, 0.950000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      sample_l_indexable(texture2d)(float,float,float,float) r11.xyz, r11.xyxx, t1.xyzw, s1, r10.y
      mov_sat r14.xyz, r11.xyzx
      movc r11.xyz, cb0[184].zzzz, r14.xyzx, r11.xyzx
      div r11.xyz, r11.xyzx, cb0[176].wwww
      mad r13.xyz, r11.xyzx, r10.wwww, r13.xyzx
    endif 
  endif 
  mad r2.xyz, r2.xyzx, r4.wwww, -r9.yyyy
  mad r2.xyz, r1.xxxx, r2.xyzx, r9.yyyy
  dp3 r5.x, r2.xyzx, l(0.333333343, 0.333333343, 0.333333343, 0.000000)
  mul_sat r5.x, r5.x, l(50.000000)
  sample_l_indexable(texture2d)(float,float,float,float) r10.xy, r10.xzxx, t0.xyzw, s1, l(0.000000)
  mad r2.xyz, r2.xyzx, r10.xxxx, r10.yyyy
  mul r2.xyz, r5.xxxx, r2.xyzx
  mul r2.xyz, r2.xyzx, r13.xyzx
  mul r2.xyz, r4.wwww, r2.xyzx
  mul r9.xyz, r6.wwww, -r9.xzwx
  exp r9.xyz, r9.xyzx
  mad r9.xyz, r2.xyzx, r9.xyzx, r12.xyzx
  movc r2.xyz, r7.wwww, r2.xyzx, r9.xyzx
  dp3 r5.x, r2.xyzx, l(0.212639, 0.715168655, 0.0721923187, 0.000000)
else 
  mul r1.y, r1.y, r1.y
  max r9.z, r1.y, l(0.001000)
  ieq r10.xy, r1.wwww, l(2, 5, 0, 0)
  if_nz r10.x
    and r1.y, r5.z, l(0x0000ff00)
    utof r6.y, r1.y
    mov r6.z, r1.z
    mad r6.yzw, r6.xxyz, l(0.000000, 0.00784313772, 0.0000306372567, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
    add r1.y, -r2.w, l(1.000000)
    mul r1.y, r1.y, r8.y
    mad r8.x, r1.y, l(0.500000), r8.y
    dp3 r1.y, r6.yzwy, r6.yzwy
    rsq r1.y, r1.y
    mul r6.yzw, r1.yyyy, r6.yyzw
    mov r1.z, l(0.500000)
    mov r10.x, r1.x
    mov r10.z, l(0)
  else 
    ieq r1.y, r1.w, l(3)
    if_nz r1.y
      and r11.xyzw, r5.zzzz, l(0x0000f800, 2016, 31, 31)
      utof r11.xyzw, r11.xyzw
      ge r12.xyz, l(1.253950, 81.547195, 2568.089600, 0.000000), r11.wyxw
      mul r1.y, r11.w, l(0.00249675405)
      mad r13.xyz, r11.zyxz, l(0.0322580636, 0.000496031775, 0.0000157510076, 0.000000), l(0.055000, 0.055000, 0.055000, 0.000000)
      mul r13.xyz, r13.xyzx, l(0.947867334, 0.947867334, 0.947867334, 0.000000)
      log r13.xyz, r13.xyzx
      mul r13.xyz, r13.xyzx, l(2.400000, 2.400000, 2.400000, 0.000000)
      exp r13.xyz, r13.xyzx
      movc r6.y, r12.x, r1.y, r13.x
      mul r11.xy, r11.yxyy, l(0.0000383925508, 0.00000121911819, 0.000000, 0.000000)
      movc r6.zw, r12.yyyz, r11.xxxy, r13.yyyz
      mov r10.x, r1.x
      mov r10.z, l(0)
    else 
      if_nz r5.y
        mad r1.y, r3.w, l(32767.000000), l(32767.000000)
        ftou r1.y, r1.y
        and r2.w, r1.y, l(255)
        utof r2.w, r2.w
        mul r2.w, r2.w, l(0.0123199718)
        ubfe r1.y, l(8), l(8), r1.y
        utof r1.y, r1.y
        mad r1.y, r1.y, l(0.0246399436), l(-3.14159274)
        sincos r11.x, r12.x, r2.w
        sincos r13.x, r14.x, r1.y
        mul r14.x, r11.x, r14.x
        mul r14.y, r11.x, r13.x
        mov r14.z, r12.x
        dp3 r1.y, r14.xyzx, r14.xyzx
        rsq r1.y, r1.y
        mul r6.yzw, r1.yyyy, r14.xxyz
        mov r10.x, r1.x
        mov r10.z, l(0)
      else 
        ieq r1.y, r1.w, l(5)
        lt r2.w, r3.z, l(0.900000)
        movc r11.xyz, r2.wwww, l(0,1.000000,0,0), l(1.000000,0,0,0)
        mul r12.xyz, r3.zxyz, r11.xyzx
        mad r11.xyz, r3.yzxy, r11.yzxy, -r12.xyzx
        dp3 r2.w, r11.xyzx, r11.xyzx
        rsq r2.w, r2.w
        mul r11.xyz, r2.wwww, r11.xyzx
        mul r12.xyz, r3.zxyz, r11.yzxy
        mad r3.xyz, r3.yzxy, r11.zxyz, -r12.xyzx
        dp3 r2.w, r3.xyzx, r3.xyzx
        rsq r2.w, r2.w
        mul r3.xyz, r2.wwww, r3.xyzx
        mad r2.w, r3.w, l(2.000000), l(-1.000000)
        mul r2.w, r2.w, l(3.14159274)
        sincos r12.x, r13.x, r2.w
        mul r11.xyz, r11.xyzx, r12.xxxx
        mad r3.xyz, r3.xyzx, r13.xxxx, r11.xyzx
        mul r11.x, r6.x, l(0.00392156886)
        and r2.w, r5.z, l(0x0000ff00)
        utof r2.w, r2.w
        mad r11.y, r2.w, l(0.0000306372567), l(-1.000000)
        movc r11.xy, r1.wwww, l(0,0,0,0), r11.xyxx
        mov r11.z, l(0)
        movc r6.yzw, r1.yyyy, r3.xxyz, r11.xxzz
        mov r11.w, r1.x
        movc r10.xz, r1.yyyy, l(0,0,0,0), r11.wwyw
      endif 
    endif 
    mov r8.x, r8.y
  endif 
  if_nz r10.y
    dp3 r1.x, -r7.xyzx, r4.xyzx
    add r1.x, r1.x, r1.x
    mad r1.xyw, r4.xyxz, -r1.xxxx, -r7.xyxz
    dp3 r2.w, r1.xywx, r6.yzwy
    dp3 r1.x, r1.xywx, r4.xyzx
    mul r1.xyw, r1.xxxx, r4.xyxz
    mad r1.xyw, r6.yzyw, r2.wwww, r1.xyxw
    dp3 r2.w, r6.yzwy, r7.xyzx
    mad r2.w, -r2.w, r2.w, l(1.000000)
    sqrt r2.w, r2.w
    mul r3.x, r9.z, r9.z
    div r3.x, l(2.000000), r3.x
    add r3.x, r3.x, l(-2.000000)
    max r3.x, r3.x, l(1.000000031E-022)
    sqrt r3.x, r3.x
    div r3.x, l(-10.000000), r3.x
    exp r3.x, r3.x
    add r3.x, r3.x, l(-0.000980)
    mul_sat r3.x, r3.x, l(1.00795019)
    add r3.x, -r3.x, l(1.000000)
    if_z cb0[184].z
      mul r3.y, r3.x, cb0[174].w
      mov r0.w, l(1.000000)
      mov r6.xyzw, l(0,0,0,0)
      mov r3.zw, l(0,0,1.000000,0)
      loop 
        uge r5.y, r3.w, l(15)
        breakc_nz r5.y
        imul null, r5.y, r3.w, l(7)
        dp4 r11.x, r0.xyzw, cb0[r5.y + 68].xyzw
        dp4 r11.y, r0.xyzw, cb0[r5.y + 69].xyzw
        dp4 r11.z, r0.xyzw, cb0[r5.y + 70].xyzw
        ge r12.xyz, r11.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
        movc r12.xyz, r12.xyzx, cb0[r5.y + 72].xyzx, cb0[r5.y + 73].xyzx
        add r11.xyz, -|r11.xyzx|, l(1.000000, 1.000000, 1.000000, 0.000000)
        mul_sat r11.xyz, r12.xyzx, r11.xyzx
        mul r5.z, r11.y, r11.x
        mul r5.z, r11.z, r5.z
        lt r7.w, l(0.000000), r5.z
        if_nz r7.w
          dp3 r11.x, r1.xywx, cb0[r5.y + 68].xyzx
          dp3 r11.y, r1.xywx, cb0[r5.y + 69].xyzx
          dp3 r11.z, r1.xywx, cb0[r5.y + 70].xyzx
          mul r5.z, r5.z, cb0[r5.y + 73].w
          mov r11.w, cb0[r5.y + 72].w
          sample_l_indexable(texturecubearray)(float,float,float,float) r11.xyzw, r11.xyzw, t2.xyzw, s2, r3.y
          mul r11.xyzw, r11.xyzw, cb0[r5.y + 74].xxxy
          min r5.y, r3.z, r5.z
          mad r11.xyzw, r11.xyzw, r5.yyyy, r6.xyzw
          add r5.y, r3.z, -r5.y
          ge r5.z, l(0.000000), r5.y
          if_nz r5.z
            mov r6.xyzw, r11.xyzw
            mov r3.z, r5.y
            break 
          endif 
          mov r6.xyzw, r11.xyzw
          mov r3.z, r5.y
        endif 
        iadd r3.w, r3.w, l(1)
      endloop 
    else 
      mov r6.xyzw, l(0,0,0,0)
      mov r3.z, l(1.000000)
    endif 
    add r3.y, r3.z, r6.w
    lt r3.w, l(0.000000), r3.y
    if_nz r3.w
      mul r3.x, r3.x, cb0[183].w
      add r3.w, -|r1.w|, r1.w
      mad r1.w, r3.z, r3.w, |r1.w|
      mad r1.w, r1.w, l(2.000000), l(2.000000)
      div r3.zw, l(0.000000, 0.000000, -1.000000, 1.000000), r1.wwww
      mul r1.xy, r1.yxyy, r3.zwzz
      mad r1.xy, r1.xyxx, l(0.950000, 0.950000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      sample_l_indexable(texture2d)(float,float,float,float) r1.xyw, r1.xyxx, t1.xywz, s1, r3.x
      mov_sat r3.xzw, r1.xxyw
      movc r1.xyw, cb0[184].zzzz, r3.xzxw, r1.xyxw
      div r1.xyw, r1.xyxw, cb0[176].wwww
      mad r6.xyz, r1.xywx, r3.yyyy, r6.xyzx
    endif 
    sqrt r1.xyw, r8.xzxw
    dp3 r3.x, r8.xzwx, l(0.212639, 0.715168655, 0.0721923187, 0.000000)
    mad r1.xyw, r1.xyxw, l(4.000000, 4.000000, 0.000000, 4.000000), -r4.wwww
    mad r1.xyw, r3.xxxx, r1.xyxw, r4.wwww
    mul r1.xyw, r1.xyxw, r6.xyxz
    mul r3.x, r1.z, l(0.080000)
    mad r3.yzw, -r1.zzzz, l(0.000000, 0.080000, 0.080000, 0.080000), r8.xxzw
    mad r3.xyz, r10.xxxx, r3.yzwy, r3.xxxx
    dp3 r3.w, r3.xyzx, l(0.333333343, 0.333333343, 0.333333343, 0.000000)
    mul_sat r3.w, r3.w, l(50.000000)
    dp3_sat r9.y, r4.xyzx, r7.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r5.yz, r9.yzyy, t0.zxyw, s1, l(0.000000)
    mad r3.xyz, r3.xyzx, r5.yyyy, r5.zzzz
    mul r3.xyz, r3.wwww, r3.xyzx
    mul r3.xyz, r2.wwww, r3.xyzx
    mul r2.xyz, r1.xywx, r3.xyzx
    dp3 r5.x, r2.xyzx, l(0.212639, 0.715168655, 0.0721923187, 0.000000)
  else 
    add_sat r1.x, r9.z, r10.z
    dp3 r1.y, -r7.xyzx, r4.xyzx
    add r1.y, r1.y, r1.y
    mad r3.xyz, r4.xyzx, -r1.yyyy, -r7.xyzx
    mul r1.y, r1.x, r1.x
    div r1.y, l(2.000000), r1.y
    add r1.y, r1.y, l(-2.000000)
    max r1.y, r1.y, l(1.000000031E-022)
    sqrt r1.y, r1.y
    div r1.y, l(-10.000000), r1.y
    exp r1.y, r1.y
    add r1.y, r1.y, l(-0.000980)
    mul_sat r1.y, r1.y, l(1.00795019)
    add r1.y, -r1.y, l(1.000000)
    mul r1.w, r1.y, cb0[183].w
    mul r2.w, r1.y, cb0[174].w
    if_z r5.w
      ge r3.w, l(0.250000), r1.x
      if_nz r3.w
        ge r3.w, r4.z, l(0.250000)
        if_nz r3.w
          mov r0.w, l(1.000000)
          dp4 r6.x, r0.xyzw, cb0[51].xyzw
          dp4 r6.y, r0.xyzw, cb0[52].xyzw
          dp4 r6.z, r0.xyzw, cb0[53].xyzw
          dp3 r11.x, r4.xyzx, cb0[51].xyzx
          dp3 r11.y, r4.xyzx, cb0[52].xyzx
          dp3 r11.z, r4.xyzx, cb0[53].xyzx
          dp3 r5.y, r3.xyzx, cb0[51].xyzx
          dp3 r5.z, r3.xyzx, cb0[52].xyzx
          dp3 r5.w, r3.xyzx, cb0[53].xyzx
          dp3 r3.w, r5.yzwy, r5.yzwy
          rsq r3.w, r3.w
          mul r12.yzw, r3.wwww, r5.yyzw
          dp2 r3.w, v0.xxxx, cb0[66].zzzz
          add r3.w, r3.w, l(-1.000000)
          log r3.w, |r3.w|
          mul r3.w, r3.w, l(10.000000)
          exp r3.w, r3.w
          mad r3.w, r3.w, l(0.100000), l(1.000000)
          div r12.x, r12.y, r3.w
          mul r3.w, r6.z, l(-0.010000)
          max r3.w, r3.w, l(0.001000)
          mad r11.xyz, r11.xyzx, r3.wwww, r6.xyzx
          mad r12.xyz, r12.xzwx, l(1000.000000, 1000.000000, 1000.000000, 0.000000), r11.xyzx
          mov r11.w, l(1.000000)
          dp4 r6.y, r11.xyzw, cb1[4].xyzw
          dp4 r6.x, r11.xyzw, cb1[5].xyzw
          dp4 r3.w, r11.xyzw, cb1[7].xyzw

// ProjectToPixelMatrix - stereo correction * resolution / 2:
add r21.w, r3.w, -r21.y
mul r21.w, r21.w, r21.x
mul r21.w, r21.w, cb0[66].x
mad r6.y, r21.w, l(0.5), r6.y

          mov r12.w, l(1.000000)
          dp4 r11.x, r12.xyzw, cb1[4].xyzw
          dp4 r11.y, r12.xyzw, cb1[5].xyzw
          dp4 r5.y, r12.xyzw, cb1[7].xyzw

// ProjectToPixelMatrix - stereo correction * resolution / 2:
add r21.w, r5.y, -r21.y
mul r21.w, r21.w, r21.x
mul r21.w, r21.w, cb0[66].x
mad r11.x, r21.w, l(0.5), r11.x

          div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
          div r5.y, l(1.000000, 1.000000, 1.000000, 1.000000), r5.y
          mul r5.zw, r3.wwww, r6.xxxy
          mul r9.yw, r5.yyyy, r11.xxxy
          mul r6.w, r3.w, r11.z
          mul r7.w, r5.y, r12.z
          add r10.yz, cb0[66].yyxy, l(0.000000, -0.500000, -0.500000, 0.000000)
          lt r12.xy, r10.yzyy, r9.wyww
          lt r12.zw, r9.wwwy, l(0.000000, 0.000000, 0.500000, 0.500000)
          or r12.zw, r12.zzzw, r12.xxxy
          movc r10.yz, r12.xxyx, -r10.yyzy, l(0,-0.500000,-0.500000,0)
          mad r10.yz, r11.yyxy, r5.yyyy, r10.yyzy
          mad r11.xy, r11.yxyy, r5.yyyy, -r5.zwzz
          div r10.yz, r10.yyzy, r11.xxyx
          and r8.y, r10.y, r12.z
          max r10.y, r10.z, r8.y
          movc r8.y, r12.w, r10.y, r8.y
          mad r10.yz, r6.yyxy, r3.wwww, -r9.yywy
          mad r9.yw, r8.yyyy, r10.yyyz, r9.yyyw
          add r10.y, r3.w, -r5.y
          mad r5.y, r8.y, r10.y, r5.y
          mad r10.y, r11.z, r3.w, -r7.w
          mad r7.w, r8.y, r10.y, r7.w
          mad r10.yz, r6.yyxy, r3.wwww, -r9.yywy
          dp2 r8.y, r10.yzyy, r10.yzyy
          lt r8.y, r8.y, l(0.000100)
          mad r10.yz, r6.yyxy, r3.wwww, l(0.000000, 0.010000, 0.010000, 0.000000)
          movc r12.xy, r8.yyyy, r10.yzyy, r9.ywyy
          mad r12.zw, -r6.yyyx, r3.wwww, r12.xxxy
          lt r6.x, |r12.z|, |r12.w|
          movc r5.zw, r6.xxxx, r5.zzzw, r5.wwwz
          movc r10.yzw, r6.xxxx, r12.yywz, r12.xxzw
          lt r6.y, l(0.000000), r10.z
          lt r8.y, r10.z, l(0.000000)
          iadd r6.y, -r6.y, r8.y
          itof r11.x, r6.y
          div r6.y, r11.x, r10.z
          mul r11.y, r10.w, r6.y
          mad r7.w, -r11.z, r3.w, r7.w
          mul r7.w, r6.y, r7.w
          add r5.y, -r3.w, r5.y
          mul r5.y, r6.y, r5.y
          mul r6.y, r10.y, r11.x
          ge r8.y, r11.z, l(99999.796875)
          ge r9.y, l(100000.000000), r11.z
          and r8.y, r8.y, r9.y
          mov r12.y, l(1.000000)
          mov r13.x, r6.w
          mov r13.y, r3.w
          mov r9.yw, l(0,-1.000000,0,-1.000000)
          mov r14.xy, r5.zwzz
          mov r10.y, l(0)
          mov r15.y, r11.z
          mov r10.zw, r8.yyyy
          loop 
            mul r11.w, r11.x, r14.x
            ge r11.w, r6.y, r11.w
            ilt r12.z, r10.y, l(150)
            and r11.w, r11.w, r12.z
            not r12.z, r10.w
            and r11.w, r11.w, r12.z
            breakc_z r11.w
            mad r13.xz, r7.wwww, l(5.000000, 0.000000, 2.500000, 0.000000), r13.xxxx
            mad r13.yw, r5.yyyy, l(0.000000, 5.000000, 0.000000, 2.500000), r13.yyyy
            div r15.x, r13.z, r13.w
            lt r11.w, r15.x, r15.y
            movc r12.zw, r11.wwww, r15.xxxy, r15.yyyx
            movc r9.yw, r6.xxxx, r14.yyyx, r14.xxxy
            mul r13.zw, r9.yyyw, cb0[66].zzzw
            sample_l_indexable(texture2d)(float,float,float,float) r12.x, r13.zwzz, t3.xyzw, s0, l(0.000000)
            dp2 r11.w, r12.xyxx, cb0[11].zwzz
            dp2 r12.x, r12.xyxx, cb0[12].zwzz
            div r11.w, -r11.w, r12.x
            ge r12.x, -r11.w, r12.z
            add r11.w, -r11.w, l(-0.200000)
            ge r11.w, r12.w, r11.w
            and r10.w, r11.w, r12.x
            mad r14.xy, r11.xyxx, l(5.000000, 5.000000, 0.000000, 0.000000), r14.xyxx
            iadd r10.y, r10.y, l(1)
            mov r10.yz, r10.yywy
            mov r15.y, r15.x
          endloop 
          if_nz r10.z
            if_z cb1[8].z
              ftoi r5.yz, r9.yywy
              imax r5.yz, r5.yyzy, l(0, 0, 0, 0)
              ftoi r6.xy, cb0[66].xyxx
              iadd r6.xy, r6.xyxx, l(-1, -1, 0, 0)
              imin r11.xy, r5.yzyy, r6.xyxx
              mov r11.zw, l(0,0,0,0)
              ldms_indexable(texture2dms)(float,float,float,float) r5.yz, r11.xyzw, t5.wxyz, l(0)
              ne r6.xy, r5.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
              and r3.w, r6.y, r6.x
              if_z r3.w
                itof r6.xy, r11.xyxx
                mul r10.yz, r6.xxyx, cb1[8].xxxx
                ftoi r11.xy, r10.yzyy
                mov r11.zw, l(0,0,0,0)
                ld_indexable(texture2d)(float,float,float,float) r10.y, r11.xyzw, t3.zxyw
                mov r10.z, l(1.000000)
                dp2 r3.w, r10.yzyy, cb0[11].zwzz
                dp2 r6.w, r10.yzyy, cb0[12].zwzz
                div r3.w, -r3.w, r6.w
                mad r6.xy, r6.xyxx, cb0[66].zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
                mul r6.xy, r6.xyxx, cb0[0].xyxx
                mul r11.xy, r6.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
                div r3.w, r3.w, cb0[67].x
                mov r11.z, -cb0[67].x
                mul r11.xyz, r3.wwww, r11.xyzx
                mov r11.w, l(1.000000)
                dp4 r6.x, r11.xyzw, cb0[24].xyzw
                dp4 r6.y, r11.xyzw, cb0[25].xyzw
                dp4 r3.w, r11.xyzw, cb0[27].xyzw

// ProjectionMatrix - standard stereo correction:
add r21.w, r3.w, -r21.y
mad r6.x, r21.w, r21.x, r6.x

                dp4 r12.x, r11.xyzw, cb1[0].xyzw
                dp4 r12.y, r11.xyzw, cb1[1].xyzw
                dp4 r6.w, r11.xyzw, cb1[3].xyzw

// CameraSpaceToPreviousProjectedSpace - standard stereo correction:
add r21.w, r6.w, -r21.y
mad r12.x, r21.w, r21.x, r12.x

                max r6.w, r6.w, l(0.000100)
                div r10.yz, r12.xxyx, r6.wwww
                div r6.xy, r6.xyxx, r3.wwww
                add r6.xy, -r10.yzyy, r6.xyxx
                mul r5.yw, r6.xxxy, l(0.000000, 0.500000, 0.000000, 0.500000)
                mov r5.z, -r5.w
              endif 
            else 
              mov r5.yz, l(0,0,0,0)
            endif 
            mad r5.yz, r9.yywy, cb0[66].zzwz, -r5.yyzy
            mul r6.xy, r5.yzyy, cb0[66].xyxx
            mul r6.xy, r6.xyxx, cb1[8].xxxx
            ftoi r11.xy, r6.xyxx
            mov r11.zw, l(0,0,0,0)
            ld_indexable(texture2d)(float,float,float,float) r6.x, r11.xyzw, t3.xyzw
            mov r6.y, l(1.000000)
            dp2 r3.w, r6.xyxx, cb0[11].zwzz
            dp2 r6.x, r6.xyxx, cb0[12].zwzz
            div r3.w, -r3.w, r6.x
            ge r3.w, r6.z, -r3.w
            not r6.x, r3.w
            add r6.yz, -r9.yywy, v0.xxyx
            dp2 r6.y, r6.yzyy, r6.yzyy
            sqrt r6.y, r6.y
            ge r6.z, r6.y, l(525.000000)
            add r6.y, r6.y, l(-525.000000)
            mad r6.y, -r6.y, l(0.00444444455), l(1.000000)
            movc r6.y, r6.z, r6.y, l(1.000000)
            add r5.w, -r5.z, l(1.000000)
            mul_sat r6.zw, r5.zzzw, l(0.000000, 0.000000, 10.000000, 10.000000)
            mul r5.w, r6.w, r6.z
            mul r5.w, r5.w, r6.y
            lt r6.y, l(0.137000), r1.x
            mad r1.x, -r1.x, l(4.000000), l(1.000000)
            max r1.x, r1.x, l(0.000000)
            mul r1.x, r1.x, r5.w
            movc r1.x, r6.y, r1.x, r5.w
            movc r1.x, r3.w, r1.x, l(1.000000)
          else 
            mov r5.yz, l(0,0,0,0)
            mov r1.x, l(0)
            mov r6.x, l(0)
          endif 
          if_z r6.x
            lt r3.w, l(0.000000), r1.x
            if_nz r3.w
              mul r1.y, r1.y, cb1[8].y
              sample_l_indexable(texture2d)(float,float,float,float) r5.yzw, r5.yzyy, t4.wxyz, s1, r1.y
            else 
              mov r5.yzw, l(0,0,0,0)
            endif 
          else 
            mov r5.yzw, l(0,0,0,0)
            mov r1.x, l(0)
          endif 
        else 
          mov r5.yzw, l(0,0,0,0)
          mov r1.x, l(0)
        endif 
      else 
        mov r5.yzw, l(0,0,0,0)
        mov r1.x, l(0)
      endif 
    else 
      mov r5.yzw, l(0,0,0,0)
      mov r1.x, l(0)
    endif 
    lt r1.y, l(0.000000), r1.x
    if_nz r1.y
      div r6.xyz, r5.yzwy, cb0[176].wwww
      lt r1.y, r1.x, l(1.000000)
      if_nz r1.y
        if_z cb0[184].z
          mov r0.w, l(1.000000)
          mov r11.xyzw, l(0,0,0,0)
          mov r1.y, l(1.000000)
          mov r3.w, l(0)
          loop 
            uge r5.y, r3.w, l(15)
            breakc_nz r5.y
            imul null, r5.y, r3.w, l(7)
            dp4 r12.x, r0.xyzw, cb0[r5.y + 68].xyzw
            dp4 r12.y, r0.xyzw, cb0[r5.y + 69].xyzw
            dp4 r12.z, r0.xyzw, cb0[r5.y + 70].xyzw
            ge r10.yzw, r12.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
            movc r10.yzw, r10.yyzw, cb0[r5.y + 72].xxyz, cb0[r5.y + 73].xxyz
            add r12.xyz, -|r12.xyzx|, l(1.000000, 1.000000, 1.000000, 0.000000)
            mul_sat r10.yzw, r10.yyzw, r12.xxyz
            mul r5.z, r10.z, r10.y
            mul r5.z, r10.w, r5.z
            lt r5.w, l(0.000000), r5.z
            if_nz r5.w
              dp3 r12.x, r3.xyzx, cb0[r5.y + 68].xyzx
              dp3 r12.y, r3.xyzx, cb0[r5.y + 69].xyzx
              dp3 r12.z, r3.xyzx, cb0[r5.y + 70].xyzx
              mul r5.z, r5.z, cb0[r5.y + 73].w
              mov r12.w, cb0[r5.y + 72].w
              sample_l_indexable(texturecubearray)(float,float,float,float) r12.xyzw, r12.xyzw, t2.xyzw, s2, r2.w
              mul r12.xyzw, r12.xyzw, cb0[r5.y + 74].xxxy
              min r5.y, r1.y, r5.z
              mad r12.xyzw, r12.xyzw, r5.yyyy, r11.xyzw
              add r5.y, r1.y, -r5.y
              ge r5.z, l(0.000000), r5.y
              if_nz r5.z
                mov r11.xyzw, r12.xyzw
                mov r1.y, r5.y
                break 
              endif 
              mov r11.xyzw, r12.xyzw
              mov r1.y, r5.y
            endif 
            iadd r3.w, r3.w, l(1)
          endloop 
        else 
          mov r11.xyzw, l(0,0,0,0)
          mov r1.y, l(1.000000)
        endif 
        add r3.w, r1.y, r11.w
        lt r5.y, l(0.000000), r3.w
        if_nz r5.y
          add r5.y, -|r3.z|, r3.z
          mad r1.y, r1.y, r5.y, |r3.z|
          mad r1.y, r1.y, l(2.000000), l(2.000000)
          div r5.yz, l(0.000000, -1.000000, 1.000000, 0.000000), r1.yyyy
          mul r5.yz, r3.yyxy, r5.yyzy
          mad r5.yz, r5.yyzy, l(0.000000, 0.950000, 0.950000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
          sample_l_indexable(texture2d)(float,float,float,float) r5.yzw, r5.yzyy, t1.wxyz, s1, r1.w
          mov_sat r10.yzw, r5.yyzw
          movc r5.yzw, cb0[184].zzzz, r10.yyzw, r5.yyzw
          div r5.yzw, r5.yyzw, cb0[176].wwww
          mad r11.xyz, r5.yzwy, r3.wwww, r11.xyzx
        endif 
        mov_sat r1.x, r1.x
        add r5.yzw, r6.xxyz, -r11.xxyz
        mad r6.xyz, r1.xxxx, r5.yzwy, r11.xyzx
      endif 
    else 
      if_z cb0[184].z
        mov r0.w, l(1.000000)
        mov r6.xyzw, l(0,0,0,0)
        mov r1.xy, l(1.000000,0,0,0)
        loop 
          uge r3.w, r1.y, l(15)
          breakc_nz r3.w
          imul null, r3.w, r1.y, l(7)
          dp4 r11.x, r0.xyzw, cb0[r3.w + 68].xyzw
          dp4 r11.y, r0.xyzw, cb0[r3.w + 69].xyzw
          dp4 r11.z, r0.xyzw, cb0[r3.w + 70].xyzw
          ge r5.yzw, r11.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
          movc r5.yzw, r5.yyzw, cb0[r3.w + 72].xxyz, cb0[r3.w + 73].xxyz
          add r10.yzw, -|r11.xxyz|, l(0.000000, 1.000000, 1.000000, 1.000000)
          mul_sat r5.yzw, r5.yyzw, r10.yyzw
          mul r5.y, r5.z, r5.y
          mul r5.y, r5.w, r5.y
          lt r5.z, l(0.000000), r5.y
          if_nz r5.z
            dp3 r11.x, r3.xyzx, cb0[r3.w + 68].xyzx
            dp3 r11.y, r3.xyzx, cb0[r3.w + 69].xyzx
            dp3 r11.z, r3.xyzx, cb0[r3.w + 70].xyzx
            mul r5.y, r5.y, cb0[r3.w + 73].w
            mov r11.w, cb0[r3.w + 72].w
            sample_l_indexable(texturecubearray)(float,float,float,float) r11.xyzw, r11.xyzw, t2.xyzw, s2, r2.w
            mul r11.xyzw, r11.xyzw, cb0[r3.w + 74].xxxy
            min r3.w, r1.x, r5.y
            mad r11.xyzw, r11.xyzw, r3.wwww, r6.xyzw
            add r3.w, r1.x, -r3.w
            ge r5.y, l(0.000000), r3.w
            if_nz r5.y
              mov r6.xyzw, r11.xyzw
              mov r1.x, r3.w
              break 
            endif 
            mov r6.xyzw, r11.xyzw
            mov r1.x, r3.w
          endif 
          iadd r1.y, r1.y, l(1)
        endloop 
      else 
        mov r6.xyzw, l(0,0,0,0)
        mov r1.x, l(1.000000)
      endif 
      add r0.x, r1.x, r6.w
      lt r0.y, l(0.000000), r0.x
      if_nz r0.y
        add r0.y, -|r3.z|, r3.z
        mad r0.y, r1.x, r0.y, |r3.z|
        mad r0.y, r0.y, l(2.000000), l(2.000000)
        div r0.yz, l(0.000000, -1.000000, 1.000000, 0.000000), r0.yyyy
        mul r0.yz, r0.yyzy, r3.yyxy
        mad r0.yz, r0.yyzy, l(0.000000, 0.950000, 0.950000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
        sample_l_indexable(texture2d)(float,float,float,float) r0.yzw, r0.yzyy, t1.wxyz, s1, r1.w
        mov_sat r1.xyw, r0.yzyw
        movc r0.yzw, cb0[184].zzzz, r1.xxyw, r0.yyzw
        div r0.yzw, r0.yyzw, cb0[176].wwww
        mad r6.xyz, r0.yzwy, r0.xxxx, r6.xyzx
      endif 
    endif 
    mul r0.x, r1.z, l(0.080000)
    mad r0.yzw, -r1.zzzz, l(0.000000, 0.080000, 0.080000, 0.080000), r8.xxzw
    mad r0.xyz, r10.xxxx, r0.yzwy, r0.xxxx
    dp3 r0.w, r0.xyzx, l(0.333333343, 0.333333343, 0.333333343, 0.000000)
    mul_sat r0.w, r0.w, l(50.000000)
    dp3_sat r9.x, r4.xyzx, r7.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r1.xy, r9.xzxx, t0.xyzw, s1, l(0.000000)
    mad r0.xyz, r0.xyzx, r1.xxxx, r1.yyyy
    mul r0.xyz, r0.wwww, r0.xyzx
    mul r0.xyz, r0.xyzx, r6.xyzx
    mul r2.xyz, r4.wwww, r0.xyzx
    dp3 r5.x, r2.xyzx, l(0.212639, 0.715168655, 0.0721923187, 0.000000)
  endif 
endif 
mul r0.xyz, r2.xyzx, cb0[176].wwww
max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
min o0.xyz, r0.xyzx, l(64512.000000, 64512.000000, 64512.000000, 0.000000)
mul r0.x, r5.x, cb0[176].w
max r0.x, r0.x, l(0.000000)
min o0.w, r0.x, l(64512.000000)
ret 
// Approximately 1397 instruction slots used