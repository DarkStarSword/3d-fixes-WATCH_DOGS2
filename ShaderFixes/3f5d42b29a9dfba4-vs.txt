// asmtool.py --auto-fix-vertex-halo -i --only-autofixed 3f5d42b29a9dfba4-vs.txt
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.42 on Tue Dec 27 11:05:08 2016
//
//
// Buffer Definitions: 
//
// cbuffer Viewport
// {
//
//   float4 CameraNearPlaneSize;        // Offset:    0 Size:    16 [unused]
//   float4x4 DepthTextureTransform;    // Offset:   16 Size:    64 [unused]
//   float4 FSMClipPlanes;              // Offset:   80 Size:    16 [unused]
//   float4 FacettedShadowCastParams;   // Offset:   96 Size:    16 [unused]
//   float4 FogValues0;                 // Offset:  112 Size:    16 [unused]
//   float4 FogValues1;                 // Offset:  128 Size:    16 [unused]
//   float4x4 InvProjectionMatrix;      // Offset:  144 Size:    64 [unused]
//   float4x4 InvProjectionMatrixDepth; // Offset:  208 Size:    64 [unused]
//   float4x3 InvViewMatrix;            // Offset:  272 Size:    48 [unused]
//   float4x4 PreviousViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4x4 ProjectionMatrix;         // Offset:  384 Size:    64 [unused]
//   float4 RainOcclusionFadeParams;    // Offset:  448 Size:    16 [unused]
//   float4x4 RainOcclusionProjectionMatrix;// Offset:  464 Size:    64 [unused]
//   float4 RainOcclusionShadowMapSize; // Offset:  528 Size:    16 [unused]
//   float4 ReflectionVolumeDebugColors[15];// Offset:  544 Size:   240 [unused]
//   float4 VPosOffset;                 // Offset:  784 Size:    16 [unused]
//   float4 VPosScale;                  // Offset:  800 Size:    16 [unused]
//   float4x3 ViewMatrix;               // Offset:  816 Size:    48 [unused]
//   float4x4 ViewProjectionMatrix;     // Offset:  864 Size:    64 [unused]
//   float4x4 ViewRotProjectionMatrix;  // Offset:  928 Size:    64
//   float4x4 ViewRotProjectionMatrixPure;// Offset:  992 Size:    64 [unused]
//   float4 ViewportSize;               // Offset: 1056 Size:    16
//   
//   struct SCameraDistances
//   {
//       
//       float near;                    // Offset: 1072
//       float far;                     // Offset: 1076
//       float view;                    // Offset: 1080
//       float oneOverView;             // Offset: 1084
//
//   } CameraDistances;                 // Offset: 1072 Size:    16 [unused]
//   
//   struct SReflectionVolume
//   {
//       
//       float4x4 inverseTransform;     // Offset: 1088
//       float3 rcpFadeRangePositive;   // Offset: 1152
//       float textureArrayIndexAsFloat;// Offset: 1164
//       float3 rcpFadeRangeNegative;   // Offset: 1168
//       float fadeFactor;              // Offset: 1180
//       float2 multipliers;            // Offset: 1184
//       uint parallaxCorrection;       // Offset: 1192
//       float padding0;                // Offset: 1196
//
//   } ReflectionVolumes[15];           // Offset: 1088 Size:  1680 [unused]
//   float3 CameraDirection;            // Offset: 2768 Size:    12
//   float DefaultReflectionTextureArrayIndexAsFloat;// Offset: 2780 Size:     4 [unused]
//   float3 CameraPosition;             // Offset: 2784 Size:    12
//   float DynamicCubeMapReflectionTextureMaxMipIndex;// Offset: 2796 Size:     4 [unused]
//   float3 CullingCameraPosition;      // Offset: 2800 Size:    12 [unused]
//   float ExposedWhitePointOverExposureScale;// Offset: 2812 Size:     4 [unused]
//   float3 FogColorVector;             // Offset: 2816 Size:    12 [unused]
//   float ExposureScale;               // Offset: 2828 Size:     4 [unused]
//   float3 OppositeFogColorDelta;      // Offset: 2832 Size:    12 [unused]
//   float MaxParaboloidReflectionMipIndex;// Offset: 2844 Size:     4 [unused]
//   float3 SideFogColor;               // Offset: 2848 Size:    12 [unused]
//   float MaxStaticReflectionMipIndex; // Offset: 2860 Size:     4 [unused]
//   float3 SunFogColorDelta;           // Offset: 2864 Size:    12 [unused]
//   float MeasuredExposureScale;       // Offset: 2876 Size:     4 [unused]
//   float3 TemporalFilteringParams;    // Offset: 2880 Size:    12 [unused]
//   float RaindropRippleScale;         // Offset: 2892 Size:     4 [unused]
//   float3 UncompressDepthWeights;     // Offset: 2896 Size:    12 [unused]
//   float ReflectionScaleDistanceMul;  // Offset: 2908 Size:     4 [unused]
//   float3 UncompressDepthWeightsWS;   // Offset: 2912 Size:    12 [unused]
//   float ReflectionScaleStrength;     // Offset: 2924 Size:     4 [unused]
//   float3 ViewPoint;                  // Offset: 2928 Size:    12 [unused]
//   float SkyParaboloidTextureMaxMipIndex;// Offset: 2940 Size:     4 [unused]
//   float2 DefaultReflectionMultipliers;// Offset: 2944 Size:     8 [unused]
//   bool UseOnlySkyReflection;         // Offset: 2952 Size:     4 [unused]
//   float2 ReflectionGIControl;        // Offset: 2960 Size:     8 [unused]
//   uint2 SelectedPixel;               // Offset: 2968 Size:     8 [unused]
//
// }
//
// cbuffer SceneGeometry
// {
//
//   float4 GeometryPickingID;          // Offset:    0 Size:    16 [unused]
//   float4 GeometryUserData;           // Offset:   16 Size:    16 [unused]
//   float4 UVDecompression;            // Offset:   32 Size:    16 [unused]
//   
//   struct SMeshDecompression
//   {
//       
//       float positionMin;             // Offset:   48
//       float positionRange;           // Offset:   52
//       float meshLocalHeight;         // Offset:   56
//       float isBuildingFacadeInterior;// Offset:   60
//
//   } MeshDecompression;               // Offset:   48 Size:    16
//   float3 GeometryBBoxMax;            // Offset:   64 Size:    12 [unused]
//   float3 GeometryBBoxMin;            // Offset:   80 Size:    12 [unused]
//
// }
//
// cbuffer Skinning
// {
//
//   float4x3 BlendMatrices[511];       // Offset:    0 Size: 24528
//   float4x3 PrevBlendMatrices[511];   // Offset: 24528 Size: 24528 [unused]
//
// }
//
// cbuffer SceneGraphicObjectInstancePart
// {
//
//   float4x3 WorldMatrix;              // Offset:    0 Size:    48
//
// }
//
// cbuffer CollisionRegionsModifier
// {
//
//   float4 RegionOffsets[3];           // Offset:    0 Size:    48
//   float4 RegionsDeform[4];           // Offset:   48 Size:    64
//   float4 RegionsScratches[4];        // Offset:  112 Size:    64 [unused]
//   float3 BoundingMax;                // Offset:  176 Size:    12
//   float3 BoundingMin;                // Offset:  192 Size:    12
//   uint3 RegionsCount;                // Offset:  208 Size:    12
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// SkinningConfig                    texture   uint4         buf    0        1
// Viewport                          cbuffer      NA          NA    0        1
// SceneGeometry                     cbuffer      NA          NA    1        1
// Skinning                          cbuffer      NA          NA    2        1
// SceneGraphicObjectInstancePart    cbuffer      NA          NA    3        1
// CollisionRegionsModifier          cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// position                 0   xyzw        0     NONE     int   xyzw
// texcoord                 2   xyzw        1     NONE     int       
// blendweight              0   xyzw        2     NONE   float   xyzw
// normal                   0   xyzw        3     NONE   float       
// color                    1   xyzw        4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// SV_Position              0   xyzw        1      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer cb0[175], immediateIndexed
dcl_constantbuffer cb1[4], immediateIndexed
dcl_constantbuffer cb2[1533], dynamicIndexed
dcl_constantbuffer cb3[3], immediateIndexed
dcl_constantbuffer cb4[14], dynamicIndexed
dcl_resource_buffer (uint,uint,uint,uint) t0
dcl_input v0.xyzw
dcl_input v2.xyzw
dcl_input v4.xyz
dcl_output o0.xyzw
dcl_output_siv o1.xyzw, position
dcl_temps 10

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r9.xyzw, l(0, 0, 0, 0), t125.xyzw

itof r0.xyz, v0.xyzx
ubfe r0.w, l(3), l(13), v0.w
iadd r0.w, r0.w, l(1)
ieq r1.x, r0.w, l(1)
if_nz r1.x
  and r1.x, v0.w, l(8191)
  mov r2.xyzw, l(1.000000,0,0,0)
  mov r1.yzw, l(0,0,0,0)
else 
  and r3.x, v0.w, l(8191)
  ld_indexable(buffer)(uint,uint,uint,uint) r3.xyzw, r3.xxxx, t0.xyzw
  and r1.xyzw, r3.xyzw, l(0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff)
  mov r2.xyzw, v2.zyxw
endif 
mad r0.xyz, r0.xyzx, cb1[3].yyyy, cb1[3].xxxx
add r3.xyz, v4.zyxz, l(-0.500000, -0.500000, -0.500000, 0.000000)
add r4.xyz, r0.xyzx, -cb4[12].xyzx
add r5.xyz, cb4[11].xyzx, -cb4[12].xyzx
div r4.xyz, r4.xyzx, r5.xyzx
ine r5.xyz, cb4[13].xyzx, l(1, 1, 1, 0)
if_nz r5.x
  ge r6.xyzw, r4.xxxx, cb4[0].xyzw
  and r6.xyzw, r6.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  dp4 r3.w, r6.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  ftou r3.w, r3.w
  if_nz r3.w
    iadd r4.w, r3.w, l(-1)
    dp4 r4.w, cb4[0].xyzw, icb[r4.w + 0].xyzw
  else 
    mov r4.w, l(0)
  endif 
  iadd r5.xw, cb4[13].xxxx, l(-1, 0, 0, -2)
  ult r5.x, r3.w, r5.x
  if_nz r5.x
    dp4 r5.x, cb4[0].xyzw, icb[r3.w + 0].xyzw
  else 
    mov r5.x, l(1.000000)
  endif 
  add r6.x, -r4.w, r4.x
  add r4.w, -r4.w, r5.x
  div r4.w, r6.x, r4.w
  mad r4.w, r4.w, l(2.000000), l(-1.000000)
  dp4 r5.x, cb4[0].xyzw, icb[r5.w + 0].xyzw
  add r5.x, r5.x, l(1.000000)
  mul r5.x, r5.x, l(0.500000)
  ge r5.x, r5.x, r4.x
  and r5.x, r5.x, l(0x3f800000)
  mul r4.w, r4.w, r5.x
  mul r5.x, cb4[0].x, l(0.500000)
  ge r4.x, r4.x, r5.x
  and r4.x, r4.x, l(0x3f800000)
  mul r6.x, r4.x, r4.w
else 
  mov r6.x, l(0)
  mov r3.w, l(0)
endif 
if_nz r5.y
  ge r7.xyzw, r4.yyyy, cb4[1].xyzw
  and r7.xyzw, r7.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  dp4 r4.x, r7.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  ftou r4.x, r4.x
  if_nz r4.x
    iadd r4.w, r4.x, l(-1)
    dp4 r4.w, cb4[1].xyzw, icb[r4.w + 0].xyzw
  else 
    mov r4.w, l(0)
  endif 
  iadd r5.xy, cb4[13].yyyy, l(-1, -2, 0, 0)
  ult r5.x, r4.x, r5.x
  if_nz r5.x
    dp4 r5.x, cb4[1].xyzw, icb[r4.x + 0].xyzw
  else 
    mov r5.x, l(1.000000)
  endif 
  add r5.w, -r4.w, r4.y
  add r4.w, -r4.w, r5.x
  div r4.w, r5.w, r4.w
  mad r4.w, r4.w, l(2.000000), l(-1.000000)
  dp4 r5.x, cb4[1].xyzw, icb[r5.y + 0].xyzw
  add r5.x, r5.x, l(1.000000)
  mul r5.x, r5.x, l(0.500000)
  ge r5.x, r5.x, r4.y
  and r5.x, r5.x, l(0x3f800000)
  mul r4.w, r4.w, r5.x
  mul r5.x, cb4[1].x, l(0.500000)
  ge r4.y, r4.y, r5.x
  and r4.y, r4.y, l(0x3f800000)
  mul r6.y, r4.y, r4.w
else 
  mov r6.y, l(0)
  mov r4.x, l(0)
endif 
imad r3.w, r4.x, cb4[13].x, r3.w
if_nz r5.z
  ge r5.xyzw, r4.zzzz, cb4[2].xyzw
  and r5.xyzw, r5.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  dp4 r4.x, r5.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  ftou r4.x, r4.x
  if_nz r4.x
    iadd r4.y, r4.x, l(-1)
    dp4 r4.y, cb4[2].xyzw, icb[r4.y + 0].xyzw
  else 
    mov r4.y, l(0)
  endif 
  iadd r5.xy, cb4[13].zzzz, l(-1, -2, 0, 0)
  ult r4.w, r4.x, r5.x
  if_nz r4.w
    dp4 r4.w, cb4[2].xyzw, icb[r4.x + 0].xyzw
  else 
    mov r4.w, l(1.000000)
  endif 
  add r5.x, -r4.y, r4.z
  add r4.y, -r4.y, r4.w
  div r4.y, r5.x, r4.y
  mad r4.y, r4.y, l(2.000000), l(-1.000000)
  dp4 r4.w, cb4[2].xyzw, icb[r5.y + 0].xyzw
  add r4.w, r4.w, l(1.000000)
  mul r4.w, r4.w, l(0.500000)
  ge r4.w, r4.w, r4.z
  and r4.w, r4.w, l(0x3f800000)
  mul r4.y, r4.w, r4.y
  mul r4.w, cb4[2].x, l(0.500000)
  ge r4.z, r4.z, r4.w
  and r4.z, r4.z, l(0x3f800000)
  mul r6.z, r4.z, r4.y
else 
  mov r6.z, l(0)
  mov r4.x, l(0)
endif 
imul null, r4.x, r4.x, cb4[13].x
imad r3.w, r4.x, cb4[13].y, r3.w
lt r4.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r6.xyzx
lt r5.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
iadd r4.xyz, -r4.yxzy, r5.yxzy
imul null, r5.xy, r4.xzxx, cb4[13].xxxx
imad r4.w, r4.x, cb4[13].x, r4.y
mov r4.x, l(0)
mov r4.z, r5.x
iadd r4.xyzw, r3.wwww, r4.xyzw
imad r5.xyzw, r5.yyyy, cb4[13].yyyy, r4.xyzw
min r6.xyz, |r6.xyzx|, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r6.xyz, r6.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
ushr r7.xyzw, r4.xyzw, l(2, 2, 2, 2)
and r4.xyzw, r4.xyzw, l(3, 3, 3, 3)
dp4 r8.x, cb4[r7.x + 3].xyzw, icb[r4.x + 0].xyzw
dp4 r8.y, cb4[r7.y + 3].xyzw, icb[r4.y + 0].xyzw
dp4 r8.z, cb4[r7.z + 3].xyzw, icb[r4.z + 0].xyzw
dp4 r8.w, cb4[r7.w + 3].xyzw, icb[r4.w + 0].xyzw
ushr r4.xyzw, r5.xyzw, l(2, 2, 2, 2)
and r5.xyzw, r5.xyzw, l(3, 3, 3, 3)
dp4 r7.x, cb4[r4.x + 3].xyzw, icb[r5.x + 0].xyzw
dp4 r7.y, cb4[r4.y + 3].xyzw, icb[r5.y + 0].xyzw
dp4 r7.z, cb4[r4.z + 3].xyzw, icb[r5.z + 0].xyzw
dp4 r7.w, cb4[r4.w + 3].xyzw, icb[r5.w + 0].xyzw
add r4.xyzw, -r8.xyzw, r7.xyzw
mad r4.xyzw, r6.zzzz, r4.xyzw, r8.xyzw
add r4.zw, -r4.xxxy, r4.zzzw
mad r4.xy, r6.yyyy, r4.zwzz, r4.xyxx
add r3.w, -r4.x, r4.y
mad_sat r3.w, r6.x, r3.w, r4.x
mul r3.xyz, r3.wwww, r3.xyzx
mad r3.xyz, r3.xyzx, l(0.650000, 0.650000, 0.650000, 0.000000), r0.xyzx
mov r4.xyzw, l(0,0,0,0)
mov r5.xyzw, l(0,0,0,0)
mov r6.xyzw, l(0,0,0,0)
mov r0.x, l(0)
loop 
  ult r0.z, r0.x, r0.w
  ult r7.x, r0.x, l(4)
  and r0.z, r0.z, r7.x
  breakc_z r0.z
  dp4 r0.z, r2.xyzw, icb[r0.x + 0].xyzw
  ineg r7.x, r0.x
  ult r7.yzw, r0.xxxx, l(0, 1, 2, 3)
  and r8.y, r7.x, r7.z
  iadd r0.xy, r0.xxxx, l(1, -3, 0, 0)
  movc r8.z, r7.z, l(0), r0.y
  ieq r8.w, r7.w, l(0)
  mov r8.x, r7.y
  and r7.xyzw, r1.xyzw, r8.xyzw
  or r7.xy, r7.ywyy, r7.xzxx
  or r0.y, r7.y, r7.x
  imul null, r0.y, r0.y, l(3)
  mad r4.xyzw, r0.zzzz, cb2[r0.y + 0].xyzw, r4.xyzw
  mad r5.xyzw, r0.zzzz, cb2[r0.y + 1].xyzw, r5.xyzw
  mad r6.xyzw, r0.zzzz, cb2[r0.y + 2].xyzw, r6.xyzw
endloop 
mov r3.w, l(1.000000)
dp4 r0.x, r3.xyzw, r4.xyzw
dp4 r0.y, r3.xyzw, r5.xyzw
dp4 r0.z, r3.xyzw, r6.xyzw
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb3[0].xyzw
dp4 r1.y, r0.xyzw, cb3[1].xyzw
dp4 r1.z, r0.xyzw, cb3[2].xyzw
add r0.xyz, r1.xyzx, -cb0[174].xyzx
mul r1.x, r0.x, cb0[58].x
mul r1.y, r0.x, cb0[59].x
mul r1.z, r0.x, cb0[60].x
mul r1.w, r0.x, cb0[61].x
mul r2.x, r0.y, cb0[58].y
mul r2.y, r0.y, cb0[59].y
mul r2.z, r0.y, cb0[60].y
mul r2.w, r0.y, cb0[61].y
mad r3.x, r0.z, cb0[58].z, cb0[58].w
mad r3.y, r0.z, cb0[59].z, cb0[59].w
mad r3.z, r0.z, cb0[60].z, cb0[60].w
mad r3.w, r0.z, cb0[61].z, cb0[61].w
add r2.xyzw, r2.xyzw, r3.xyzw
add r1.xyzw, r1.xyzw, r2.xyzw

// Relocated to here with asmtool.py
mov o1.xyzw, r1.xyzw

// Automatic vertex shader halo fix inserted with DarkStarSword's asmtool.py:
// asmtool.py --auto-fix-vertex-halo -i --only-autofixed 3f5d42b29a9dfba4-vs.txt
ne r9.w, r1.w, l(1.0)
if_nz r9.w
  add r9.w, r1.w, -r9.y
  mad r1.x, r9.w, r9.x, r1.x
endif

mul r2.xy, r1.xyxx, cb0[66].xyxx
mul o0.xy, r2.xyxx, l(0.00390625000, -0.00390625000, 0.000000, 0.000000)
dp3 o0.w, r0.xyzx, cb0[173].xyzx
mov o0.z, r1.w

// mov o1.xyzw, r1.xyzw // Relocated from here with asmtool.py

ret 
// Approximately 216 instruction slots used