// asmtool.py --fix-wd2-screen-space-reflections -i -f --only-autofixed 5bd4c0fb3cd0fc7c-ps.txt
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.52 on Wed Jan 18 22:32:25 2017
//
//
// Buffer Definitions: 
//
// cbuffer Global
// {
//
//   float4 EnvironmentLuminances;      // Offset:    0 Size:    16 [unused]
//   float4 FakeEarthShadowPlane;       // Offset:   16 Size:    16 [unused]
//   float4 GlobalLightsIntensity;      // Offset:   32 Size:    16 [unused]
//   float4 GlobalWeatherControl;       // Offset:   48 Size:    16 [unused]
//   float4 MaterialWetnessParams[22];  // Offset:   64 Size:   352 [unused]
//   float4 WindGlobalTurbulence;       // Offset:  416 Size:    16 [unused]
//   float4 WindVelocityTextureCoverage;// Offset:  432 Size:    16 [unused]
//   float4 WorldLoadingRingSizes[2];   // Offset:  448 Size:    32 [unused]
//   
//   struct SGlobalDebugValues
//   {
//       
//       float debugValue0;             // Offset:  480
//       float debugValue1;             // Offset:  484
//       float debugValue2;             // Offset:  488
//       float debugValue3;             // Offset:  492
//
//   } DebugValues;                     // Offset:  480 Size:    16 [unused]
//   float3 SunShadowDirection;         // Offset:  496 Size:    12 [unused]
//   float CrowdAnimationStartTime;     // Offset:  508 Size:     4 [unused]
//   float3 WindGlobalNoiseTextureChannelSel;// Offset:  512 Size:    12 [unused]
//   float GlobalReflectionTextureBlendRatio;// Offset:  524 Size:     4 [unused]
//   float3 WindGlobalNoiseTextureCoverage;// Offset:  528 Size:    12 [unused]
//   float GlobalWaterLevel;            // Offset:  540 Size:     4 [unused]
//   
//   struct SGlobalScalars
//   {
//       
//       float time;                    // Offset:  544
//       float staticReflectionIntensity;// Offset:  548
//       float gameDeltaTime;           // Offset:  552
//
//   } GlobalScalars;                   // Offset:  544 Size:    12
//   float RcpStaticReflectionExposureScale;// Offset:  556 Size:     4 [unused]
//   float2 GlobalNoiseSampler2DSquareSize;// Offset:  560 Size:     8 [unused]
//   float SandstormIntensity;          // Offset:  568 Size:     4 [unused]
//   float StaticReflectionIntensityDest;// Offset:  572 Size:     4 [unused]
//   float2 WindNoiseDeltaVector;       // Offset:  576 Size:     8 [unused]
//   float TimeOfDay;                   // Offset:  584 Size:     4 [unused]
//   float VertexAOIntensity;           // Offset:  588 Size:     4 [unused]
//   float2 WindVector;                 // Offset:  592 Size:     8 [unused]
//
// }
//
// cbuffer Viewport
// {
//
//   float4 CameraNearPlaneSize;        // Offset:    0 Size:    16
//   float4x4 DepthTextureTransform;    // Offset:   16 Size:    64 [unused]
//   float4 FSMClipPlanes;              // Offset:   80 Size:    16 [unused]
//   float4 FacettedShadowCastParams;   // Offset:   96 Size:    16 [unused]
//   float4 FogValues0;                 // Offset:  112 Size:    16 [unused]
//   float4 FogValues1;                 // Offset:  128 Size:    16 [unused]
//   float4x4 InvProjectionMatrix;      // Offset:  144 Size:    64
//   float4x4 InvProjectionMatrixDepth; // Offset:  208 Size:    64 [unused]
//   float4x3 InvViewMatrix;            // Offset:  272 Size:    48
//   float4x4 PreviousViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4x4 ProjectionMatrix;         // Offset:  384 Size:    64
//   float4 RainOcclusionFadeParams;    // Offset:  448 Size:    16 [unused]
//   float4x4 RainOcclusionProjectionMatrix;// Offset:  464 Size:    64 [unused]
//   float4 RainOcclusionShadowMapSize; // Offset:  528 Size:    16 [unused]
//   float4 ReflectionVolumeDebugColors[15];// Offset:  544 Size:   240 [unused]
//   float4 VPosOffset;                 // Offset:  784 Size:    16 [unused]
//   float4 VPosScale;                  // Offset:  800 Size:    16 [unused]
//   float4x3 ViewMatrix;               // Offset:  816 Size:    48
//   float4x4 ViewProjectionMatrix;     // Offset:  864 Size:    64 [unused]
//   float4x4 ViewRotProjectionMatrix;  // Offset:  928 Size:    64 [unused]
//   float4x4 ViewRotProjectionMatrixPure;// Offset:  992 Size:    64 [unused]
//   float4 ViewportSize;               // Offset: 1056 Size:    16
//   
//   struct SCameraDistances
//   {
//       
//       float near;                    // Offset: 1072
//       float far;                     // Offset: 1076
//       float view;                    // Offset: 1080
//       float oneOverView;             // Offset: 1084
//
//   } CameraDistances;                 // Offset: 1072 Size:    16
//   
//   struct SReflectionVolume
//   {
//       
//       float4x4 inverseTransform;     // Offset: 1088
//       float3 rcpFadeRangePositive;   // Offset: 1152
//       float textureArrayIndexAsFloat;// Offset: 1164
//       float3 rcpFadeRangeNegative;   // Offset: 1168
//       float fadeFactor;              // Offset: 1180
//       float2 multipliers;            // Offset: 1184
//       uint parallaxCorrection;       // Offset: 1192
//       float padding0;                // Offset: 1196
//
//   } ReflectionVolumes[15];           // Offset: 1088 Size:  1680
//   float3 CameraDirection;            // Offset: 2768 Size:    12 [unused]
//   float DefaultReflectionTextureArrayIndexAsFloat;// Offset: 2780 Size:     4 [unused]
//   float3 CameraPosition;             // Offset: 2784 Size:    12
//   float DynamicCubeMapReflectionTextureMaxMipIndex;// Offset: 2796 Size:     4
//   float3 CullingCameraPosition;      // Offset: 2800 Size:    12 [unused]
//   float ExposedWhitePointOverExposureScale;// Offset: 2812 Size:     4 [unused]
//   float3 FogColorVector;             // Offset: 2816 Size:    12 [unused]
//   float ExposureScale;               // Offset: 2828 Size:     4
//   float3 OppositeFogColorDelta;      // Offset: 2832 Size:    12 [unused]
//   float MaxParaboloidReflectionMipIndex;// Offset: 2844 Size:     4 [unused]
//   float3 SideFogColor;               // Offset: 2848 Size:    12 [unused]
//   float MaxStaticReflectionMipIndex; // Offset: 2860 Size:     4 [unused]
//   float3 SunFogColorDelta;           // Offset: 2864 Size:    12 [unused]
//   float MeasuredExposureScale;       // Offset: 2876 Size:     4 [unused]
//   float3 TemporalFilteringParams;    // Offset: 2880 Size:    12 [unused]
//   float RaindropRippleScale;         // Offset: 2892 Size:     4 [unused]
//   float3 UncompressDepthWeights;     // Offset: 2896 Size:    12 [unused]
//   float ReflectionScaleDistanceMul;  // Offset: 2908 Size:     4 [unused]
//   float3 UncompressDepthWeightsWS;   // Offset: 2912 Size:    12 [unused]
//   float ReflectionScaleStrength;     // Offset: 2924 Size:     4 [unused]
//   float3 ViewPoint;                  // Offset: 2928 Size:    12 [unused]
//   float SkyParaboloidTextureMaxMipIndex;// Offset: 2940 Size:     4
//   float2 DefaultReflectionMultipliers;// Offset: 2944 Size:     8 [unused]
//   bool UseOnlySkyReflection;         // Offset: 2952 Size:     4
//   float2 ReflectionGIControl;        // Offset: 2960 Size:     8 [unused]
//   uint2 SelectedPixel;               // Offset: 2968 Size:     8 [unused]
//
// }
//
// cbuffer SkyBuffer
// {
//
//   struct SSkyLightingBuffer
//   {
//       
//       float4 m_lightIrradiance;      // Offset:    0
//       float4 m_lightIrradianceWithoutCloudsCoverage;// Offset:   16
//       float4 m_lightDirection;       // Offset:   32
//       float4 m_cloudLightVector;     // Offset:   48
//       float4 m_cloudIrradiance;      // Offset:   64
//       float4 m_environmentIrradianceSHRed;// Offset:   80
//       float4 m_environmentIrradianceSHGreen;// Offset:   96
//       float4 m_environmentIrradianceSHBlue;// Offset:  112
//       float4 m_environmentIrradianceAverage;// Offset:  128
//       float4 m_giDefaultProbeIrradiance[3];// Offset:  144
//       float4 m_giDefaultProbeTint[3];// Offset:  192
//       float4 m_giDirectEnvironmentIrradiance[3];// Offset:  240
//       float4 m_giBouncedEnvironmentIrradiance[4];// Offset:  288
//       float4 m_cloudAndSkyIrradianceSH[9];// Offset:  352
//       float4 m_skyOnlyIrradianceSH[9];// Offset:  496
//
//   } SkyLightStruct;                  // Offset:    0 Size:   640
//
// }
//
// cbuffer MaterialWD2Water
// {
//
//   float4 MaterialPickingID;          // Offset:    0 Size:    16 [unused]
//   float4 NormalUVTiling1;            // Offset:   16 Size:    16 [unused]
//   float4 SurfaceUVTiling1;           // Offset:   32 Size:    16
//   float4 WaveUVTiling;               // Offset:   48 Size:    16
//   float3 WaterColor;                 // Offset:   64 Size:    12
//   float NormalIntensity;             // Offset:   76 Size:     4
//   float2 NormalScrolling1;           // Offset:   80 Size:     8 [unused]
//   float SkyLightFactor;              // Offset:   88 Size:     4
//   float SurfaceIntensity;            // Offset:   92 Size:     4
//   float2 SurfaceScrolling1;          // Offset:   96 Size:     8 [unused]
//   float SurfaceWaveUVInfluence;      // Offset:  104 Size:     4
//   float UseDuDv;                     // Offset:  108 Size:     4
//   float WaterExtinction;             // Offset:  112 Size:     4
//   float WaveIntensity;               // Offset:  116 Size:     4
//   float WaveSpeed;                   // Offset:  120 Size:     4
//
// }
//
// cbuffer LightData
// {
//
//   struct SLightDatas
//   {
//       
//       float4x4 CascadedShadowProjections[4];// Offset:    0
//       float4 CascadedShadowSliceFadeParams;// Offset:  256
//       float4 CascadedBlurKernelMinSizes;// Offset:  272
//       float4 CascadedBlurKernelMaxSizes;// Offset:  288
//       float4 LightCapsuleDivLength;  // Offset:  304
//       float4 LightFadingClipPlanes[8];// Offset:  320
//       float4 LightIESParams;         // Offset:  448
//       float4 LightProjectedVideoUnpack[8];// Offset:  464
//       float4 LightShadowFactor;      // Offset:  592
//       float4 LightShadowMapSize;     // Offset:  608
//       float4x4 LightSpotShadowProjections;// Offset:  624
//       float4x4 LightVolumeTransform; // Offset:  688
//       float3 LightCapsuleMulLength;  // Offset:  752
//       float3 LightDirection;         // Offset:  768
//       float3 LightColor;             // Offset:  784
//       float3 LightPivotPosition;     // Offset:  800
//       float3 LightPosition;          // Offset:  816
//       float2 LightCapsuleParams;     // Offset:  832
//       float2 LightSpotConeFactors;   // Offset:  840
//       float4 LightAttenuation;       // Offset:  848
//       float2 LightSpotShadowAngleFactors;// Offset:  864
//       float LightSpotNearClipFactor; // Offset:  872
//       float CascadedShadowGrazingAngleScale;// Offset:  876
//
//   } LightDatas;                      // Offset:    0 Size:   880
//
// }
//
// cbuffer LongRangeShadow
// {
//
//   float4 LongRangeShadowVolumePosScaleBias;// Offset:    0 Size:    16
//   float4 LongRangeShadowVolumeUvScaleBias;// Offset:   16 Size:    16
//
// }
//
// cbuffer SSR
// {
//
//   float4x4 CameraSpaceToPreviousProjectedSpace;// Offset:    0 Size:    64
//   float4x4 ProjectToPixelMatrix;     // Offset:   64 Size:    64
//   float DepthScale;                  // Offset:  128 Size:     4
//   float SSRTextureMaxMipIndex;       // Offset:  132 Size:     4
//   bool GameIsPaused;                 // Offset:  136 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// Viewport__DepthVPSampler__SampObj__    sampler      NA          NA    0        1
// MaterialWD2Water__NormalTexture1__SampObj__    sampler      NA          NA    1        1
// MaterialWD2Water__SurfaceTexture1__SampObj__    sampler      NA          NA    2        1
// MaterialWD2Water__WaveTexture__SampObj__    sampler      NA          NA    3        1
// ColorClamp                        sampler      NA          NA    4        1
// ColorWrap                         sampler      NA          NA    5        1
// ShadowRealSampler               sampler_c      NA          NA    6        1
// LongRangeShadowSampler          sampler_c      NA          NA    7        1
// WaterGrid__AccumulationCopyTexture__SampObj__    sampler      NA          NA    8        1
// WaterGrid__DepthCopyTexture__SampObj__    sampler      NA          NA    9        1
// WaterGrid__ExtinctionTexture__SampObj__    sampler      NA          NA   10        1
// WaterGrid__ScatteringTexture__SampObj__    sampler      NA          NA   11        1
// Global__GlobalRandomVectorTexture2D    texture  float4          2d    0        1
// Viewport__SkyParaboloidTexture    texture  float4          2d    1        1
// Viewport__DynamicCubeMapReflectionTextureArray    texture  float4   cubearray    2        1
// MaterialWD2Water__NormalTexture1__TexObj__    texture  float4          2d    3        1
// MaterialWD2Water__SurfaceTexture1__TexObj__    texture  float4          2d    4        1
// MaterialWD2Water__WaveTexture__TexObj__    texture  float4          2d    5        1
// LightData__LightShadowTexture__TexObj__    texture  float4          2d    6        1
// LongRangeShadow__LongRangeShadowVolumeTexture__TexObj__    texture  float4          2d    7        1
// SSR__MotionVectorTexture__TexObj__    texture  float4          2d    8        1
// SSR__SSRDepthTexture__TexObj__    texture  float4          2d    9        1
// SSR__SSRTexture__TexObj__         texture  float4          2d   10        1
// WaterGrid__AccumulationCopyTexture__TexObj__    texture  float4          2d   11        1
// WaterGrid__DepthCopyTexture__TexObj__    texture  float4          2d   12        1
// WaterGrid__ExtinctionTexture__TexObj__    texture  float4          2d   13        1
// WaterGrid__ScatteringTexture__TexObj__    texture  float4          2d   14        1
// Global                            cbuffer      NA          NA    0        1
// Viewport                          cbuffer      NA          NA    1        1
// SkyBuffer                         cbuffer      NA          NA    2        1
// MaterialWD2Water                  cbuffer      NA          NA    3        1
// LightData                         cbuffer      NA          NA    4        1
// LongRangeShadow                   cbuffer      NA          NA    5        1
// SSR                               cbuffer      NA          NA    6        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyz         1     NONE   float   xyz 
// TEXCOORD                 2   xyz         2     NONE   float   xyz 
// TEXCOORD                 3   xyz         3     NONE   float   xyz 
// TEXCOORD                 4   xyz         4     NONE   float   xyz 
// TEXCOORD                 5   xyzw        5     NONE   float   xyzw
// SV_Position              0   xyzw        6      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer cb0[35], immediateIndexed
dcl_constantbuffer cb1[185], dynamicIndexed
dcl_constantbuffer cb2[31], immediateIndexed
dcl_constantbuffer cb3[8], immediateIndexed
dcl_constantbuffer cb4[55], dynamicIndexed
dcl_constantbuffer cb5[2], immediateIndexed
dcl_constantbuffer cb6[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_comparison
dcl_sampler s7, mode_comparison
dcl_sampler s8, mode_default
dcl_sampler s9, mode_default
dcl_sampler s10, mode_default
dcl_sampler s11, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texturecubearray (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_texture2d (float,float,float,float) t11
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t13
dcl_resource_texture2d (float,float,float,float) t14
dcl_input_ps linear centroid v0.xyzw
dcl_input_ps linear centroid v1.xyz
dcl_input_ps linear centroid v2.xyz
dcl_input_ps linear centroid v3.xyz
dcl_input_ps linear centroid v4.xyz
dcl_input_ps linear centroid v5.xyzw
dcl_input_ps_siv linear noperspective v6.xy, position
dcl_output o0.xyzw
dcl_temps 19
dcl_indexableTemp x0[4], 4

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r15.xyzw, l(0, 0, 0, 0), t125.xyzw


// WATCH_DOGS2 Screen Space Reflection fix inserted with DarkStarSword's asmtool.py:
// asmtool.py --fix-wd2-screen-space-reflections -i -f --only-autofixed 5bd4c0fb3cd0fc7c-ps.txt

// WATCH_DOGS2 CameraPosition adjustment inserted with DarkStarSword's asmtool.py:
// asmtool.py --fix-wd2-screen-space-reflections -i -f --only-autofixed 5bd4c0fb3cd0fc7c-ps.txt

mul r15.w, r15.x, r15.y
mul r17.x, r15.w, cb1[9].x
mul r17.y, r15.w, cb1[10].x
mul r17.z, r15.w, cb1[11].x
mul r17.w, r15.w, cb1[12].x
dp4 r18.x, r17.xyzw, cb1[17].xyzw
dp4 r18.y, r17.xyzw, cb1[18].xyzw
dp4 r18.z, r17.xyzw, cb1[19].xyzw
add r16.xyz, cb1[174].xyz, r18.xyz

dp3 r0.x, v1.xyzx, v1.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v1.xyzx
dp3 r0.w, v4.xyzx, v4.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, v4.xyzx
dp3 r0.w, v3.xyzx, v3.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, v3.xyzx
sample_indexable(texture2d)(float,float,float,float) r3.xy, v5.xyxx, t3.xyzw, s1
mad r3.xy, r3.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r0.w, r3.xyxx, r3.xyxx
min r0.w, r0.w, l(1.000000)
add r0.w, -r0.w, l(1.000000)
sqrt r4.z, r0.w
mul r4.xy, r3.xyxx, cb3[4].wwww
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r4.xyzx
mul r2.xyz, r2.xyzx, r3.yyyy
mad r1.xyz, r3.xxxx, r1.xyzx, r2.xyzx
mad r0.xyz, r3.zzzz, r0.xyzx, r1.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mul r0.w, cb0[34].x, cb3[7].z
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), cb3[3].x
mul r1.xyzw, r1.xxxx, l(1.000000, 1.000000, 1.125480, 1.125480)
div r2.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), r1.xyzw
mul r3.xyzw, r0.wwww, l(0.040000, 0.020000, -0.040000, -0.020000)
mul r2.xyzw, r2.xyzw, l(0.100000, 0.100000, 0.100000, 0.100000)
mad r2.xyzw, v2.xyxy, r2.xyzw, r3.xyzw
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r2.xyxx, t5.xyzw, s3
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r2.zwzz, t5.xyzw, s3
add r3.xyz, r3.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
add r2.xyz, r2.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
mul r1.xzw, r1.wwww, r2.xxyz
mad r1.xyz, r3.xyzx, r1.yyyy, r1.xzwx
mul r0.w, cb3[7].y, l(-0.017500)
mul r2.xy, r0.wwww, r1.xyxx
mul r2.z, r1.z, l(0.050000)
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r2.xyzx
dp3 r2.x, r0.zxxz, r1.xyzx
dp3 r2.y, r0.yzyy, r1.xyzx
dp3 r2.z, r0.xyzx, r1.xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul r3.xyzw, r0.xxxx, r2.xyzx
dp3 r5.x, r4.zxxz, r1.xyzx
dp3 r5.y, r4.yzyy, r1.xyzx
dp3 r5.z, r4.xyzx, r1.xyzx
dp3 r0.y, r5.xyzx, r5.xyzx
rsq r0.y, r0.y
mul r0.yz, r0.yyyy, r5.xxyx
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb3[6].w
mul r0.yz, r0.yyzy, l(0.000000, 0.100000, 0.100000, 0.000000)
and r0.yz, r0.yyzy, r0.wwww
mul r1.xy, r3.wyww, cb3[6].zzzz
mad r1.xy, r1.xyxx, l(0.002000, 0.002000, 0.000000, 0.000000), v5.zwzz
mul r1.xy, r1.xyxx, cb3[2].xyxx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyxx, t4.xyzw, s2
add r4.xyz, -v2.xyzx, r16.xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r5.xyz, r0.wwww, r4.xyzx
div r6.xyz, v0.xyzx, v0.wwww
mad r7.xy, r6.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
add r7.z, -r7.y, l(1.000000)
sample_indexable(texture2d)(float,float,float,float) r2.w, r7.xzxx, t12.yzwx, s9
add r2.w, -r2.w, l(1.000000)
add r6.xy, r0.yzyy, r7.xzxx
sample_indexable(texture2d)(float,float,float,float) r4.w, r6.xyxx, t12.yzwx, s9
add r4.w, -r4.w, l(1.000000)
ge r5.w, r4.w, r2.w
and r5.w, r5.w, l(0x3f800000)
add r4.w, -r2.w, r4.w
mad r8.x, r5.w, r4.w, r2.w
mad r0.yz, r0.yyzy, r5.wwww, r7.xxzx
mov_sat r6.xy, r0.yzyy
mad r6.xy, r6.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r7.xy, r6.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
add r7.z, -r8.x, l(1.000000)
mov r7.w, l(1.000000)
dp4 r9.x, r7.xyzw, cb1[9].xyzw
dp4 r9.y, r7.xyzw, cb1[10].xyzw
dp4 r9.z, r7.xyzw, cb1[11].xyzw
dp4 r9.w, r7.xyzw, cb1[12].xyzw
div r7.xyzw, r9.xyzw, r9.wwww

// WATCH_DOGS2 unprojection (NVIDIA Ansel variant) fix inserted with DarkStarSword's asmtool.py:
// asmtool.py --fix-wd2-screen-space-reflections -i -f --only-autofixed 5bd4c0fb3cd0fc7c-ps.txt

add r15.w, -r7.z, -r15.y
mul r15.w, r15.w, r15.x
mad r7.x, -r15.w, cb1[9].x, r7.x

dp4 r9.x, r7.xyzw, cb1[17].xyzw
dp4 r9.y, r7.xyzw, cb1[18].xyzw
dp4 r9.z, r7.xyzw, cb1[19].xyzw
mov r8.yw, l(0,1.000000,0,0.500000)
dp2 r2.w, r8.xyxx, cb1[11].zwzz
dp2 r4.w, r8.xyxx, cb1[12].zwzz
div r2.w, -r2.w, r4.w
mov r6.w, l(1.000000)
dp2 r4.w, r6.zwzz, cb1[11].zwzz
dp2 r5.w, r6.zwzz, cb1[12].zwzz
div r4.w, -r4.w, r5.w
add r2.w, r2.w, -r4.w
add r6.xyz, r9.xyzx, -v2.xyzx
dp3 r4.w, r6.xyzx, r6.xyzx
sqrt r4.w, r4.w
add r2.w, -r2.w, l(0.050000)
mul r2.w, |r2.w|, l(20.000000)
min r2.w, r2.w, l(1.000000)
add r2.w, -r2.w, l(1.000000)
sample_indexable(texture2d)(float,float,float,float) r6.xyz, r0.yzyy, t11.xyzw, s8
div r7.xyz, r6.xyzx, cb1[176].wwww
max r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r6.xyz, r6.xyzx, l(64512.000000, 64512.000000, 64512.000000, 0.000000)
dp3 r0.y, r6.xyzx, l(0.212639, 0.715168655, 0.0721923187, 0.000000)
mul r0.y, r0.y, l(0.100000)
min r0.y, r0.y, l(1.000000)
mad r0.z, r0.y, l(-2.000000), l(3.000000)
mul r0.y, r0.y, r0.y
mad r0.y, -r0.z, r0.y, l(1.000000)
mul r6.xyz, r0.yyyy, r7.xyzx
mov_sat r7.x, -r5.z
mul r0.y, r4.w, l(0.010000)
min r0.y, r0.y, l(1.000000)
rsq r0.y, r0.y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
mul r7.y, r0.y, cb3[7].x
sample_indexable(texture2d)(float,float,float,float) r9.xyz, r7.xyxx, t14.xyzw, s11
mul r9.xyz, r9.xyzx, cb3[4].xyzx
mul r10.xyz, r9.xyzx, l(0.010000, 0.010000, 0.010000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r7.xyz, r7.xyxx, t13.xyzw, s10
mul r0.y, r1.w, cb3[5].w
mad r1.xyz, -r9.xyzx, l(0.010000, 0.010000, 0.010000, 0.000000), r1.xyzx
mad r1.xyz, r0.yyyy, r1.xyzx, r10.xyzx
mad r0.y, r1.w, l(0.500000), l(0.500000)
mul r0.y, r2.w, r0.y
mul r0.y, r0.y, l(0.040000)
add r9.xyz, -r1.xyzx, l(0.800000, 0.800000, 0.800000, 0.000000)
mad r1.xyz, r0.yyyy, r9.xyzx, r1.xyzx
mov r0.yz, l(0,0,0,0)
mov r9.z, l(0)
mov r1.w, l(0)
mov r2.w, l(3)
mov r4.w, l(0)
loop 
  uge r5.w, r4.w, l(4)
  breakc_nz r5.w
  ishl r5.w, r4.w, l(2)
  mul r10.xyz, v2.yyyy, cb4[r5.w + 1].xyzx
  mad r10.xyz, cb4[r5.w + 0].xyzx, v2.xxxx, r10.xyzx
  mad r10.xyz, cb4[r5.w + 2].xyzx, v2.zzzz, r10.xyzx
  add r10.xyz, r10.xyzx, cb4[r5.w + 3].xyzx
  max r5.w, |r10.y|, |r10.x|
  add r5.w, r5.w, cb4[16].x
  ult r6.w, r4.w, l(3)
  if_nz r6.w
    lt r6.w, r5.w, l(1.000000)
    if_nz r6.w
      mov r0.yz, r10.xxyx
      mov r9.z, r10.z
      mov r1.w, r5.w
      mov r2.w, r4.w
      break 
    endif 
  endif 
  iadd r4.w, r4.w, l(1)
  mov r0.yz, r10.xxyx
  mov r9.z, r10.z
  mov r1.w, r5.w
  mov r2.w, l(3)
endloop 
mov x0[0].z, l(0.125000)
mov x0[1].z, l(0.375000)
mov x0[2].z, l(0.625000)
mov x0[3].z, l(0.875000)
mov r8.z, x0[r2.w + 0].z
mad r9.xy, r0.yzyy, l(0.125000, -0.500000, 0.000000, 0.000000), r8.zwzz
dp4 r0.y, cb4[17].xyzw, icb[r2.w + 0].xyzw
ieq r0.z, r2.w, l(3)
mad_sat r1.w, r1.w, cb4[16].z, cb4[16].w
and r0.z, r0.z, r1.w
ld_indexable(texture2d)(float,float,float,float) r8.xy, l(0, 0, 0, 0), t0.xyzw
mad r8.xy, r8.yxyy, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r8.zw, r8.xxxx, l(0.000000, 0.000000, -0.0620006211, 0.194514)
mad r10.xy, r8.yyyy, l(0.649557710, -0.252099097, 0.000000, 0.000000), -r8.zwzz
dp2 r10.z, r8.xyxx, l(0.649557710, -0.0620006211, 0.000000, 0.000000)
mul r8.zw, r0.yyyy, cb4[38].zzzw
mul r11.xy, r8.zwzz, r10.xzxx
mov r11.z, l(0)
add r11.xyz, r9.xyzx, r11.xyzx
sample_c_lz_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r0.y, r11.xyxx, t6.xxxx, s6, r11.z
dp2 r10.w, r8.xyxx, l(-0.252099097, 0.194514, 0.000000, 0.000000)
mul r10.xy, r8.zwzz, r10.ywyy
mov r10.z, l(0)
add r10.xyz, r9.xyzx, r10.xyzx
sample_c_lz_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r1.w, r10.xyxx, t6.xxxx, s6, r10.z
add r0.y, r0.y, r1.w
mul r10.xy, r8.xxxx, l(-0.602610528, 0.987966299, 0.000000, 0.000000)
mad r10.xy, r8.yyyy, l(-0.167516, 0.0800626874, 0.000000, 0.000000), -r10.xyxx
dp2 r10.z, r8.xyxx, l(-0.167516, -0.602610528, 0.000000, 0.000000)
mul r11.xy, r8.zwzz, r10.xzxx
mov r11.z, l(0)
add r11.xyz, r9.xyzx, r11.xyzx
sample_c_lz_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r1.w, r11.xyxx, t6.xxxx, s6, r11.z
add r0.y, r0.y, r1.w
dp2 r10.w, r8.xyxx, l(0.0800626874, 0.987966299, 0.000000, 0.000000)
mul r8.xy, r8.zwzz, r10.ywyy
mov r8.z, l(0)
add r8.xyz, r8.xyzx, r9.xyzx
sample_c_lz_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r1.w, r8.xyxx, t6.xxxx, s6, r8.z
add r0.y, r0.y, r1.w
mul r1.w, r0.y, l(0.250000)
mad r2.w, v2.z, cb5[0].z, cb5[0].w
mad r8.xy, v2.xyxx, cb5[1].xyxx, cb5[1].zwzz
sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r8.xyxx, t7.xxxx, s7, r2.w
mad r0.y, -r0.y, l(0.250000), r2.w
mad r0.y, r0.z, r0.y, r1.w
dp3 r0.z, -r5.yzxy, r3.yzwy
add r0.z, r0.z, r0.z
mul r8.xyz, -r0.zzzz, r3.wyzw
dp3 r0.z, r8.xyzx, r8.xyzx
rsq r0.z, r0.z
mul r8.xyz, r0.zzzz, r8.xyzx
dp3 r0.z, r8.xyzx, r5.xyzx
add r0.z, -r0.z, l(1.000000)
mul r1.w, r0.z, r0.z
mul r1.w, r1.w, r1.w
mul r0.z, r0.z, r1.w
mad r0.z, r0.z, l(0.990000), l(0.010000)
mad r2.xyz, r2.xyzx, r0.xxxx, -v1.xyzx
mad r2.xyz, r2.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000), v1.xyzx
dp3 r0.x, -r5.xyzx, r2.xyzx
add r0.x, r0.x, r0.x
mad r8.xyz, r2.xyzx, -r0.xxxx, -r5.xyzx
mul r0.x, cb1[183].w, l(0.0412514210)
mul r1.w, cb1[174].w, l(0.0412514210)
ge r2.w, r2.z, l(0.250000)
if_nz r2.w
  mov r9.xyz, v2.xyzx
  mov r9.w, l(1.000000)
  dp4 r10.x, r9.xyzw, cb1[51].xyzw
  dp4 r10.y, r9.xyzw, cb1[52].xyzw
  dp4 r10.z, r9.xyzw, cb1[53].xyzw
  dp3 r9.x, r2.xyzx, cb1[51].xyzx
  dp3 r9.y, r2.xyzx, cb1[52].xyzx
  dp3 r9.z, r2.xyzx, cb1[53].xyzx
  dp3 r2.y, r8.xyzx, cb1[51].xyzx
  dp3 r2.z, r8.xyzx, cb1[52].xyzx
  dp3 r2.w, r8.xyzx, cb1[53].xyzx
  dp3 r2.x, r2.yzwy, r2.yzwy
  rsq r2.x, r2.x
  mul r2.yzw, r2.xxxx, r2.yyzw
  dp2 r4.w, v6.xxxx, cb1[66].zzzz
  add r4.w, r4.w, l(-1.000000)
  log r4.w, |r4.w|
  mul r4.w, r4.w, l(10.000000)
  exp r4.w, r4.w
  mad r4.w, r4.w, l(0.100000), l(1.000000)
  div r2.x, r2.y, r4.w
  mul r2.y, r10.z, l(-0.010000)
  max r2.y, r2.y, l(0.001000)
  mad r9.xyz, r9.xyzx, r2.yyyy, r10.xyzx
  mad r2.xyz, r2.xzwx, l(1000.000000, 1000.000000, 1000.000000, 0.000000), r9.xyzx
  mov r9.w, l(1.000000)
  dp4 r10.y, r9.xyzw, cb6[4].xyzw
  dp4 r10.x, r9.xyzw, cb6[5].xyzw
  dp4 r4.w, r9.xyzw, cb6[7].xyzw

// ProjectToPixelMatrix - stereo correction * resolution / 2:
add r15.w, r4.w, -r15.y
mul r15.w, r15.w, r15.x
mul r15.w, r15.w, cb1[66].x
mad r10.y, r15.w, l(0.5), r10.y

  mov r2.w, l(1.000000)
  dp4 r9.x, r2.xyzw, cb6[4].xyzw
  dp4 r9.y, r2.xyzw, cb6[5].xyzw
  dp4 r2.x, r2.xyzw, cb6[7].xyzw

// ProjectToPixelMatrix - stereo correction * resolution / 2:
add r15.w, r2.x, -r15.y
mul r15.w, r15.w, r15.x
mul r15.w, r15.w, cb1[66].x
mad r9.x, r15.w, l(0.5), r9.x

  div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
  div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
  mul r11.xy, r2.yyyy, r10.xyxx
  mul r11.zw, r2.xxxx, r9.xxxy
  mul r2.w, r2.y, r9.z
  mul r2.z, r2.x, r2.z
  add r12.xy, cb1[66].yxyy, l(-0.500000, -0.500000, 0.000000, 0.000000)
  lt r12.zw, r12.xxxy, r11.wwwz
  lt r13.xy, r11.wzww, l(0.500000, 0.500000, 0.000000, 0.000000)
  or r13.xy, r12.zwzz, r13.xyxx
  movc r12.xy, r12.zwzz, -r12.xyxx, l(-0.500000,-0.500000,0,0)
  mad r12.xy, r9.yxyy, r2.xxxx, r12.xyxx
  mad r9.xy, r9.yxyy, r2.xxxx, -r11.xyxx
  div r9.xy, r12.xyxx, r9.xyxx
  and r4.w, r9.x, r13.x
  max r5.w, r9.y, r4.w
  movc r4.w, r13.y, r5.w, r4.w
  mad r9.xy, r10.yxyy, r2.yyyy, -r11.zwzz
  mad r9.xy, r4.wwww, r9.xyxx, r11.zwzz
  add r5.w, -r2.x, r2.y
  mad r2.x, r4.w, r5.w, r2.x
  mad r5.w, r9.z, r2.y, -r2.z
  mad r2.z, r4.w, r5.w, r2.z
  mad r11.zw, r10.yyyx, r2.yyyy, -r9.xxxy
  dp2 r4.w, r11.zwzz, r11.zwzz
  lt r4.w, r4.w, l(0.000100)
  mad r11.zw, r10.yyyx, r2.yyyy, l(0.000000, 0.000000, 0.010000, 0.010000)
  movc r12.xy, r4.wwww, r11.zwzz, r9.xyxx
  mad r12.zw, -r10.yyyx, r2.yyyy, r12.xxxy
  lt r4.w, |r12.z|, |r12.w|
  movc r9.xy, r4.wwww, r11.xyxx, r11.yxyy
  movc r10.xyw, r4.wwww, r12.ywyz, r12.xzxw
  lt r5.w, l(0.000000), r10.y
  lt r6.w, r10.y, l(0.000000)
  iadd r5.w, -r5.w, r6.w
  itof r11.x, r5.w
  div r5.w, r11.x, r10.y
  mul r11.y, r10.w, r5.w
  mad r2.z, -r9.z, r2.y, r2.z
  add r2.x, -r2.y, r2.x
  mul r2.xz, r5.wwww, r2.xxzx
  mul r5.w, r10.x, r11.x
  ge r6.w, r9.z, l(99999.796875)
  ge r7.w, l(100000.000000), r9.z
  and r6.w, r6.w, r7.w
  mov r10.y, l(1.000000)
  mov r12.xy, r2.wyww
  mov r11.zw, l(0,0,-1.000000,-1.000000)
  mov r13.xy, r9.xyxx
  mov r7.w, l(0)
  mov r8.w, r6.w
  mov r14.y, r9.z
  mov r9.w, r6.w
  loop 
    mul r10.w, r11.x, r13.x
    ge r10.w, r5.w, r10.w
    ilt r13.z, r7.w, l(200)
    and r10.w, r10.w, r13.z
    not r13.z, r9.w
    and r10.w, r10.w, r13.z
    breakc_z r10.w
    mad r12.xz, r2.zzzz, l(5.000000, 0.000000, 2.500000, 0.000000), r12.xxxx
    mad r12.yw, r2.xxxx, l(0.000000, 5.000000, 0.000000, 2.500000), r12.yyyy
    div r14.x, r12.z, r12.w
    lt r10.w, r14.x, r14.y
    movc r12.zw, r10.wwww, r14.xxxy, r14.yyyx
    movc r11.zw, r4.wwww, r13.yyyx, r13.xxxy
    mul r13.zw, r11.zzzw, cb1[66].zzzw
    sample_l_indexable(texture2d)(float,float,float,float) r10.x, r13.zwzz, t9.xyzw, s0, l(0.000000)
    dp2 r10.w, r10.xyxx, cb1[11].zwzz
    dp2 r10.x, r10.xyxx, cb1[12].zwzz
    div r10.x, -r10.w, r10.x
    ge r10.w, -r10.x, r12.z
    lt r12.z, -r10.x, l(-100.000000)
    add r10.x, -r10.x, l(-0.200000)
    ge r10.x, r12.w, r10.x
    or r10.x, r10.x, r12.z
    and r9.w, r10.x, r10.w
    mad r13.xy, r11.xyxx, l(5.000000, 5.000000, 0.000000, 0.000000), r13.xyxx
    iadd r7.w, r7.w, l(1)
    mov r8.w, r9.w
    mov r14.y, r14.x
  endloop 
  if_nz r8.w
    if_z cb6[8].z
      ftoi r2.xy, r11.zwzz
      imax r2.xy, r2.xyxx, l(0, 0, 0, 0)
      ftoi r2.zw, cb1[66].xxxy
      iadd r2.zw, r2.zzzw, l(0, 0, -1, -1)
      imin r2.xy, r2.zwzz, r2.xyxx
      mov r2.zw, l(0,0,0,0)
      ld_indexable(texture2d)(float,float,float,float) r9.xy, r2.xyzw, t8.xyzw
      ne r2.zw, r9.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
      and r2.z, r2.w, r2.z
      if_z r2.z
        itof r2.xy, r2.xyxx
        mul r2.zw, r2.xxxy, cb6[8].xxxx
        ftoi r12.xy, r2.zwzz
        mov r12.zw, l(0,0,0,0)
        ld_indexable(texture2d)(float,float,float,float) r2.z, r12.xyzw, t9.zwxy
        mov r2.w, l(1.000000)
        dp2 r4.w, r2.zwzz, cb1[11].zwzz
        dp2 r2.z, r2.zwzz, cb1[12].zwzz
        div r2.z, -r4.w, r2.z
        mad r2.xy, r2.xyxx, cb1[66].zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
        mul r2.xy, r2.xyxx, cb1[0].xyxx
        mul r12.xy, r2.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
        div r2.x, r2.z, cb1[67].x
        mov r12.z, -cb1[67].x
        mul r2.xyz, r2.xxxx, r12.xyzx
        mov r2.w, l(1.000000)
        dp4 r10.x, r2.xyzw, cb1[24].xyzw
        dp4 r10.y, r2.xyzw, cb1[25].xyzw
        dp4 r4.w, r2.xyzw, cb1[27].xyzw

// ProjectionMatrix - standard stereo correction:
add r15.w, r4.w, -r15.y
mad r10.x, r15.w, r15.x, r10.x

        dp4 r11.x, r2.xyzw, cb6[0].xyzw
        dp4 r11.y, r2.xyzw, cb6[1].xyzw
        dp4 r2.x, r2.xyzw, cb6[3].xyzw

// CameraSpaceToPreviousProjectedSpace - standard stereo correction:
add r15.w, r2.x, -r15.y
mad r11.x, r15.w, r15.x, r11.x

        max r2.x, r2.x, l(0.000100)
        div r2.xy, r11.xyxx, r2.xxxx
        div r2.zw, r10.xxxy, r4.wwww
        add r2.xy, -r2.xyxx, r2.zwzz
        mul r9.xz, r2.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
        mov r9.y, -r9.z
      endif 
    else 
      mov r9.xy, l(0,0,0,0)
    endif 
    mad r2.xy, r11.zwzz, cb1[66].zwzz, -r9.xyxx
    mul r9.xy, r2.xyxx, cb1[66].xyxx
    mul r9.xy, r9.xyxx, cb6[8].xxxx
    ftoi r9.xy, r9.xyxx
    mov r9.zw, l(0,0,0,0)
    ld_indexable(texture2d)(float,float,float,float) r9.x, r9.xyzw, t9.xyzw
    mov r9.y, l(1.000000)
    dp2 r2.w, r9.xyxx, cb1[11].zwzz
    dp2 r4.w, r9.xyxx, cb1[12].zwzz
    div r2.w, -r2.w, r4.w
    ge r2.w, r10.z, -r2.w
    not r4.w, r2.w
    add r9.xy, -r11.zwzz, v6.xyxx
    dp2 r5.w, r9.xyxx, r9.xyxx
    sqrt r5.w, r5.w
    ge r6.w, r5.w, l(700.000000)
    add r5.w, r5.w, l(-700.000000)
    mad r5.w, -r5.w, l(0.00333333341), l(1.000000)
    movc r5.w, r6.w, r5.w, l(1.000000)
    add r2.z, -r2.y, l(1.000000)
    mul_sat r9.xy, r2.yzyy, l(10.000000, 10.000000, 0.000000, 0.000000)
    mul r2.z, r9.y, r9.x
    mul r2.z, r2.z, r5.w
    movc r2.z, r2.w, r2.z, l(1.000000)
  else 
    mov r2.xyz, l(0,0,0,0)
    mov r4.w, l(0)
  endif 
  if_z r4.w
    lt r2.w, l(0.000000), r2.z
    if_nz r2.w
      mul r2.w, cb6[8].y, l(0.0412514210)
      sample_l_indexable(texture2d)(float,float,float,float) r2.xyw, r2.xyxx, t10.xywz, s4, r2.w
    else 
      mov r2.xyw, l(0,0,0,0)
    endif 
  else 
    mov r2.xyzw, l(0,0,0,0)
  endif 
else 
  mov r2.xyzw, l(0,0,0,0)
endif 
lt r4.w, l(0.000000), r2.z
if_nz r4.w
  div r9.xyz, r2.xywx, cb1[176].wwww
  lt r2.x, r2.z, l(1.000000)
  if_nz r2.x
    if_z cb1[184].z
      mov r10.xyz, v2.xyzx
      mov r10.w, l(1.000000)
      mov r11.xyzw, l(0,0,0,0)
      mov r2.xy, l(1.000000,0,0,0)
      loop 
        uge r2.w, r2.y, l(15)
        breakc_nz r2.w
        imul null, r2.w, r2.y, l(7)
        dp4 r12.x, r10.xyzw, cb1[r2.w + 68].xyzw
        dp4 r12.y, r10.xyzw, cb1[r2.w + 69].xyzw
        dp4 r12.z, r10.xyzw, cb1[r2.w + 70].xyzw
        ge r13.xyz, r12.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
        movc r13.xyz, r13.xyzx, cb1[r2.w + 72].xyzx, cb1[r2.w + 73].xyzx
        add r12.xyz, -|r12.xyzx|, l(1.000000, 1.000000, 1.000000, 0.000000)
        mul_sat r12.xyz, r13.xyzx, r12.xyzx
        mul r4.w, r12.y, r12.x
        mul r4.w, r12.z, r4.w
        lt r5.w, l(0.000000), r4.w
        if_nz r5.w
          dp3 r12.x, r8.xyzx, cb1[r2.w + 68].xyzx
          dp3 r12.y, r8.xyzx, cb1[r2.w + 69].xyzx
          dp3 r12.z, r8.xyzx, cb1[r2.w + 70].xyzx
          mul r4.w, r4.w, cb1[r2.w + 73].w
          mov r12.w, cb1[r2.w + 72].w
          sample_l_indexable(texturecubearray)(float,float,float,float) r12.xyzw, r12.xyzw, t2.xyzw, s5, r1.w
          mul r12.xyzw, r12.xyzw, cb1[r2.w + 74].xxxy
          min r2.w, r2.x, r4.w
          mad r12.xyzw, r12.xyzw, r2.wwww, r11.xyzw
          add r2.w, -r2.w, r2.x
          ge r4.w, l(0.000000), r2.w
          if_nz r4.w
            mov r11.xyzw, r12.xyzw
            mov r2.x, r2.w
            break 
          endif 
          mov r11.xyzw, r12.xyzw
          mov r2.x, r2.w
        endif 
        iadd r2.y, r2.y, l(1)
      endloop 
    else 
      mov r11.xyzw, l(0,0,0,0)
      mov r2.x, l(1.000000)
    endif 
    add r2.y, r2.x, r11.w
    lt r2.w, l(0.000000), r2.y
    if_nz r2.w
      add r2.w, -|r8.z|, r8.z
      mad r2.x, r2.x, r2.w, |r8.z|
      mad r2.x, r2.x, l(2.000000), l(2.000000)
      div r2.xw, l(-1.000000, 0.000000, 0.000000, 1.000000), r2.xxxx
      mul r2.xw, r2.xxxw, r8.yyyx
      mad r2.xw, r2.xxxw, l(0.950000, 0.000000, 0.000000, 0.950000), l(0.500000, 0.000000, 0.000000, 0.500000)
      sample_l_indexable(texture2d)(float,float,float,float) r10.xyz, r2.xwxx, t1.xyzw, s4, r0.x
      mov_sat r12.xyz, r10.xyzx
      movc r10.xyz, cb1[184].zzzz, r12.xyzx, r10.xyzx
      div r10.xyz, r10.xyzx, cb1[176].wwww
      mad r11.xyz, r10.xyzx, r2.yyyy, r11.xyzx
    endif 
    mov_sat r2.z, r2.z
    add r2.xyw, r9.xyxz, -r11.xyxz
    mad r9.xyz, r2.zzzz, r2.xywx, r11.xyzx
  endif 
else 
  if_z cb1[184].z
    mov r2.xyz, v2.xyzx
    mov r2.w, l(1.000000)
    mov r9.xyzw, l(0,0,0,0)
    mov r4.w, l(1.000000)
    mov r5.w, l(0)
    loop 
      uge r6.w, r5.w, l(15)
      breakc_nz r6.w
      imul null, r6.w, r5.w, l(7)
      dp4 r10.x, r2.xyzw, cb1[r6.w + 68].xyzw
      dp4 r10.y, r2.xyzw, cb1[r6.w + 69].xyzw
      dp4 r10.z, r2.xyzw, cb1[r6.w + 70].xyzw
      ge r11.xyz, r10.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      movc r11.xyz, r11.xyzx, cb1[r6.w + 72].xyzx, cb1[r6.w + 73].xyzx
      add r10.xyz, -|r10.xyzx|, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul_sat r10.xyz, r11.xyzx, r10.xyzx
      mul r7.w, r10.y, r10.x
      mul r7.w, r10.z, r7.w
      lt r8.w, l(0.000000), r7.w
      if_nz r8.w
        dp3 r10.x, r8.xyzx, cb1[r6.w + 68].xyzx
        dp3 r10.y, r8.xyzx, cb1[r6.w + 69].xyzx
        dp3 r10.z, r8.xyzx, cb1[r6.w + 70].xyzx
        mul r7.w, r7.w, cb1[r6.w + 73].w
        mov r10.w, cb1[r6.w + 72].w
        sample_l_indexable(texturecubearray)(float,float,float,float) r10.xyzw, r10.xyzw, t2.xyzw, s5, r1.w
        mul r10.xyzw, r10.xyzw, cb1[r6.w + 74].xxxy
        min r6.w, r4.w, r7.w
        mad r10.xyzw, r10.xyzw, r6.wwww, r9.xyzw
        add r6.w, r4.w, -r6.w
        ge r7.w, l(0.000000), r6.w
        if_nz r7.w
          mov r9.xyzw, r10.xyzw
          mov r4.w, r6.w
          break 
        endif 
        mov r9.xyzw, r10.xyzw
        mov r4.w, r6.w
      endif 
      iadd r5.w, r5.w, l(1)
    endloop 
  else 
    mov r9.xyzw, l(0,0,0,0)
    mov r4.w, l(1.000000)
  endif 
  add r1.w, r4.w, r9.w
  lt r2.x, l(0.000000), r1.w
  if_nz r2.x
    add r2.x, -|r8.z|, r8.z
    mad r2.x, r4.w, r2.x, |r8.z|
    mad r2.x, r2.x, l(2.000000), l(2.000000)
    div r2.xy, l(-1.000000, 1.000000, 0.000000, 0.000000), r2.xxxx
    mul r2.xy, r2.xyxx, r8.yxyy
    mad r2.xy, r2.xyxx, l(0.950000, 0.950000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    sample_l_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyxx, t1.xyzw, s4, r0.x
    mov_sat r8.xyz, r2.xyzx
    movc r2.xyz, cb1[184].zzzz, r8.xyzx, r2.xyzx
    div r2.xyz, r2.xyzx, cb1[176].wwww
    mad r9.xyz, r2.xyzx, r1.wwww, r9.xyzx
  endif 
endif 
mad r2.xyz, r4.xyzx, r0.wwww, cb2[2].xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul r2.xyz, r0.xxxx, r2.xyzx
dp3 r0.x, r3.wyzw, cb2[2].xyzx
dp3 r0.w, r3.wyzw, r5.xyzx
max r0.xw, r0.xxxw, l(0.000000, 0.000000, 0.000000, 0.000000)
dp3 r1.w, r3.wyzw, r2.xyzx
max r1.w, r1.w, l(0.000000)
mul r1.w, r1.w, r1.w
mad r1.w, r1.w, l(-0.999993742), l(1.000000)
mul r1.w, r1.w, r1.w
mul r1.w, r1.w, l(3.14159274)
div r1.w, l(0.00000624999984), r1.w
mul r2.x, r0.x, r0.x
mad r2.y, -r0.x, r0.x, l(1.000000)
mul r2.y, r2.y, l(0.00000624999984)
max r2.x, r2.x, l(1.000000047E-034)
div r2.x, r2.y, r2.x
add r2.x, r2.x, l(1.000000)
sqrt r2.x, r2.x
add r2.x, r2.x, l(1.000000)
div r2.x, l(2.000000), r2.x
mul r2.y, r0.w, r0.w
mad r0.w, -r0.w, r0.w, l(1.000000)
mul r0.w, r0.w, l(0.00000624999984)
max r2.y, r2.y, l(1.000000047E-034)
div r0.w, r0.w, r2.y
add r0.w, r0.w, l(1.000000)
sqrt r0.w, r0.w
add r0.w, r0.w, l(1.000000)
div r0.w, l(2.000000), r0.w
mul r0.w, r0.w, r2.x
mul r0.w, r0.w, r1.w
mul r0.w, r0.z, r0.w
mul r0.x, r0.w, r0.x
mul r2.xyz, r0.xxxx, cb2[0].xyzx
mul r2.xyz, r0.yyyy, r2.xyzx
mad r2.xyz, r2.xyzx, cb3[5].zzzz, r9.xyzx
mul r4.xyz, r3.yzwy, l(-0.488603, 0.488603, -0.488603, 0.000000)
mul r5.xyz, r4.xxxx, cb2[23].xyzx
mad r5.xyz, cb2[22].xyzx, l(0.282095, 0.282095, 0.282095, 0.000000), r5.xyzx
mad r4.xyw, r4.yyyy, cb2[24].xyxz, r5.xyxz
mad r4.xyz, r4.zzzz, cb2[25].xyzx, r4.xywx
mul r5.xyzw, r3.xyzw, r3.yzzz
mul r5.xyw, r5.xyxw, l(1.092548, -1.092548, 0.000000, -1.092548)
mad r4.xyz, r5.xxxx, cb2[26].xyzx, r4.xyzx
mad r4.xyz, r5.yyyy, cb2[27].xyzx, r4.xyzx
mad r0.x, r5.z, l(3.000000), l(-1.000000)
mul r0.x, r0.x, l(0.315392)
mad r4.xyz, r0.xxxx, cb2[28].xyzx, r4.xyzx
mad r4.xyz, r5.wwww, cb2[29].xyzx, r4.xyzx
mul r0.x, r3.y, r3.y
mad r0.x, r3.w, r3.w, -r0.x
mul r0.x, r0.x, l(0.546274)
mad r3.xyz, r0.xxxx, cb2[30].xyzx, r4.xyzx
mul r1.xyz, r1.xyzx, cb3[5].zzzz
mul r0.xyw, r0.yyyy, cb2[0].xyxz
mul r0.xyw, r0.xyxw, l(0.318309873, 0.318309873, 0.000000, 0.318309873)
mad r0.xyw, r3.xyxz, l(6.28318548, 6.28318548, 0.000000, 6.28318548), r0.xyxw
mul r0.xyw, r0.xyxw, r1.xyxz
mad r0.xyw, r6.xyxz, r7.xyxz, r0.xyxw
add r1.xyz, -r0.xywx, r2.xyzx
mad r0.xyz, r0.zzzz, r1.xyzx, r0.xywx
mul r0.xyz, r0.xyzx, cb1[176].wwww
max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
min o0.xyz, r0.xyzx, l(64512.000000, 64512.000000, 64512.000000, 0.000000)
mul r0.xyz, r6.xyzx, cb1[176].wwww
max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r0.xyz, r0.xyzx, l(64512.000000, 64512.000000, 64512.000000, 0.000000)
dp3 o0.w, r0.xyzx, l(0.212639, 0.715168655, 0.0721923187, 0.000000)
ret 
// Approximately 643 instruction slots used