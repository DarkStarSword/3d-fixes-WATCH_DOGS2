// hlsltool.py --fix-wd2-unproject -i --only-autofixed --fxc /home/dss/fxc.exe eb496dea0d8446ff-ps_replace.txt
// ---- Created with 3Dmigoto v1.2.42 on Tue Dec 27 10:54:57 2016

cbuffer Global : register(b0)
{
  float4 EnvironmentLuminances : packoffset(c0);
  float4 FakeEarthShadowPlane : packoffset(c1);
  float4 GlobalLightsIntensity : packoffset(c2);
  float4 GlobalWeatherControl : packoffset(c3);
  float4 MaterialWetnessParams[22] : packoffset(c4);
  float4 WindGlobalTurbulence : packoffset(c26);
  float4 WindVelocityTextureCoverage : packoffset(c27);
  float4 WorldLoadingRingSizes[2] : packoffset(c28);

  struct
  {
    float debugValue0;
    float debugValue1;
    float debugValue2;
    float debugValue3;
  } DebugValues : packoffset(c30);

  float3 SunShadowDirection : packoffset(c31);
  float CrowdAnimationStartTime : packoffset(c31.w);
  float3 WindGlobalNoiseTextureChannelSel : packoffset(c32);
  float GlobalReflectionTextureBlendRatio : packoffset(c32.w);
  float3 WindGlobalNoiseTextureCoverage : packoffset(c33);
  float GlobalWaterLevel : packoffset(c33.w);

  struct
  {
    float time;
    float staticReflectionIntensity;
    float gameDeltaTime;
  } GlobalScalars : packoffset(c34);

  float RcpStaticReflectionExposureScale : packoffset(c34.w);
  float2 GlobalNoiseSampler2DSquareSize : packoffset(c35);
  float SandstormIntensity : packoffset(c35.z);
  float StaticReflectionIntensityDest : packoffset(c35.w);
  float2 WindNoiseDeltaVector : packoffset(c36);
  float TimeOfDay : packoffset(c36.z);
  float VertexAOIntensity : packoffset(c36.w);
  float2 WindVector : packoffset(c37);
}

cbuffer Viewport : register(b1)
{
  float4 CameraNearPlaneSize : packoffset(c0);
  float4x4 DepthTextureTransform : packoffset(c1);
  float4 FSMClipPlanes : packoffset(c5);
  float4 FacettedShadowCastParams : packoffset(c6);
  float4 FogValues0 : packoffset(c7);
  float4 FogValues1 : packoffset(c8);
  float4x4 InvProjectionMatrix : packoffset(c9);
  float4x4 InvProjectionMatrixDepth : packoffset(c13);
  float4x3 InvViewMatrix : packoffset(c17);
  float4x4 PreviousViewProjectionMatrix : packoffset(c20);
  float4x4 ProjectionMatrix : packoffset(c24);
  float4 RainOcclusionFadeParams : packoffset(c28);
  float4x4 RainOcclusionProjectionMatrix : packoffset(c29);
  float4 RainOcclusionShadowMapSize : packoffset(c33);
  float4 ReflectionVolumeDebugColors[15] : packoffset(c34);
  float4 VPosOffset : packoffset(c49);
  float4 VPosScale : packoffset(c50);
  float4x3 ViewMatrix : packoffset(c51);
  float4x4 ViewProjectionMatrix : packoffset(c54);
  float4x4 ViewRotProjectionMatrix : packoffset(c58);
  float4x4 ViewRotProjectionMatrixPure : packoffset(c62);
  float4 ViewportSize : packoffset(c66);

  struct
  {
    float near;
    float far;
    float view;
    float oneOverView;
  } CameraDistances : packoffset(c67);


  struct
  {
    float4x4 inverseTransform;
    float3 rcpFadeRangePositive;
    float textureArrayIndexAsFloat;
    float3 rcpFadeRangeNegative;
    float fadeFactor;
    float2 multipliers;
    uint parallaxCorrection;
    float padding0;
  } ReflectionVolumes[15] : packoffset(c68);

  float3 CameraDirection : packoffset(c173);
  float DefaultReflectionTextureArrayIndexAsFloat : packoffset(c173.w);
  float3 CameraPosition : packoffset(c174);
  float DynamicCubeMapReflectionTextureMaxMipIndex : packoffset(c174.w);
  float3 CullingCameraPosition : packoffset(c175);
  float ExposedWhitePointOverExposureScale : packoffset(c175.w);
  float3 FogColorVector : packoffset(c176);
  float ExposureScale : packoffset(c176.w);
  float3 OppositeFogColorDelta : packoffset(c177);
  float MaxParaboloidReflectionMipIndex : packoffset(c177.w);
  float3 SideFogColor : packoffset(c178);
  float MaxStaticReflectionMipIndex : packoffset(c178.w);
  float3 SunFogColorDelta : packoffset(c179);
  float MeasuredExposureScale : packoffset(c179.w);
  float3 TemporalFilteringParams : packoffset(c180);
  float RaindropRippleScale : packoffset(c180.w);
  float3 UncompressDepthWeights : packoffset(c181);
  float ReflectionScaleDistanceMul : packoffset(c181.w);
  float3 UncompressDepthWeightsWS : packoffset(c182);
  float ReflectionScaleStrength : packoffset(c182.w);
  float3 ViewPoint : packoffset(c183);
  float SkyParaboloidTextureMaxMipIndex : packoffset(c183.w);
  float2 DefaultReflectionMultipliers : packoffset(c184);
  bool UseOnlySkyReflection : packoffset(c184.z);
  float2 ReflectionGIControl : packoffset(c185);
  uint2 SelectedPixel : packoffset(c185.z);
}

cbuffer MaterialWD2WaterDecal : register(b2)
{
  float4 MaterialPickingID : packoffset(c0);
  float3 DiffuseColor1 : packoffset(c1);
  float MaskChannelUsageBlue : packoffset(c1.w);
  float3 SeparateOpacity : packoffset(c2);
  float MaskChannelUsageGreen : packoffset(c2.w);
  float2 NormalIntensity : packoffset(c3);
  float MaskChannelUsageRed : packoffset(c3.z);
  float Metalness : packoffset(c3.w);
  float2 NormalUVTiling1 : packoffset(c4);
  float MinimumWetness : packoffset(c4.z);
  float Reflectance : packoffset(c4.w);
  float Roughness : packoffset(c5);
}

SamplerState MaterialWD2WaterDecal__NormalTexture__SampObj___s : register(s0);
SamplerState MaterialWD2WaterDecal__OpacityTexture__SampObj___s : register(s1);
SamplerState ColorWrap_s : register(s2);
SamplerComparisonState ShadowRealSampler_s : register(s3);
Texture2D<float4> Viewport__DepthVPSampler__TexObj__ : register(t0);
Texture2D<float4> Viewport__RainOcclusionShadowMap__TexObj__ : register(t1);
Texture2DArray<float4> Viewport__RaindropRippleTexture : register(t2);
Texture2D<float4> MaterialWD2WaterDecal__NormalTexture__TexObj__ : register(t3);
Texture2D<float4> MaterialWD2WaterDecal__OpacityTexture__TexObj__ : register(t4);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  linear centroid float4 v0 : TEXCOORD0,
  linear centroid float4 v1 : TEXCOORD1,
  linear centroid float4 v2 : TEXCOORD2,
  linear centroid float4 v3 : TEXCOORD3,
  linear centroid float4 v4 : TEXCOORD4,
  linear centroid float4 v5 : TEXCOORD5,
  linear centroid float4 v6 : TEXCOORD6,
  linear centroid float2 v7 : TEXCOORD7,
  float4 v8 : SV_Position0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

// WATCH_DOGS2 unprojection fix inserted by DarkStarSword's hlsltool.py:
// hlsltool.py --fix-wd2-unproject -i --only-autofixed --fxc /home/dss/fxc.exe eb496dea0d8446ff-ps_replace.txt

  r0.xy = (int2)v8.xy;
  r0.zw = float2(0,0);
  r0.x = Viewport__DepthVPSampler__TexObj__.Load(r0.xyz).x;
  r0.yw = float2(1,1);
  r0.z = dot(r0.xy, InvProjectionMatrix._m22_m32);
  r0.x = dot(r0.xy, InvProjectionMatrix._m23_m33);
  r0.x = -r0.z / r0.x;
  r0.z = -r0.x;
  r1.xy = v8.xy * VPosScale.zw + VPosOffset.zw;
  r0.xy = r1.xy * r0.zz;

// Fix decals, note depth is negative (or could have used r0.x):
float4 s = StereoParams.Load(0);
r0.x -= s.x * (-r0.z - s.y) * InvProjectionMatrix._m00;

  r1.x = dot(v3.xyzw, r0.xyzw);
  r1.x = -v7.x + r1.x;
  r1.y = cmp(r1.x < -v7.y);
  r1.x = cmp(0 < r1.x);
  r1.x = (int)r1.x | (int)r1.y;
  if (r1.x != 0) discard;
  r1.x = dot(r0.xyzw, v1.xyzw);
  r1.y = dot(r0.xyzw, v2.xyzw);
  r1.zw = float2(1,1) + -r1.xy;
  r2.xyzw = cmp(r1.xyzw < float4(0,0,0,0));
  r1.xy = v0.xy * r1.xy + v0.zw;
  r1.zw = (int2)r2.zw | (int2)r2.xy;
  r1.z = (int)r1.w | (int)r1.z;
  if (r1.z != 0) discard;
  r2.z = dot(r0.xyzw, InvViewMatrix._m02_m12_m22_m32);
  r2.x = dot(r0.xyzw, InvViewMatrix._m00_m10_m20_m30);
  r2.y = dot(r0.xyzw, InvViewMatrix._m01_m11_m21_m31);
  r0.xyz = CameraPosition.xyz + -r2.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(v4.xyz, v4.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = v4.xyz * r0.www;
  r4.xyz = r3.xyz * float3(0.300000012,0.300000012,0.219999999) + r2.xyz;
  r2.xy = RaindropRippleScale * r2.xy;
  r4.w = 1;
  r5.x = dot(r4.xyzw, RainOcclusionProjectionMatrix._m00_m10_m20_m30);
  r5.y = dot(r4.xyzw, RainOcclusionProjectionMatrix._m01_m11_m21_m31);
  r0.w = dot(r4.xyzw, RainOcclusionProjectionMatrix._m02_m12_m22_m32);
  r0.w = Viewport__RainOcclusionShadowMap__TexObj__.SampleCmpLevelZero(ShadowRealSampler_s, r5.xy, r0.w, int2(0, 0)).x;
  r1.z = saturate(r3.z);
  r1.z = dot(r1.zz, r1.zz);
  r1.z = -1 + r1.z;
  r1.z = max(0, r1.z);
  r0.w = r1.z * r0.w;
  r2.z = 1;
  r1.zw = Viewport__RaindropRippleTexture.Sample(ColorWrap_s, r2.xyz).xy;
  r1.zw = r1.zw * r0.ww;
  r2.xy = NormalUVTiling1.xy * r1.xy;
  r0.w = MaterialWD2WaterDecal__OpacityTexture__TexObj__.Sample(MaterialWD2WaterDecal__OpacityTexture__SampObj___s, r1.xy).y;
  r1.xy = MaterialWD2WaterDecal__NormalTexture__TexObj__.Sample(MaterialWD2WaterDecal__NormalTexture__SampObj___s, r2.xy).xy;
  r1.xy = r1.xy * float2(2,2) + float2(-1,-1);
  r2.xy = NormalIntensity.xx * r1.xy;
  r1.x = dot(r1.xy, r1.xy);
  r1.x = min(1, r1.x);
  r1.x = 1 + -r1.x;
  r1.x = sqrt(r1.x);
  r1.y = dot(v5.xyz, v5.xyz);
  r1.y = rsqrt(r1.y);
  r4.xyz = v5.xyz * r1.yyy;
  r2.yzw = r4.xyz * r2.yyy;
  r1.y = dot(v6.xyz, v6.xyz);
  r1.y = rsqrt(r1.y);
  r4.xyz = v6.xyz * r1.yyy;
  r2.xyz = r2.xxx * r4.xyz + r2.yzw;
  r2.xyz = r1.xxx * r3.xyz + r2.xyz;
  r2.xy = r1.zw * MaterialWetnessParams[1].ww + r2.xy;
  r1.x = dot(r2.xyz, r2.xyz);
  r1.x = rsqrt(r1.x);
  r1.xyz = r2.xyz * r1.xxx;
  o1.xyz = r2.xyz;
  r0.x = saturate(dot(r0.xyz, r1.xyz));
  r0.x = 1 + -r0.x;
  r0.x = r0.x * r0.x;
  r0.x = r0.x * 0.939999998 + 0.0599999987;
  r1.x = max(MinimumWetness, GlobalWeatherControl.y);
  r1.x = 1 + -r1.x;
  r0.w = -r1.x + r0.w;
  r0.w = saturate(5 * r0.w);
  r1.x = r0.w * -2 + 3;
  r0.w = r0.w * r0.w;
  r0.w = r1.x * r0.w;
  r0.yz = float2(1,1);
  r0.xyz = r0.xyz * r0.www;
  r0.xyw = SeparateOpacity.yzx * r0.yzx;
  o0.w = r0.w;
  o3.w = r0.w;
  o0.xyz = DiffuseColor1.xyz;
  o1.w = r0.x;
  o2.w = r0.y;
  o2.x = Reflectance;
  o2.y = Roughness;
  o2.z = Metalness;
  o3.xyz = float3(0,0,0);
  return;

}
