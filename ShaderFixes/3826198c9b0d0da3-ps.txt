// asmtool.py --fix-wd2-soft-shadows -i --only-autofixed 3826198c9b0d0da3-ps.txt
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.42 on Tue Dec 27 10:49:55 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float       
// TEXCOORD                 1   xy          2     NONE   float   xy  
// SV_SampleIndex           0   x           3   SAMPLE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer cb13[133], dynamicIndexed
dcl_sampler s1, mode_comparison
dcl_resource_texture2darray (float,float,float,float) t0
dcl_resource_texture2dms(0) (float,float,float,float) t1
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear sample v2.xy
dcl_input_ps_sgv v3.x, sampleIndex
dcl_output o0.xyzw
dcl_temps 11

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r10.xyzw, l(0, 0, 0, 0), t125.xyzw

add r0.xy, -cb13[109].yxyy, cb13[109].wzww
div r0.xy, cb13[109].yxyy, r0.xyxx
add r0.xy, -r0.xyxx, v2.xyxx
ftoi r1.xy, v0.xyxx
mov r1.zw, l(0,0,0,0)
ldms_indexable(texture2dms)(float,float,float,float) r0.z, r1.xyzw, t1.zwxy, v3.x
eq r1.x, cb13[132].y, l(1.000000)
mov r0.w, l(1.000000)
dp2 r1.y, r0.zwzz, cb13[42].zwzz
dp2 r0.w, r0.zwzz, cb13[43].zwzz
div r0.w, r1.y, r0.w
movc r1.z, r1.x, r0.w, r0.z
mad r1.xy, r0.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
mov r1.w, l(1.000000)
dp4 r0.x, r1.xyzw, cb13[36].xyzw
dp4 r0.y, r1.xyzw, cb13[37].xyzw
dp4 r0.z, r1.xyzw, cb13[38].xyzw
dp4 r0.w, r1.xyzw, cb13[39].xyzw
div r0.xyzw, r0.xyzw, r0.wwww

// WATCH_DOGS2 soft shadows fix inserted with DarkStarSword's asmtool.py:
// asmtool.py --fix-wd2-soft-shadows -i --only-autofixed 3826198c9b0d0da3-ps.txt

add r10.w, r0.z, -r10.y
mul r10.w, r10.w, r10.x
mad r0.x, -r10.w, cb13[36].x, r0.x

add r1.x, -cb13[131].y, l(0.500000)
mul r1.y, r1.x, cb13[131].z
mad r1.x, -r1.x, cb13[131].z, r1.x
div r1.z, cb13[129].z, cb13[119].z
log r1.z, |r1.z|
mul r1.z, r1.z, |cb13[119].w|
exp r1.z, r1.z
mad r1.z, cb13[119].y, r1.z, cb13[119].x
mov r1.w, l(-1)
mov r2.xyzw, l(0,0,0,-1)
mov r3.xyzw, l(0,0,0,0)
mov r4.x, l(0)
loop 
  itof r4.y, r4.x
  ge r4.y, r4.y, cb13[129].x
  breakc_nz r4.y
  dp4 r4.y, cb13[120].xyzw, icb[r4.x + 0].xyzw
  eq r4.y, r4.y, l(1.000000)
  if_nz r4.y
    ishl r4.y, r4.x, l(2)
    dp4 r5.x, r0.xyzw, cb13[r4.y + 84].xyzw
    dp4 r5.y, r0.xyzw, cb13[r4.y + 85].xyzw
    dp4 r5.z, r0.xyzw, cb13[r4.y + 86].xyzw
    dp4 r4.y, r0.xyzw, cb13[r4.y + 87].xyzw
    div r5.xyz, r5.xyzx, r4.yyyy
    add_sat r5.w, -r1.z, r5.z
    add r4.yz, r5.xxyx, l(0.000000, -0.500000, -0.500000, 0.000000)
    lt r6.xy, l(0.000000, 0.000000, 0.000000, 0.000000), r5.xyxx
    lt r6.zw, r5.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
    and r4.w, r6.z, r6.x
    and r4.w, r6.y, r4.w
    and r4.w, r6.w, r4.w
    lt r6.xy, r1.xxxx, |r4.yzyy|
    or r5.z, r6.y, r6.x
    if_nz r4.w
      if_nz r5.z
        iadd r4.w, r4.x, l(1)
        itof r4.w, r4.w
        lt r4.w, r4.w, cb13[129].x
        iadd r4.w, -r4.w, r4.x
        add r4.yz, -r1.xxxx, |r4.yyzy|
        div r4.yz, r4.yyzy, r1.yyyy
        lt r5.z, r4.z, r4.y
        movc_sat r4.y, r5.z, r4.y, r4.z
        mov r6.xyz, r3.xyzx
        mov r2.w, r4.w
        mov r4.z, r3.w
        mov r5.z, r4.w
        loop 
          itof r6.w, r5.z
          ge r6.w, r6.w, cb13[129].x
          breakc_nz r6.w
          dp4 r6.w, cb13[120].xyzw, icb[r5.z + 0].xyzw
          eq r6.w, r6.w, l(1.000000)
          if_nz r6.w
            ishl r6.w, r5.z, l(2)
            dp4 r7.x, r0.xyzw, cb13[r6.w + 84].xyzw
            dp4 r7.y, r0.xyzw, cb13[r6.w + 85].xyzw
            dp4 r7.z, r0.xyzw, cb13[r6.w + 86].xyzw
            dp4 r6.w, r0.xyzw, cb13[r6.w + 87].xyzw
            div r7.xyz, r7.xyzx, r6.wwww
            add_sat r7.w, -r1.z, r7.z
            add r8.xy, r7.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
            lt r8.zw, l(0.000000, 0.000000, 0.000000, 0.000000), r7.xxxy
            lt r9.xy, r7.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
            and r6.w, r8.z, r9.x
            and r6.w, r8.w, r6.w
            and r6.w, r9.y, r6.w
            lt r8.xy, r1.xxxx, |r8.xyxx|
            or r7.z, r8.y, r8.x
            not r7.z, r7.z
            and r6.w, r6.w, r7.z
            if_nz r6.w
              mov r6.xyz, r7.xywx
              mov r4.z, r4.y
              mov r2.w, r5.z
              break 
            endif 
            mov r6.xyz, r7.xywx
          endif 
          iadd r5.z, r5.z, l(1)
          mov r4.z, l(0)
        endloop 
        mov r3.xyz, r6.xyzx
        mov r3.w, r4.z
      endif 
      mov r2.xyz, r5.xywx
      mov r1.w, r4.x
      break 
    endif 
    mov r2.xyz, r5.xywx
  endif 
  iadd r4.x, r4.x, l(1)
  mov r1.w, l(-1)
  mov r2.w, l(-1)
  mov r3.xyzw, l(0,0,0,0)
endloop 
ine r0.x, r1.w, l(-1)
if_nz r0.x
  eq r0.x, r3.w, l(0.000000)
  if_nz r0.x
    add r0.xy, cb13[110].zwzz, cb13[110].zwzz
    mad r0.zw, -cb13[110].zzzw, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, 1.000000, 1.000000)
    itof r1.z, r1.w
    mov r4.xy, l(0,-3.000000,0,0)
    loop 
      lt r4.z, l(3.000000), r4.y
      breakc_nz r4.z
      mul r5.x, r4.y, cb13[110].z
      mov r6.x, r4.x
      mov r6.y, l(-3.000000)
      loop 
        lt r4.z, l(3.000000), r6.y
        breakc_nz r4.z
        mul r5.y, r6.y, cb13[110].w
        add r4.zw, r2.xxxy, r5.xxxy
        lt r5.yz, r0.zzwz, r4.zzwz
        movc r4.zw, r5.yyyz, r0.zzzw, r4.zzzw
        lt r5.yz, r4.zzwz, r0.xxyx
        movc r1.xy, r5.yzyy, r0.xyxx, r4.zwzz
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r1.x, r1.xyzx, t0.xxxx, s1, r2.z
        add r6.x, r1.x, r6.x
        add r6.y, r6.y, l(1.000000)
      endloop 
      mov r4.x, r6.x
      add r4.y, r4.y, l(1.000000)
    endloop 
    mul r0.x, r4.x, l(0.0204081628)
    dp4 r0.y, cb13[121].xyzw, icb[r1.w + 0].xyzw
    add r0.y, -r0.y, l(1.000000)
    mul r0.z, r0.y, r0.x
    mad r0.x, -r0.x, r0.y, l(1.000000)
    mad r0.x, cb13[130].x, r0.x, r0.z
  else 
    eq r0.y, r3.w, l(1.000000)
    if_nz r0.y
      add r0.yz, cb13[110].zzwz, cb13[110].zzwz
      mad r1.xy, -cb13[110].zwzz, l(2.000000, 2.000000, 0.000000, 0.000000), l(1.000000, 1.000000, 0.000000, 0.000000)
      itof r4.z, r2.w
      mov r0.w, l(0)
      mov r1.z, l(-3.000000)
      loop 
        lt r4.w, l(3.000000), r1.z
        breakc_nz r4.w
        mul r5.x, r1.z, cb13[110].z
        mov r6.x, r0.w
        mov r6.y, l(-3.000000)
        loop 
          lt r4.w, l(3.000000), r6.y
          breakc_nz r4.w
          mul r5.y, r6.y, cb13[110].w
          add r5.yz, r3.xxyx, r5.xxyx
          lt r6.zw, r1.xxxy, r5.yyyz
          movc r5.yz, r6.zzwz, r1.xxyx, r5.yyzy
          lt r6.zw, r5.yyyz, r0.yyyz
          movc r4.xy, r6.zwzz, r0.yzyy, r5.yzyy
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r4.x, r4.xyzx, t0.xxxx, s1, r3.z
          add r6.x, r4.x, r6.x
          add r6.y, r6.y, l(1.000000)
        endloop 
        mov r0.w, r6.x
        add r1.z, r1.z, l(1.000000)
      endloop 
      mul r0.y, r0.w, l(0.0204081628)
      dp4 r0.z, cb13[121].xyzw, icb[r2.w + 0].xyzw
      add r0.z, -r0.z, l(1.000000)
      mul r0.w, r0.z, r0.y
      mad r0.y, -r0.y, r0.z, l(1.000000)
      mad r0.x, cb13[130].x, r0.y, r0.w
    else 
      add r0.yz, cb13[110].zzwz, cb13[110].zzwz
      mad r1.xy, -cb13[110].zwzz, l(2.000000, 2.000000, 0.000000, 0.000000), l(1.000000, 1.000000, 0.000000, 0.000000)
      itof r4.z, r1.w
      mov r0.w, l(0)
      mov r1.z, l(-3.000000)
      loop 
        lt r4.w, l(3.000000), r1.z
        breakc_nz r4.w
        mul r5.x, r1.z, cb13[110].z
        mov r6.x, r0.w
        mov r6.y, l(-3.000000)
        loop 
          lt r4.w, l(3.000000), r6.y
          breakc_nz r4.w
          mul r5.y, r6.y, cb13[110].w
          add r5.yz, r2.xxyx, r5.xxyx
          lt r6.zw, r1.xxxy, r5.yyyz
          movc r5.yz, r6.zzwz, r1.xxyx, r5.yyzy
          lt r6.zw, r5.yyyz, r0.yyyz
          movc r4.xy, r6.zwzz, r0.yzyy, r5.yzyy
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r4.x, r4.xyzx, t0.xxxx, s1, r2.z
          add r6.x, r4.x, r6.x
          add r6.y, r6.y, l(1.000000)
        endloop 
        mov r0.w, r6.x
        add r1.z, r1.z, l(1.000000)
      endloop 
      mul r0.w, r0.w, l(0.0204081628)
      itof r2.z, r2.w
      mov r1.z, l(0)
      mov r4.x, l(-3.000000)
      loop 
        lt r4.y, l(3.000000), r4.x
        breakc_nz r4.y
        mul r5.x, r4.x, cb13[110].z
        mov r6.x, r1.z
        mov r6.y, l(-3.000000)
        loop 
          lt r4.y, l(3.000000), r6.y
          breakc_nz r4.y
          mul r5.y, r6.y, cb13[110].w
          add r4.yz, r3.xxyx, r5.xxyx
          lt r5.yz, r1.xxyx, r4.yyzy
          movc r4.yz, r5.yyzy, r1.xxyx, r4.yyzy
          lt r5.yz, r4.yyzy, r0.yyzy
          movc r2.xy, r5.yzyy, r0.yzyy, r4.yzyy
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r2.x, r2.xyzx, t0.xxxx, s1, r3.z
          add r6.x, r2.x, r6.x
          add r6.y, r6.y, l(1.000000)
        endloop 
        mov r1.z, r6.x
        add r4.x, r4.x, l(1.000000)
      endloop 
      mul r0.y, r1.z, l(0.0204081628)
      dp4 r0.z, cb13[121].xyzw, icb[r1.w + 0].xyzw
      add r0.z, -r0.z, l(1.000000)
      mul r0.z, r0.z, r0.w
      dp4 r0.w, cb13[121].xyzw, icb[r2.w + 0].xyzw
      add r0.w, -r0.w, l(1.000000)
      mad r0.y, r0.y, r0.w, -r0.z
      mad r0.y, r3.w, r0.y, r0.z
      add r0.z, -r0.y, l(1.000000)
      mad r0.x, cb13[130].x, r0.z, r0.y
    endif 
  endif 
else 
  mov r0.x, l(1.000000)
endif 
mov o0.xyz, r0.xxxx
mov o0.w, l(1.000000)
ret 
// Approximately 0 instruction slots used