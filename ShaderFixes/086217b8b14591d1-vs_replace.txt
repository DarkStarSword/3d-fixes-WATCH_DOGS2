// ---- Created with 3Dmigoto v1.2.42 on Tue Dec 27 11:03:49 2016

cbuffer Viewport : register(b0)
{
  float4 CameraNearPlaneSize : packoffset(c0);
  float4x4 DepthTextureTransform : packoffset(c1);
  float4 FSMClipPlanes : packoffset(c5);
  float4 FacettedShadowCastParams : packoffset(c6);
  float4 FogValues0 : packoffset(c7);
  float4 FogValues1 : packoffset(c8);
  float4x4 InvProjectionMatrix : packoffset(c9);
  float4x4 InvProjectionMatrixDepth : packoffset(c13);
  float4x3 InvViewMatrix : packoffset(c17);
  float4x4 PreviousViewProjectionMatrix : packoffset(c20);
  float4x4 ProjectionMatrix : packoffset(c24);
  float4 RainOcclusionFadeParams : packoffset(c28);
  float4x4 RainOcclusionProjectionMatrix : packoffset(c29);
  float4 RainOcclusionShadowMapSize : packoffset(c33);
  float4 ReflectionVolumeDebugColors[15] : packoffset(c34);
  float4 VPosOffset : packoffset(c49);
  float4 VPosScale : packoffset(c50);
  float4x3 ViewMatrix : packoffset(c51);
  float4x4 ViewProjectionMatrix : packoffset(c54);
  float4x4 ViewRotProjectionMatrix : packoffset(c58);
  float4x4 ViewRotProjectionMatrixPure : packoffset(c62);
  float4 ViewportSize : packoffset(c66);

  struct
  {
    float near;
    float far;
    float view;
    float oneOverView;
  } CameraDistances : packoffset(c67);


  struct
  {
    float4x4 inverseTransform;
    float3 rcpFadeRangePositive;
    float textureArrayIndexAsFloat;
    float3 rcpFadeRangeNegative;
    float fadeFactor;
    float2 multipliers;
    uint parallaxCorrection;
    float padding0;
  } ReflectionVolumes[15] : packoffset(c68);

  float3 CameraDirection : packoffset(c173);
  float DefaultReflectionTextureArrayIndexAsFloat : packoffset(c173.w);
  float3 CameraPosition : packoffset(c174);
  float DynamicCubeMapReflectionTextureMaxMipIndex : packoffset(c174.w);
  float3 CullingCameraPosition : packoffset(c175);
  float ExposedWhitePointOverExposureScale : packoffset(c175.w);
  float3 FogColorVector : packoffset(c176);
  float ExposureScale : packoffset(c176.w);
  float3 OppositeFogColorDelta : packoffset(c177);
  float MaxParaboloidReflectionMipIndex : packoffset(c177.w);
  float3 SideFogColor : packoffset(c178);
  float MaxStaticReflectionMipIndex : packoffset(c178.w);
  float3 SunFogColorDelta : packoffset(c179);
  float MeasuredExposureScale : packoffset(c179.w);
  float3 TemporalFilteringParams : packoffset(c180);
  float RaindropRippleScale : packoffset(c180.w);
  float3 UncompressDepthWeights : packoffset(c181);
  float ReflectionScaleDistanceMul : packoffset(c181.w);
  float3 UncompressDepthWeightsWS : packoffset(c182);
  float ReflectionScaleStrength : packoffset(c182.w);
  float3 ViewPoint : packoffset(c183);
  float SkyParaboloidTextureMaxMipIndex : packoffset(c183.w);
  float2 DefaultReflectionMultipliers : packoffset(c184);
  bool UseOnlySkyReflection : packoffset(c184.z);
  float2 ReflectionGIControl : packoffset(c185);
  uint2 SelectedPixel : packoffset(c185.z);
}

cbuffer LightData : register(b1)
{

  struct
  {
    float4x4 CascadedShadowProjections[4];
    float4 CascadedShadowSliceFadeParams;
    float4 CascadedBlurKernelMinSizes;
    float4 CascadedBlurKernelMaxSizes;
    float4 LightCapsuleDivLength;
    float4 LightFadingClipPlanes[8];
    float4 LightIESParams;
    float4 LightProjectedVideoUnpack[8];
    float4 LightShadowFactor;
    float4 LightShadowMapSize;
    float4x4 LightSpotShadowProjections;
    float4x4 LightVolumeTransform;
    float3 LightCapsuleMulLength;
    float3 LightDirection;
    float3 LightColor;
    float3 LightPivotPosition;
    float3 LightPosition;
    float2 LightCapsuleParams;
    float2 LightSpotConeFactors;
    float4 LightAttenuation;
    float2 LightSpotShadowAngleFactors;
    float LightSpotNearClipFactor;
    float CascadedShadowGrazingAngleScale;
  } LightDatas : packoffset(c0);

}

cbuffer LightEffectVolume : register(b2)
{
  float4 BeamUVOffsets : packoffset(c0);
  float4 Colour : packoffset(c1);
  float4x4 ViewToLightClipMatrix : packoffset(c2);
  float4x4 ViewToLightMatrix : packoffset(c6);
  float4x4 ViewToWorldMatrix : packoffset(c10);
  float4x4 WorldMatrix : packoffset(c14);
  float4x4 WorldToVolumeTextureCoordMatrix : packoffset(c18);
  float2 BeamInterleavedPatternUVScale : packoffset(c22);
  float OneOverSoftRange : packoffset(c22.z);
  float2 OneOverBeamTextureSize : packoffset(c23);
}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float3 v0 : POSITION0,
  out float3 o0 : TEXCOORD0,
  out float4 o1 : SV_Position0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = 1 / ProjectionMatrix._m00;
  r0.y = 1 / ProjectionMatrix._m11;
  r1.xz = v0.xz;
  r1.yw = float2(1,1);
  r1.xyz = -v0.xyz * v0.yyy + r1.xyz;
  r2.xyz = v0.xyz * v0.yyy;
  r1.xyz = LightDatas.LightSpotNearClipFactor * r1.xyz + r2.xyz;
  r2.x = dot(r1.xyzw, WorldMatrix._m00_m10_m20_m30);
  r2.y = dot(r1.xyzw, WorldMatrix._m01_m11_m21_m31);
  r2.z = dot(r1.xyzw, WorldMatrix._m02_m12_m22_m32);
  r2.w = dot(r1.xyzw, WorldMatrix._m03_m13_m23_m33);
  r1.x = dot(r2.xyzw, ViewProjectionMatrix._m00_m10_m20_m30);
  r1.y = dot(r2.xyzw, ViewProjectionMatrix._m01_m11_m21_m31);
  o0.xy = r1.xy * r0.xy;
  r1.w = dot(r2.xyzw, ViewProjectionMatrix._m03_m13_m23_m33);
  o1.z = dot(r2.xyzw, ViewProjectionMatrix._m02_m12_m22_m32);
  o0.z = r1.w;
  o1.xyw = r1.xyw;
  return;
}
