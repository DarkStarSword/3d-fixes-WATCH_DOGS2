// asmtool.py --fix-wd2-soft-shadows -i --only-autofixed 3ee0f01528d37a16-ps.txt
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.42 on Tue Dec 27 10:49:36 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float       
// TEXCOORD                 1   xy          2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer cb13[133], dynamicIndexed
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 6

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r5.xyzw, l(0, 0, 0, 0), t125.xyzw

add r0.xy, -cb13[109].yxyy, cb13[109].wzww
add r0.zw, v0.xxxy, -cb13[109].yyyx
div r0.xy, r0.zwzz, r0.xyxx
ftoi r1.xy, v0.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyzw, t1.zwxy
eq r1.x, cb13[132].y, l(1.000000)
mov r0.w, l(1.000000)
dp2 r1.y, r0.zwzz, cb13[42].zwzz
dp2 r0.w, r0.zwzz, cb13[43].zwzz
div r0.w, r1.y, r0.w
movc r1.z, r1.x, r0.w, r0.z
mad r1.xy, r0.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
mov r1.w, l(1.000000)
dp4 r0.x, r1.xyzw, cb13[36].xyzw
dp4 r0.y, r1.xyzw, cb13[37].xyzw
dp4 r0.z, r1.xyzw, cb13[38].xyzw
dp4 r0.w, r1.xyzw, cb13[39].xyzw
div r0.xyzw, r0.xyzw, r0.wwww

// WATCH_DOGS2 soft shadows fix inserted with DarkStarSword's asmtool.py:
// asmtool.py --fix-wd2-soft-shadows -i --only-autofixed 3ee0f01528d37a16-ps.txt

add r5.w, r0.z, -r5.y
mul r5.w, r5.w, r5.x
mad r0.x, -r5.w, cb13[36].x, r0.x

add r1.x, -cb13[131].y, l(0.500000)
mul r1.y, r1.x, cb13[131].z
mad r1.x, -r1.x, cb13[131].z, r1.x
mov r1.zw, l(0,0,-1,-1)
mov r2.xy, l(0,0,0,0)
loop 
  itof r2.z, r2.y
  ge r2.z, r2.z, cb13[129].x
  breakc_nz r2.z
  dp4 r2.z, cb13[120].xyzw, icb[r2.y + 0].xyzw
  eq r2.z, r2.z, l(1.000000)
  if_nz r2.z
    ishl r2.z, r2.y, l(2)
    dp4 r3.x, r0.xyzw, cb13[r2.z + 84].xyzw
    dp4 r3.y, r0.xyzw, cb13[r2.z + 85].xyzw
    dp4 r2.z, r0.xyzw, cb13[r2.z + 87].xyzw
    div r2.zw, r3.xxxy, r2.zzzz
    add r3.xy, r2.zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
    lt r3.zw, l(0.000000, 0.000000, 0.000000, 0.000000), r2.zzzw
    lt r2.zw, r2.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    and r2.z, r2.z, r3.z
    and r2.z, r3.w, r2.z
    and r2.z, r2.w, r2.z
    lt r3.zw, r1.xxxx, |r3.xxxy|
    or r2.w, r3.w, r3.z
    if_nz r2.z
      if_nz r2.w
        iadd r2.z, r2.y, l(1)
        itof r2.z, r2.z
        lt r2.z, r2.z, cb13[129].x
        iadd r2.z, -r2.z, r2.y
        add r3.xy, -r1.xxxx, |r3.xyxx|
        div r3.xy, r3.xyxx, r1.yyyy
        lt r2.w, r3.y, r3.x
        movc_sat r2.w, r2.w, r3.x, r3.y
        mov r1.w, r2.z
        mov r3.x, r2.x
        mov r3.y, r2.z
        loop 
          itof r3.z, r3.y
          ge r3.z, r3.z, cb13[129].x
          breakc_nz r3.z
          dp4 r3.z, cb13[120].xyzw, icb[r3.y + 0].xyzw
          eq r3.z, r3.z, l(1.000000)
          if_nz r3.z
            ishl r3.z, r3.y, l(2)
            dp4 r4.x, r0.xyzw, cb13[r3.z + 84].xyzw
            dp4 r4.y, r0.xyzw, cb13[r3.z + 85].xyzw
            dp4 r3.z, r0.xyzw, cb13[r3.z + 87].xyzw
            div r3.zw, r4.xxxy, r3.zzzz
            add r4.xy, r3.zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
            lt r4.zw, l(0.000000, 0.000000, 0.000000, 0.000000), r3.zzzw
            lt r3.zw, r3.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
            and r3.z, r3.z, r4.z
            and r3.z, r4.w, r3.z
            and r3.z, r3.w, r3.z
            lt r4.xy, r1.xxxx, |r4.xyxx|
            or r3.w, r4.y, r4.x
            not r3.w, r3.w
            and r3.z, r3.w, r3.z
            if_nz r3.z
              mov r3.x, r2.w
              mov r1.w, r3.y
              break 
            endif 
          endif 
          iadd r3.y, r3.y, l(1)
          mov r3.x, l(0)
        endloop 
        mov r2.x, r3.x
      endif 
      mov r1.z, r2.y
      break 
    endif 
  endif 
  iadd r2.y, r2.y, l(1)
  mov r1.zw, l(0,0,-1,-1)
  mov r2.x, l(0)
endloop 
ine r0.x, r1.z, l(-1)
if_nz r0.x
  itof r0.xy, r1.zwzz
  div r0.xy, r0.xyxx, cb13[129].xxxx
  add r0.y, -r0.x, r0.y
  mad r0.x, r2.x, r0.y, r0.x
else 
  mov r0.x, l(1.000000)
endif 
mov o0.xyz, r0.xxxx
mov o0.w, l(1.000000)
ret 
// Approximately 0 instruction slots used