// Glass panels on some buildings in nethack vision
// ---- Created with 3Dmigoto v1.2.53 on Sat Jan 07 15:48:48 2017

cbuffer Viewport : register(b0)
{
  float4 CameraNearPlaneSize : packoffset(c0);
  float4x4 DepthTextureTransform : packoffset(c1);
  float4 FSMClipPlanes : packoffset(c5);
  float4 FacettedShadowCastParams : packoffset(c6);
  float4 FogValues0 : packoffset(c7);
  float4 FogValues1 : packoffset(c8);
  float4x4 InvProjectionMatrix : packoffset(c9);
  float4x4 InvProjectionMatrixDepth : packoffset(c13);
  float4x3 InvViewMatrix : packoffset(c17);
  float4x4 PreviousViewProjectionMatrix : packoffset(c20);
  float4x4 ProjectionMatrix : packoffset(c24);
  float4 RainOcclusionFadeParams : packoffset(c28);
  float4x4 RainOcclusionProjectionMatrix : packoffset(c29);
  float4 RainOcclusionShadowMapSize : packoffset(c33);
  float4 ReflectionVolumeDebugColors[15] : packoffset(c34);
  float4 VPosOffset : packoffset(c49);
  float4 VPosScale : packoffset(c50);
  float4x3 ViewMatrix : packoffset(c51);
  float4x4 ViewProjectionMatrix : packoffset(c54);
  float4x4 ViewRotProjectionMatrix : packoffset(c58);
  float4x4 ViewRotProjectionMatrixPure : packoffset(c62);
  float4 ViewportSize : packoffset(c66);

  struct
  {
    float near;
    float far;
    float view;
    float oneOverView;
  } CameraDistances : packoffset(c67);


  struct
  {
    float4x4 inverseTransform;
    float3 rcpFadeRangePositive;
    float textureArrayIndexAsFloat;
    float3 rcpFadeRangeNegative;
    float fadeFactor;
    float2 multipliers;
    uint parallaxCorrection;
    float padding0;
  } ReflectionVolumes[15] : packoffset(c68);

  float3 CameraDirection : packoffset(c173);
  float DefaultReflectionTextureArrayIndexAsFloat : packoffset(c173.w);
  float3 CameraPosition : packoffset(c174);
  float DynamicCubeMapReflectionTextureMaxMipIndex : packoffset(c174.w);
  float3 CullingCameraPosition : packoffset(c175);
  float ExposedWhitePointOverExposureScale : packoffset(c175.w);
  float3 FogColorVector : packoffset(c176);
  float ExposureScale : packoffset(c176.w);
  float3 OppositeFogColorDelta : packoffset(c177);
  float MaxParaboloidReflectionMipIndex : packoffset(c177.w);
  float3 SideFogColor : packoffset(c178);
  float MaxStaticReflectionMipIndex : packoffset(c178.w);
  float3 SunFogColorDelta : packoffset(c179);
  float MeasuredExposureScale : packoffset(c179.w);
  float3 TemporalFilteringParams : packoffset(c180);
  float RaindropRippleScale : packoffset(c180.w);
  float3 UncompressDepthWeights : packoffset(c181);
  float ReflectionScaleDistanceMul : packoffset(c181.w);
  float3 UncompressDepthWeightsWS : packoffset(c182);
  float ReflectionScaleStrength : packoffset(c182.w);
  float3 ViewPoint : packoffset(c183);
  float SkyParaboloidTextureMaxMipIndex : packoffset(c183.w);
  float2 DefaultReflectionMultipliers : packoffset(c184);
  bool UseOnlySkyReflection : packoffset(c184.z);
  float2 ReflectionGIControl : packoffset(c185);
  uint2 SelectedPixel : packoffset(c185.z);
}

cbuffer SceneGeometry : register(b1)
{
  float4 GeometryPickingID : packoffset(c0);
  float4 GeometryUserData : packoffset(c1);
  float4 UVDecompression : packoffset(c2);

  struct
  {
    float positionMin;
    float positionRange;
    float meshLocalHeight;
    float isBuildingFacadeInterior;
  } MeshDecompression : packoffset(c3);

  float3 GeometryBBoxMax : packoffset(c4);
  float3 GeometryBBoxMin : packoffset(c5);
}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  int4 v0 : blendweight0,
  float4 v1 : normal0,
  float4 v2 : texcoord1,
  float4 v3 : texcoord0,
  float3 v4 : texcoord4,
  float2 v5 : texcoord5,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD1,
  out float3 o2 : TEXCOORD2,
  out float4 o3 : SV_Position0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.y = v4.z;
  r1.xyz = (int3)v0.xyz;
  r1.xyz = r1.xyz * MeshDecompression.positionRange + MeshDecompression.positionMin;
  r0.x = r1.z;
  r0.z = dot(r0.xy, float2(1,1));
  r2.xy = float2(1,-1) * v5.yx;
  r2.z = v4.x;
  r1.w = 1;
  r0.x = dot(r1.xyw, r2.xyz);
  r2.xy = v5.xy;
  r2.z = v4.y;
  r0.y = dot(r1.xyw, r2.xyz);
  r1.xyz = -CameraPosition.xyz + r0.xyz;
  o1.xyz = r0.xyz;
  r0.x = ViewRotProjectionMatrix._m10 * r1.y;
  r0.y = ViewRotProjectionMatrix._m11 * r1.y;
  r0.z = ViewRotProjectionMatrix._m12 * r1.y;
  r0.w = ViewRotProjectionMatrix._m13 * r1.y;
  r2.x = r1.z * ViewRotProjectionMatrix._m20 + ViewRotProjectionMatrix._m30;
  r2.y = r1.z * ViewRotProjectionMatrix._m21 + ViewRotProjectionMatrix._m31;
  r2.z = r1.z * ViewRotProjectionMatrix._m22 + ViewRotProjectionMatrix._m32;
  r2.w = r1.z * ViewRotProjectionMatrix._m23 + ViewRotProjectionMatrix._m33;
  r0.xyzw = r2.xyzw + r0.xyzw;
  r2.x = ViewRotProjectionMatrix._m00 * r1.x;
  r2.y = ViewRotProjectionMatrix._m01 * r1.x;
  r2.z = ViewRotProjectionMatrix._m02 * r1.x;
  r2.w = ViewRotProjectionMatrix._m03 * r1.x;
  r0.xyzw = r2.xyzw + r0.xyzw;
  r1.xy = CameraNearPlaneSize.xy * r0.xy;
  r1.xy = float2(0.5,0.5) * r1.xy;
  o0.xy = r1.xy / -CameraDistances.near;
  o0.z = r0.w;
  o3.xyzw = r0.xyzw;
  r0.xy = float2(1,-1) * v5.yx;
  r0.zw = v1.zy * float2(2,2) + float2(-1,-1);
  o2.x = dot(r0.zw, r0.xy);
  o2.y = dot(r0.zw, v5.xy);
  o2.z = v1.x * 2 + -1;

float4 s = StereoParams.Load(0);
o3.x += s.x * (o3.w - s.y);

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.53 on Sat Jan 07 15:48:48 2017
//
//
// Buffer Definitions: 
//
// cbuffer Viewport
// {
//
//   float4 CameraNearPlaneSize;        // Offset:    0 Size:    16
//   float4x4 DepthTextureTransform;    // Offset:   16 Size:    64 [unused]
//   float4 FSMClipPlanes;              // Offset:   80 Size:    16 [unused]
//   float4 FacettedShadowCastParams;   // Offset:   96 Size:    16 [unused]
//   float4 FogValues0;                 // Offset:  112 Size:    16 [unused]
//   float4 FogValues1;                 // Offset:  128 Size:    16 [unused]
//   float4x4 InvProjectionMatrix;      // Offset:  144 Size:    64 [unused]
//   float4x4 InvProjectionMatrixDepth; // Offset:  208 Size:    64 [unused]
//   float4x3 InvViewMatrix;            // Offset:  272 Size:    48 [unused]
//   float4x4 PreviousViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4x4 ProjectionMatrix;         // Offset:  384 Size:    64 [unused]
//   float4 RainOcclusionFadeParams;    // Offset:  448 Size:    16 [unused]
//   float4x4 RainOcclusionProjectionMatrix;// Offset:  464 Size:    64 [unused]
//   float4 RainOcclusionShadowMapSize; // Offset:  528 Size:    16 [unused]
//   float4 ReflectionVolumeDebugColors[15];// Offset:  544 Size:   240 [unused]
//   float4 VPosOffset;                 // Offset:  784 Size:    16 [unused]
//   float4 VPosScale;                  // Offset:  800 Size:    16 [unused]
//   float4x3 ViewMatrix;               // Offset:  816 Size:    48 [unused]
//   float4x4 ViewProjectionMatrix;     // Offset:  864 Size:    64 [unused]
//   float4x4 ViewRotProjectionMatrix;  // Offset:  928 Size:    64
//   float4x4 ViewRotProjectionMatrixPure;// Offset:  992 Size:    64 [unused]
//   float4 ViewportSize;               // Offset: 1056 Size:    16 [unused]
//   
//   struct SCameraDistances
//   {
//       
//       float near;                    // Offset: 1072
//       float far;                     // Offset: 1076
//       float view;                    // Offset: 1080
//       float oneOverView;             // Offset: 1084
//
//   } CameraDistances;                 // Offset: 1072 Size:    16
//   
//   struct SReflectionVolume
//   {
//       
//       float4x4 inverseTransform;     // Offset: 1088
//       float3 rcpFadeRangePositive;   // Offset: 1152
//       float textureArrayIndexAsFloat;// Offset: 1164
//       float3 rcpFadeRangeNegative;   // Offset: 1168
//       float fadeFactor;              // Offset: 1180
//       float2 multipliers;            // Offset: 1184
//       uint parallaxCorrection;       // Offset: 1192
//       float padding0;                // Offset: 1196
//
//   } ReflectionVolumes[15];           // Offset: 1088 Size:  1680 [unused]
//   float3 CameraDirection;            // Offset: 2768 Size:    12 [unused]
//   float DefaultReflectionTextureArrayIndexAsFloat;// Offset: 2780 Size:     4 [unused]
//   float3 CameraPosition;             // Offset: 2784 Size:    12
//   float DynamicCubeMapReflectionTextureMaxMipIndex;// Offset: 2796 Size:     4 [unused]
//   float3 CullingCameraPosition;      // Offset: 2800 Size:    12 [unused]
//   float ExposedWhitePointOverExposureScale;// Offset: 2812 Size:     4 [unused]
//   float3 FogColorVector;             // Offset: 2816 Size:    12 [unused]
//   float ExposureScale;               // Offset: 2828 Size:     4 [unused]
//   float3 OppositeFogColorDelta;      // Offset: 2832 Size:    12 [unused]
//   float MaxParaboloidReflectionMipIndex;// Offset: 2844 Size:     4 [unused]
//   float3 SideFogColor;               // Offset: 2848 Size:    12 [unused]
//   float MaxStaticReflectionMipIndex; // Offset: 2860 Size:     4 [unused]
//   float3 SunFogColorDelta;           // Offset: 2864 Size:    12 [unused]
//   float MeasuredExposureScale;       // Offset: 2876 Size:     4 [unused]
//   float3 TemporalFilteringParams;    // Offset: 2880 Size:    12 [unused]
//   float RaindropRippleScale;         // Offset: 2892 Size:     4 [unused]
//   float3 UncompressDepthWeights;     // Offset: 2896 Size:    12 [unused]
//   float ReflectionScaleDistanceMul;  // Offset: 2908 Size:     4 [unused]
//   float3 UncompressDepthWeightsWS;   // Offset: 2912 Size:    12 [unused]
//   float ReflectionScaleStrength;     // Offset: 2924 Size:     4 [unused]
//   float3 ViewPoint;                  // Offset: 2928 Size:    12 [unused]
//   float SkyParaboloidTextureMaxMipIndex;// Offset: 2940 Size:     4 [unused]
//   float2 DefaultReflectionMultipliers;// Offset: 2944 Size:     8 [unused]
//   bool UseOnlySkyReflection;         // Offset: 2952 Size:     4 [unused]
//   float2 ReflectionGIControl;        // Offset: 2960 Size:     8 [unused]
//   uint2 SelectedPixel;               // Offset: 2968 Size:     8 [unused]
//
// }
//
// cbuffer SceneGeometry
// {
//
//   float4 GeometryPickingID;          // Offset:    0 Size:    16 [unused]
//   float4 GeometryUserData;           // Offset:   16 Size:    16 [unused]
//   float4 UVDecompression;            // Offset:   32 Size:    16 [unused]
//   
//   struct SMeshDecompression
//   {
//       
//       float positionMin;             // Offset:   48
//       float positionRange;           // Offset:   52
//       float meshLocalHeight;         // Offset:   56
//       float isBuildingFacadeInterior;// Offset:   60
//
//   } MeshDecompression;               // Offset:   48 Size:    16
//   float3 GeometryBBoxMax;            // Offset:   64 Size:    12 [unused]
//   float3 GeometryBBoxMin;            // Offset:   80 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// Viewport                          cbuffer      NA          NA    0        1
// SceneGeometry                     cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// blendweight              0   xyzw        0     NONE     int   xyz 
// normal                   0   xyzw        1     NONE   float   xyz 
// texcoord                 1   xyzw        2     NONE   float       
// texcoord                 0   xyzw        3     NONE   float       
// texcoord                 4   xyz         4     NONE   float   xyz 
// texcoord                 5   xy          5     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 1   xyz         1     NONE   float   xyz 
// TEXCOORD                 2   xyz         2     NONE   float   xyz 
// SV_Position              0   xyzw        3      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[175], immediateIndexed
dcl_constantbuffer cb1[4], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v4.xyz
dcl_input v5.xy
dcl_output o0.xyz
dcl_output o1.xyz
dcl_output o2.xyz
dcl_output_siv o3.xyzw, position
dcl_temps 3
mov r0.y, v4.z
itof r1.xyz, v0.xyzx
mad r1.xyz, r1.xyzx, cb1[3].yyyy, cb1[3].xxxx
mov r0.x, r1.z
dp2 r0.z, r0.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r2.xy, v5.yxyy, l(1.000000, -1.000000, 0.000000, 0.000000)
mov r2.z, v4.x
mov r1.w, l(1.000000)
dp3 r0.x, r1.xywx, r2.xyzx
mov r2.xy, v5.xyxx
mov r2.z, v4.y
dp3 r0.y, r1.xywx, r2.xyzx
add r1.xyz, r0.xyzx, -cb0[174].xyzx
mov o1.xyz, r0.xyzx
mul r0.x, r1.y, cb0[58].y
mul r0.y, r1.y, cb0[59].y
mul r0.z, r1.y, cb0[60].y
mul r0.w, r1.y, cb0[61].y
mad r2.x, r1.z, cb0[58].z, cb0[58].w
mad r2.y, r1.z, cb0[59].z, cb0[59].w
mad r2.z, r1.z, cb0[60].z, cb0[60].w
mad r2.w, r1.z, cb0[61].z, cb0[61].w
add r0.xyzw, r0.xyzw, r2.xyzw
mul r2.x, r1.x, cb0[58].x
mul r2.y, r1.x, cb0[59].x
mul r2.z, r1.x, cb0[60].x
mul r2.w, r1.x, cb0[61].x
add r0.xyzw, r0.xyzw, r2.xyzw
mul r1.xy, r0.xyxx, cb0[0].xyxx
mul r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
div o0.xy, r1.xyxx, -cb0[67].xxxx
mov o0.z, r0.w
mov o3.xyzw, r0.xyzw
mul r0.xy, v5.yxyy, l(1.000000, -1.000000, 0.000000, 0.000000)
mad r0.zw, v1.zzzy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
dp2 o2.x, r0.zwzz, r0.xyxx
dp2 o2.y, r0.zwzz, v5.xyxx
mad o2.z, v1.x, l(2.000000), l(-1.000000)
ret 
// Approximately 39 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
