// ---- Created with 3Dmigoto v1.2.42 on Tue Dec 27 11:02:15 2016

cbuffer Viewport : register(b0)
{
  float4 CameraNearPlaneSize : packoffset(c0);
  float4x4 DepthTextureTransform : packoffset(c1);
  float4 FSMClipPlanes : packoffset(c5);
  float4 FacettedShadowCastParams : packoffset(c6);
  float4 FogValues0 : packoffset(c7);
  float4 FogValues1 : packoffset(c8);
  float4x4 InvProjectionMatrix : packoffset(c9);
  float4x4 InvProjectionMatrixDepth : packoffset(c13);
  float4x3 InvViewMatrix : packoffset(c17);
  float4x4 PreviousViewProjectionMatrix : packoffset(c20);
  float4x4 ProjectionMatrix : packoffset(c24);
  float4 RainOcclusionFadeParams : packoffset(c28);
  float4x4 RainOcclusionProjectionMatrix : packoffset(c29);
  float4 RainOcclusionShadowMapSize : packoffset(c33);
  float4 ReflectionVolumeDebugColors[15] : packoffset(c34);
  float4 VPosOffset : packoffset(c49);
  float4 VPosScale : packoffset(c50);
  float4x3 ViewMatrix : packoffset(c51);
  float4x4 ViewProjectionMatrix : packoffset(c54);
  float4x4 ViewRotProjectionMatrix : packoffset(c58);
  float4x4 ViewRotProjectionMatrixPure : packoffset(c62);
  float4 ViewportSize : packoffset(c66);

  struct
  {
    float near;
    float far;
    float view;
    float oneOverView;
  } CameraDistances : packoffset(c67);


  struct
  {
    float4x4 inverseTransform;
    float3 rcpFadeRangePositive;
    float textureArrayIndexAsFloat;
    float3 rcpFadeRangeNegative;
    float fadeFactor;
    float2 multipliers;
    uint parallaxCorrection;
    float padding0;
  } ReflectionVolumes[15] : packoffset(c68);

  float3 CameraDirection : packoffset(c173);
  float DefaultReflectionTextureArrayIndexAsFloat : packoffset(c173.w);
  float3 CameraPosition : packoffset(c174);
  float DynamicCubeMapReflectionTextureMaxMipIndex : packoffset(c174.w);
  float3 CullingCameraPosition : packoffset(c175);
  float ExposedWhitePointOverExposureScale : packoffset(c175.w);
  float3 FogColorVector : packoffset(c176);
  float ExposureScale : packoffset(c176.w);
  float3 OppositeFogColorDelta : packoffset(c177);
  float MaxParaboloidReflectionMipIndex : packoffset(c177.w);
  float3 SideFogColor : packoffset(c178);
  float MaxStaticReflectionMipIndex : packoffset(c178.w);
  float3 SunFogColorDelta : packoffset(c179);
  float MeasuredExposureScale : packoffset(c179.w);
  float3 TemporalFilteringParams : packoffset(c180);
  float RaindropRippleScale : packoffset(c180.w);
  float3 UncompressDepthWeights : packoffset(c181);
  float ReflectionScaleDistanceMul : packoffset(c181.w);
  float3 UncompressDepthWeightsWS : packoffset(c182);
  float ReflectionScaleStrength : packoffset(c182.w);
  float3 ViewPoint : packoffset(c183);
  float SkyParaboloidTextureMaxMipIndex : packoffset(c183.w);
  float2 DefaultReflectionMultipliers : packoffset(c184);
  bool UseOnlySkyReflection : packoffset(c184.z);
  float2 ReflectionGIControl : packoffset(c185);
  uint2 SelectedPixel : packoffset(c185.z);
}

cbuffer EmitterOld : register(b1)
{
  float4 ParticleLightColors[4] : packoffset(c0);
  float4 ParticleLightDirections[4] : packoffset(c4);
  float4 ParticleLightPositions[4] : packoffset(c8);
  float4 ParticleSpotParams[4] : packoffset(c12);
  float4x4 ParticleSpotProjMatrix : packoffset(c16);
  float4 ParticleSpotShadowTextureSize : packoffset(c20);
  float4 ParticleSpotVideoUnpack[8] : packoffset(c21);
  float4 RainColor : packoffset(c29);
  float4x4 ShadowOcclusionProjMatrix : packoffset(c30);
  float4 SoftClipPlane : packoffset(c34);
  float4 UniformFog : packoffset(c35);
  float3 TweakedLightDirection : packoffset(c36);
  float OneOverSoftRange : packoffset(c36.w);
  float2 AlphaScaleOffset : packoffset(c37);
  float ParticleZOffset : packoffset(c37.z);
  float QuadTessellationFactor : packoffset(c37.w);
  float2 FarSoftDistanceRange : packoffset(c38);
  int ParticleLightCount : packoffset(c38.z);
  uint FogParticleCount : packoffset(c38.w);
  float ParticleLightAttenuations[4] : packoffset(c39);
}

cbuffer SceneParticleAttributes : register(b2)
{
  float4 DistortionSpeedTiling : packoffset(c0);
  float4 OpacityCompensationKeyFrames[5] : packoffset(c1);
  float AlphaTestValue : packoffset(c6);
  float DiffuseLightingPowerExponent : packoffset(c6.y);
  float DistortionStrength : packoffset(c6.z);
  float HDRMul : packoffset(c6.w);
  float Translucency : packoffset(c7);
}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : position0,
  float4 v1 : color1,
  float4 v2 : texcoord4,
  float4 v3 : texcoord5,
  float4 v4 : texcoord6,
  float4 v5 : texcoord7,
  float4 v6 : texcoord3,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD1,
  out float3 o2 : TEXCOORD2,
  out float4 o3 : SV_Position0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v1.zyx * v1.zyx;
  o0.xyz = HDRMul * r0.xyz;
  o0.w = v1.w * AlphaScaleOffset.x + AlphaScaleOffset.y;
  r0.xyz = v3.xyz * v0.yyy;
  r0.xyz = v0.xxx * v2.xyz + r0.xyz;
  r0.xyz = v4.xyz + r0.xyz;
  r1.x = InvViewMatrix._m30 + -r0.x;
  r1.y = InvViewMatrix._m31 + -r0.y;
  r1.z = InvViewMatrix._m32 + -r0.z;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.xyz = r1.xyz * ParticleZOffset + r0.xyz;
  r1.xyz = CameraPosition.xyz + -r0.xyz;
  r1.x = dot(r1.xyz, -CameraDirection.xyz);
  r1.x = -CameraDistances.near + r1.x;
  o1.w = r1.x + r1.x;
  r0.w = 1;
  r1.x = dot(r0.xyzw, ViewProjectionMatrix._m00_m10_m20_m30);
  r1.y = dot(r0.xyzw, ViewProjectionMatrix._m01_m11_m21_m31);
  r1.z = dot(r0.xyzw, ViewProjectionMatrix._m02_m12_m22_m32);
  r1.w = dot(r0.xyzw, ViewProjectionMatrix._m03_m13_m23_m33);
  r0.xyz = -CameraPosition.xyz + r0.xyz;
  r0.x = dot(CameraDirection.xyz, r0.xyz);
  o2.z = CameraDistances.oneOverView * r0.x;
  o1.x = dot(r1.xyzw, DepthTextureTransform._m00_m10_m20_m30);
  o1.y = dot(r1.xyzw, DepthTextureTransform._m01_m11_m21_m31);
  o1.z = dot(r1.xyzw, DepthTextureTransform._m03_m13_m23_m33);
  o3.xyzw = r1.xyzw;
  sincos(v4.w, r0.x, r1.x);
  r2.x = -r0.x;
  r0.yz = float2(-0.5,-0.5) + v0.zw;
  r2.y = r1.x;
  r2.z = r0.x;
  r1.y = dot(r0.zy, r2.yz);
  r1.x = dot(r0.zy, r2.xy);
  r0.xy = float2(0.5,0.5) + r1.xy;
  o2.xy = r0.xy * v5.zw + v5.xy;
  return;
}
