// Heat distortion at screen depth (blow up a pipe) + security lasers (already at correct depth)
// ---- Created with 3Dmigoto v1.2.53 on Sat Jan 14 07:37:33 2017

cbuffer Viewport : register(b0)
{
  float4 CameraNearPlaneSize : packoffset(c0);
  float4x4 DepthTextureTransform : packoffset(c1);
  float4 FSMClipPlanes : packoffset(c5);
  float4 FacettedShadowCastParams : packoffset(c6);
  float4 FogValues0 : packoffset(c7);
  float4 FogValues1 : packoffset(c8);
  float4x4 InvProjectionMatrix : packoffset(c9);
  float4x4 InvProjectionMatrixDepth : packoffset(c13);
  float4x3 InvViewMatrix : packoffset(c17);
  float4x4 PreviousViewProjectionMatrix : packoffset(c20);
  float4x4 ProjectionMatrix : packoffset(c24);
  float4 RainOcclusionFadeParams : packoffset(c28);
  float4x4 RainOcclusionProjectionMatrix : packoffset(c29);
  float4 RainOcclusionShadowMapSize : packoffset(c33);
  float4 ReflectionVolumeDebugColors[15] : packoffset(c34);
  float4 VPosOffset : packoffset(c49);
  float4 VPosScale : packoffset(c50);
  float4x3 ViewMatrix : packoffset(c51);
  float4x4 ViewProjectionMatrix : packoffset(c54);
  float4x4 ViewRotProjectionMatrix : packoffset(c58);
  float4x4 ViewRotProjectionMatrixPure : packoffset(c62);
  float4 ViewportSize : packoffset(c66);

  struct
  {
    float near;
    float far;
    float view;
    float oneOverView;
  } CameraDistances : packoffset(c67);


  struct
  {
    float4x4 inverseTransform;
    float3 rcpFadeRangePositive;
    float textureArrayIndexAsFloat;
    float3 rcpFadeRangeNegative;
    float fadeFactor;
    float2 multipliers;
    uint parallaxCorrection;
    float padding0;
  } ReflectionVolumes[15] : packoffset(c68);

  float3 CameraDirection : packoffset(c173);
  float DefaultReflectionTextureArrayIndexAsFloat : packoffset(c173.w);
  float3 CameraPosition : packoffset(c174);
  float DynamicCubeMapReflectionTextureMaxMipIndex : packoffset(c174.w);
  float3 CullingCameraPosition : packoffset(c175);
  float ExposedWhitePointOverExposureScale : packoffset(c175.w);
  float3 FogColorVector : packoffset(c176);
  float ExposureScale : packoffset(c176.w);
  float3 OppositeFogColorDelta : packoffset(c177);
  float MaxParaboloidReflectionMipIndex : packoffset(c177.w);
  float3 SideFogColor : packoffset(c178);
  float MaxStaticReflectionMipIndex : packoffset(c178.w);
  float3 SunFogColorDelta : packoffset(c179);
  float MeasuredExposureScale : packoffset(c179.w);
  float3 TemporalFilteringParams : packoffset(c180);
  float RaindropRippleScale : packoffset(c180.w);
  float3 UncompressDepthWeights : packoffset(c181);
  float ReflectionScaleDistanceMul : packoffset(c181.w);
  float3 UncompressDepthWeightsWS : packoffset(c182);
  float ReflectionScaleStrength : packoffset(c182.w);
  float3 ViewPoint : packoffset(c183);
  float SkyParaboloidTextureMaxMipIndex : packoffset(c183.w);
  float2 DefaultReflectionMultipliers : packoffset(c184);
  bool UseOnlySkyReflection : packoffset(c184.z);
  float2 ReflectionGIControl : packoffset(c185);
  uint2 SelectedPixel : packoffset(c185.z);
}

cbuffer EmitterOld : register(b1)
{
  float4 ParticleLightColors[4] : packoffset(c0);
  float4 ParticleLightDirections[4] : packoffset(c4);
  float4 ParticleLightPositions[4] : packoffset(c8);
  float4 ParticleSpotParams[4] : packoffset(c12);
  float4x4 ParticleSpotProjMatrix : packoffset(c16);
  float4 ParticleSpotShadowTextureSize : packoffset(c20);
  float4 ParticleSpotVideoUnpack[8] : packoffset(c21);
  float4 RainColor : packoffset(c29);
  float4x4 ShadowOcclusionProjMatrix : packoffset(c30);
  float4 SoftClipPlane : packoffset(c34);
  float4 UniformFog : packoffset(c35);
  float3 TweakedLightDirection : packoffset(c36);
  float OneOverSoftRange : packoffset(c36.w);
  float2 AlphaScaleOffset : packoffset(c37);
  float ParticleZOffset : packoffset(c37.z);
  float QuadTessellationFactor : packoffset(c37.w);
  float2 FarSoftDistanceRange : packoffset(c38);
  int ParticleLightCount : packoffset(c38.z);
  uint FogParticleCount : packoffset(c38.w);
  float ParticleLightAttenuations[4] : packoffset(c39);
}

cbuffer SceneParticleAttributes : register(b2)
{
  float4 DistortionSpeedTiling : packoffset(c0);
  float4 OpacityCompensationKeyFrames[5] : packoffset(c1);
  float AlphaTestValue : packoffset(c6);
  float DiffuseLightingPowerExponent : packoffset(c6.y);
  float DistortionStrength : packoffset(c6.z);
  float HDRMul : packoffset(c6.w);
  float Translucency : packoffset(c7);
}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : position0,
  float4 v1 : color1,
  float4 v2 : texcoord4,
  float4 v3 : texcoord5,
  float4 v4 : texcoord6,
  float4 v5 : texcoord7,
  float4 v6 : texcoord3,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD1,
  out float3 o2 : TEXCOORD2,
  out float4 o3 : SV_Position0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v1.zyx * v1.zyx;
  o0.xyz = HDRMul * r0.xyz;
  o0.w = v1.w * AlphaScaleOffset.x + AlphaScaleOffset.y;
  r0.xyz = v3.xyz * v0.yyy;
  r0.xyz = v0.xxx * v2.xyz + r0.xyz;
  r0.xyz = v4.xyz + r0.xyz;
  r1.x = InvViewMatrix._m30 + -r0.x;
  r1.y = InvViewMatrix._m31 + -r0.y;
  r1.z = InvViewMatrix._m32 + -r0.z;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.xyz = r1.xyz * ParticleZOffset + r0.xyz;
  r1.xyz = CameraPosition.xyz + -r0.xyz;
  r1.x = dot(r1.xyz, -CameraDirection.xyz);
  r1.x = -CameraDistances.near + r1.x;
  o1.w = r1.x + r1.x;
  r0.w = 1;
  r1.x = dot(r0.xyzw, ViewProjectionMatrix._m00_m10_m20_m30);
  r1.y = dot(r0.xyzw, ViewProjectionMatrix._m01_m11_m21_m31);
  r1.z = dot(r0.xyzw, ViewProjectionMatrix._m02_m12_m22_m32);
  r1.w = dot(r0.xyzw, ViewProjectionMatrix._m03_m13_m23_m33);
  r0.xyz = -CameraPosition.xyz + r0.xyz;
  r0.x = dot(CameraDirection.xyz, r0.xyz);
  o2.z = CameraDistances.oneOverView * r0.x;
  o1.x = dot(r1.xyzw, DepthTextureTransform._m00_m10_m20_m30);
  o1.y = dot(r1.xyzw, DepthTextureTransform._m01_m11_m21_m31);
  o1.z = dot(r1.xyzw, DepthTextureTransform._m03_m13_m23_m33);
  o3.xyzw = r1.xyzw;
  sincos(v4.w, r0.x, r1.x);
  r2.x = -r0.x;
  r0.yz = float2(-0.5,-0.5) + v0.zw;
  r2.y = r1.x;
  r2.z = r0.x;
  r1.y = dot(r0.zy, r2.yz);
  r1.x = dot(r0.zy, r2.xy);
  r0.xy = float2(0.5,0.5) + r1.xy;
  o2.xy = r0.xy * v5.zw + v5.xy;

float4 s = StereoParams.Load(0);
o3.x += s.x * (o3.w - s.y);

// Driver stereo correction neutralisation technique: Normalise W to Convergence
if (s.y && o3.w > 0)
	o3 = o3 / o3.w * s.y;

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.53 on Sat Jan 14 07:37:33 2017
//
//
// Buffer Definitions: 
//
// cbuffer Viewport
// {
//
//   float4 CameraNearPlaneSize;        // Offset:    0 Size:    16 [unused]
//   float4x4 DepthTextureTransform;    // Offset:   16 Size:    64
//   float4 FSMClipPlanes;              // Offset:   80 Size:    16 [unused]
//   float4 FacettedShadowCastParams;   // Offset:   96 Size:    16 [unused]
//   float4 FogValues0;                 // Offset:  112 Size:    16 [unused]
//   float4 FogValues1;                 // Offset:  128 Size:    16 [unused]
//   float4x4 InvProjectionMatrix;      // Offset:  144 Size:    64 [unused]
//   float4x4 InvProjectionMatrixDepth; // Offset:  208 Size:    64 [unused]
//   float4x3 InvViewMatrix;            // Offset:  272 Size:    48
//   float4x4 PreviousViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4x4 ProjectionMatrix;         // Offset:  384 Size:    64 [unused]
//   float4 RainOcclusionFadeParams;    // Offset:  448 Size:    16 [unused]
//   float4x4 RainOcclusionProjectionMatrix;// Offset:  464 Size:    64 [unused]
//   float4 RainOcclusionShadowMapSize; // Offset:  528 Size:    16 [unused]
//   float4 ReflectionVolumeDebugColors[15];// Offset:  544 Size:   240 [unused]
//   float4 VPosOffset;                 // Offset:  784 Size:    16 [unused]
//   float4 VPosScale;                  // Offset:  800 Size:    16 [unused]
//   float4x3 ViewMatrix;               // Offset:  816 Size:    48 [unused]
//   float4x4 ViewProjectionMatrix;     // Offset:  864 Size:    64
//   float4x4 ViewRotProjectionMatrix;  // Offset:  928 Size:    64 [unused]
//   float4x4 ViewRotProjectionMatrixPure;// Offset:  992 Size:    64 [unused]
//   float4 ViewportSize;               // Offset: 1056 Size:    16 [unused]
//   
//   struct SCameraDistances
//   {
//       
//       float near;                    // Offset: 1072
//       float far;                     // Offset: 1076
//       float view;                    // Offset: 1080
//       float oneOverView;             // Offset: 1084
//
//   } CameraDistances;                 // Offset: 1072 Size:    16
//   
//   struct SReflectionVolume
//   {
//       
//       float4x4 inverseTransform;     // Offset: 1088
//       float3 rcpFadeRangePositive;   // Offset: 1152
//       float textureArrayIndexAsFloat;// Offset: 1164
//       float3 rcpFadeRangeNegative;   // Offset: 1168
//       float fadeFactor;              // Offset: 1180
//       float2 multipliers;            // Offset: 1184
//       uint parallaxCorrection;       // Offset: 1192
//       float padding0;                // Offset: 1196
//
//   } ReflectionVolumes[15];           // Offset: 1088 Size:  1680 [unused]
//   float3 CameraDirection;            // Offset: 2768 Size:    12
//   float DefaultReflectionTextureArrayIndexAsFloat;// Offset: 2780 Size:     4 [unused]
//   float3 CameraPosition;             // Offset: 2784 Size:    12
//   float DynamicCubeMapReflectionTextureMaxMipIndex;// Offset: 2796 Size:     4 [unused]
//   float3 CullingCameraPosition;      // Offset: 2800 Size:    12 [unused]
//   float ExposedWhitePointOverExposureScale;// Offset: 2812 Size:     4 [unused]
//   float3 FogColorVector;             // Offset: 2816 Size:    12 [unused]
//   float ExposureScale;               // Offset: 2828 Size:     4 [unused]
//   float3 OppositeFogColorDelta;      // Offset: 2832 Size:    12 [unused]
//   float MaxParaboloidReflectionMipIndex;// Offset: 2844 Size:     4 [unused]
//   float3 SideFogColor;               // Offset: 2848 Size:    12 [unused]
//   float MaxStaticReflectionMipIndex; // Offset: 2860 Size:     4 [unused]
//   float3 SunFogColorDelta;           // Offset: 2864 Size:    12 [unused]
//   float MeasuredExposureScale;       // Offset: 2876 Size:     4 [unused]
//   float3 TemporalFilteringParams;    // Offset: 2880 Size:    12 [unused]
//   float RaindropRippleScale;         // Offset: 2892 Size:     4 [unused]
//   float3 UncompressDepthWeights;     // Offset: 2896 Size:    12 [unused]
//   float ReflectionScaleDistanceMul;  // Offset: 2908 Size:     4 [unused]
//   float3 UncompressDepthWeightsWS;   // Offset: 2912 Size:    12 [unused]
//   float ReflectionScaleStrength;     // Offset: 2924 Size:     4 [unused]
//   float3 ViewPoint;                  // Offset: 2928 Size:    12 [unused]
//   float SkyParaboloidTextureMaxMipIndex;// Offset: 2940 Size:     4 [unused]
//   float2 DefaultReflectionMultipliers;// Offset: 2944 Size:     8 [unused]
//   bool UseOnlySkyReflection;         // Offset: 2952 Size:     4 [unused]
//   float2 ReflectionGIControl;        // Offset: 2960 Size:     8 [unused]
//   uint2 SelectedPixel;               // Offset: 2968 Size:     8 [unused]
//
// }
//
// cbuffer EmitterOld
// {
//
//   float4 ParticleLightColors[4];     // Offset:    0 Size:    64 [unused]
//   float4 ParticleLightDirections[4]; // Offset:   64 Size:    64 [unused]
//   float4 ParticleLightPositions[4];  // Offset:  128 Size:    64 [unused]
//   float4 ParticleSpotParams[4];      // Offset:  192 Size:    64 [unused]
//   float4x4 ParticleSpotProjMatrix;   // Offset:  256 Size:    64 [unused]
//   float4 ParticleSpotShadowTextureSize;// Offset:  320 Size:    16 [unused]
//   float4 ParticleSpotVideoUnpack[8]; // Offset:  336 Size:   128 [unused]
//   float4 RainColor;                  // Offset:  464 Size:    16 [unused]
//   float4x4 ShadowOcclusionProjMatrix;// Offset:  480 Size:    64 [unused]
//   float4 SoftClipPlane;              // Offset:  544 Size:    16 [unused]
//   float4 UniformFog;                 // Offset:  560 Size:    16 [unused]
//   float3 TweakedLightDirection;      // Offset:  576 Size:    12 [unused]
//   float OneOverSoftRange;            // Offset:  588 Size:     4 [unused]
//   float2 AlphaScaleOffset;           // Offset:  592 Size:     8
//   float ParticleZOffset;             // Offset:  600 Size:     4
//   float QuadTessellationFactor;      // Offset:  604 Size:     4 [unused]
//   float2 FarSoftDistanceRange;       // Offset:  608 Size:     8 [unused]
//   int ParticleLightCount;            // Offset:  616 Size:     4 [unused]
//   uint FogParticleCount;             // Offset:  620 Size:     4 [unused]
//   float ParticleLightAttenuations[4];// Offset:  624 Size:    52 [unused]
//
// }
//
// cbuffer SceneParticleAttributes
// {
//
//   float4 DistortionSpeedTiling;      // Offset:    0 Size:    16 [unused]
//   float4 OpacityCompensationKeyFrames[5];// Offset:   16 Size:    80 [unused]
//   float AlphaTestValue;              // Offset:   96 Size:     4 [unused]
//   float DiffuseLightingPowerExponent;// Offset:  100 Size:     4 [unused]
//   float DistortionStrength;          // Offset:  104 Size:     4 [unused]
//   float HDRMul;                      // Offset:  108 Size:     4
//   float Translucency;                // Offset:  112 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// Viewport                          cbuffer      NA          NA    0        1
// EmitterOld                        cbuffer      NA          NA    1        1
// SceneParticleAttributes           cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// position                 0   xyzw        0     NONE   float   xyzw
// color                    1   xyzw        1     NONE   float   xyzw
// texcoord                 4   xyzw        2     NONE   float   xyz 
// texcoord                 5   xyzw        3     NONE   float   xyz 
// texcoord                 6   xyzw        4     NONE   float   xyzw
// texcoord                 7   xyzw        5     NONE   float   xyzw
// texcoord                 3   xyzw        6     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyz         2     NONE   float   xyz 
// SV_Position              0   xyzw        3      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[175], immediateIndexed
dcl_constantbuffer cb1[38], immediateIndexed
dcl_constantbuffer cb2[7], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyz
dcl_input v3.xyz
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output_siv o3.xyzw, position
dcl_temps 3
mul r0.xyz, v1.zyxz, v1.zyxz
mul o0.xyz, r0.xyzx, cb2[6].wwww
mad o0.w, v1.w, cb1[37].x, cb1[37].y
mul r0.xyz, v0.yyyy, v3.xyzx
mad r0.xyz, v0.xxxx, v2.xyzx, r0.xyzx
add r0.xyz, r0.xyzx, v4.xyzx
add r1.x, -r0.x, cb0[17].w
add r1.y, -r0.y, cb0[18].w
add r1.z, -r0.z, cb0[19].w
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
mad r0.xyz, r1.xyzx, cb1[37].zzzz, r0.xyzx
add r1.xyz, -r0.xyzx, cb0[174].xyzx
dp3 r1.x, r1.xyzx, -cb0[173].xyzx
add r1.x, r1.x, -cb0[67].x
add o1.w, r1.x, r1.x
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb0[54].xyzw
dp4 r1.y, r0.xyzw, cb0[55].xyzw
dp4 r1.z, r0.xyzw, cb0[56].xyzw
dp4 r1.w, r0.xyzw, cb0[57].xyzw
add r0.xyz, r0.xyzx, -cb0[174].xyzx
dp3 r0.x, cb0[173].xyzx, r0.xyzx
mul o2.z, r0.x, cb0[67].w
dp4 o1.x, r1.xyzw, cb0[1].xyzw
dp4 o1.y, r1.xyzw, cb0[2].xyzw
dp4 o1.z, r1.xyzw, cb0[4].xyzw
mov o3.xyzw, r1.xyzw
sincos r0.x, r1.x, v4.w
mov r2.x, -r0.x
add r0.yz, v0.zzwz, l(0.000000, -0.500000, -0.500000, 0.000000)
mov r2.y, r1.x
mov r2.z, r0.x
dp2 r1.y, r0.zyzz, r2.yzyy
dp2 r1.x, r0.zyzz, r2.xyxx
add r0.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mad o2.xy, r0.xyxx, v5.zwzz, v5.xyxx
ret 
// Approximately 39 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
