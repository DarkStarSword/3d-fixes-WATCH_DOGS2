// ---- Created with 3Dmigoto v1.2.42 on Tue Dec 27 10:53:20 2016

cbuffer Viewport : register(b0)
{
  float4 CameraNearPlaneSize : packoffset(c0);
  float4x4 DepthTextureTransform : packoffset(c1);
  float4 FSMClipPlanes : packoffset(c5);
  float4 FacettedShadowCastParams : packoffset(c6);
  float4 FogValues0 : packoffset(c7);
  float4 FogValues1 : packoffset(c8);
  float4x4 InvProjectionMatrix : packoffset(c9);
  float4x4 InvProjectionMatrixDepth : packoffset(c13);
  float4x3 InvViewMatrix : packoffset(c17);
  float4x4 PreviousViewProjectionMatrix : packoffset(c20);
  float4x4 ProjectionMatrix : packoffset(c24);
  float4 RainOcclusionFadeParams : packoffset(c28);
  float4x4 RainOcclusionProjectionMatrix : packoffset(c29);
  float4 RainOcclusionShadowMapSize : packoffset(c33);
  float4 ReflectionVolumeDebugColors[15] : packoffset(c34);
  float4 VPosOffset : packoffset(c49);
  float4 VPosScale : packoffset(c50);
  float4x3 ViewMatrix : packoffset(c51);
  float4x4 ViewProjectionMatrix : packoffset(c54);
  float4x4 ViewRotProjectionMatrix : packoffset(c58);
  float4x4 ViewRotProjectionMatrixPure : packoffset(c62);
  float4 ViewportSize : packoffset(c66);

  struct
  {
    float near;
    float far;
    float view;
    float oneOverView;
  } CameraDistances : packoffset(c67);


  struct
  {
    float4x4 inverseTransform;
    float3 rcpFadeRangePositive;
    float textureArrayIndexAsFloat;
    float3 rcpFadeRangeNegative;
    float fadeFactor;
    float2 multipliers;
    uint parallaxCorrection;
    float padding0;
  } ReflectionVolumes[15] : packoffset(c68);

  float3 CameraDirection : packoffset(c173);
  float DefaultReflectionTextureArrayIndexAsFloat : packoffset(c173.w);
  float3 CameraPosition : packoffset(c174);
  float DynamicCubeMapReflectionTextureMaxMipIndex : packoffset(c174.w);
  float3 CullingCameraPosition : packoffset(c175);
  float ExposedWhitePointOverExposureScale : packoffset(c175.w);
  float3 FogColorVector : packoffset(c176);
  float ExposureScale : packoffset(c176.w);
  float3 OppositeFogColorDelta : packoffset(c177);
  float MaxParaboloidReflectionMipIndex : packoffset(c177.w);
  float3 SideFogColor : packoffset(c178);
  float MaxStaticReflectionMipIndex : packoffset(c178.w);
  float3 SunFogColorDelta : packoffset(c179);
  float MeasuredExposureScale : packoffset(c179.w);
  float3 TemporalFilteringParams : packoffset(c180);
  float RaindropRippleScale : packoffset(c180.w);
  float3 UncompressDepthWeights : packoffset(c181);
  float ReflectionScaleDistanceMul : packoffset(c181.w);
  float3 UncompressDepthWeightsWS : packoffset(c182);
  float ReflectionScaleStrength : packoffset(c182.w);
  float3 ViewPoint : packoffset(c183);
  float SkyParaboloidTextureMaxMipIndex : packoffset(c183.w);
  float2 DefaultReflectionMultipliers : packoffset(c184);
  bool UseOnlySkyReflection : packoffset(c184.z);
  float2 ReflectionGIControl : packoffset(c185);
  uint2 SelectedPixel : packoffset(c185.z);
}

cbuffer SceneGeometry : register(b1)
{
  float4 GeometryPickingID : packoffset(c0);
  float4 GeometryUserData : packoffset(c1);
  float4 UVDecompression : packoffset(c2);

  struct
  {
    float positionMin;
    float positionRange;
    float meshLocalHeight;
    float isBuildingFacadeInterior;
  } MeshDecompression : packoffset(c3);

  float3 GeometryBBoxMax : packoffset(c4);
  float3 GeometryBBoxMin : packoffset(c5);
}

cbuffer Skinning : register(b2)
{
  float4x3 BlendMatrices[511] : packoffset(c0);
  float4x3 PrevBlendMatrices[511] : packoffset(c1533);
}

cbuffer SceneGraphicObjectInstancePart : register(b3)
{
  float4x3 WorldMatrix : packoffset(c0);
}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  int4 v0 : blendweight0,
  float4 v1 : normal0,
  float4 v2 : texcoord1,
  float4 v3 : texcoord0,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD1,
  out float3 o2 : TEXCOORD2,
  out float4 o3 : SV_Position0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.w = 1;
  r1.xyz = (int3)v0.xyz;
  r1.xyz = r1.xyz * MeshDecompression.positionRange + MeshDecompression.positionMin;
  r1.w = 1;
  r2.x = (int)v0.w * 3;
  r0.x = dot(r1.xyzw, BlendMatrices[v0.w]._m00_m10_m20_m30);
  r0.y = dot(r1.xyzw, BlendMatrices[v0.w]._m01_m11_m21_m31);
  r0.z = dot(r1.xyzw, BlendMatrices[v0.w]._m02_m12_m22_m32);
  r1.x = dot(r0.xyzw, WorldMatrix._m00_m10_m20_m30);
  r1.y = dot(r0.xyzw, WorldMatrix._m01_m11_m21_m31);
  r1.z = dot(r0.xyzw, WorldMatrix._m02_m12_m22_m32);
  r0.xyz = -CameraPosition.xyz + r1.xyz;
  o1.xyz = r1.xyz;
  r1.x = ViewRotProjectionMatrix._m10 * r0.y;
  r1.y = ViewRotProjectionMatrix._m11 * r0.y;
  r1.z = ViewRotProjectionMatrix._m12 * r0.y;
  r1.w = ViewRotProjectionMatrix._m13 * r0.y;
  r3.x = r0.z * ViewRotProjectionMatrix._m20 + ViewRotProjectionMatrix._m30;
  r3.y = r0.z * ViewRotProjectionMatrix._m21 + ViewRotProjectionMatrix._m31;
  r3.z = r0.z * ViewRotProjectionMatrix._m22 + ViewRotProjectionMatrix._m32;
  r3.w = r0.z * ViewRotProjectionMatrix._m23 + ViewRotProjectionMatrix._m33;
  r1.xyzw = r3.xyzw + r1.xyzw;
  r3.x = ViewRotProjectionMatrix._m00 * r0.x;
  r3.y = ViewRotProjectionMatrix._m01 * r0.x;
  r3.z = ViewRotProjectionMatrix._m02 * r0.x;
  r3.w = ViewRotProjectionMatrix._m03 * r0.x;
  r0.xyzw = r3.xyzw + r1.xyzw;
  r1.xy = CameraNearPlaneSize.xy * r0.xy;
  r1.xy = float2(0.5,0.5) * r1.xy;
  o0.xy = r1.xy / -CameraDistances.near;
  o0.z = r0.w;
  o3.xyzw = r0.xyzw;
  r0.xyz = v1.zyx * float3(2,2,2) + float3(-1,-1,-1);
  r1.x = dot(r0.xyz, BlendMatrices[v0.w]._m00_m10_m20);
  r1.y = dot(r0.xyz, BlendMatrices[v0.w]._m01_m11_m21);
  r1.z = dot(r0.xyz, BlendMatrices[v0.w]._m02_m12_m22);
  o2.x = dot(r1.xyz, WorldMatrix._m00_m10_m20);
  o2.y = dot(r1.xyz, WorldMatrix._m01_m11_m21);
  o2.z = dot(r1.xyz, WorldMatrix._m02_m12_m22);
  return;
}
