// ---- Created with 3Dmigoto v1.2.42 on Tue Dec 27 10:53:52 2016

cbuffer Viewport : register(b0)
{
  float4 CameraNearPlaneSize : packoffset(c0);
  float4x4 DepthTextureTransform : packoffset(c1);
  float4 FSMClipPlanes : packoffset(c5);
  float4 FacettedShadowCastParams : packoffset(c6);
  float4 FogValues0 : packoffset(c7);
  float4 FogValues1 : packoffset(c8);
  float4x4 InvProjectionMatrix : packoffset(c9);
  float4x4 InvProjectionMatrixDepth : packoffset(c13);
  float4x3 InvViewMatrix : packoffset(c17);
  float4x4 PreviousViewProjectionMatrix : packoffset(c20);
  float4x4 ProjectionMatrix : packoffset(c24);
  float4 RainOcclusionFadeParams : packoffset(c28);
  float4x4 RainOcclusionProjectionMatrix : packoffset(c29);
  float4 RainOcclusionShadowMapSize : packoffset(c33);
  float4 ReflectionVolumeDebugColors[15] : packoffset(c34);
  float4 VPosOffset : packoffset(c49);
  float4 VPosScale : packoffset(c50);
  float4x3 ViewMatrix : packoffset(c51);
  float4x4 ViewProjectionMatrix : packoffset(c54);
  float4x4 ViewRotProjectionMatrix : packoffset(c58);
  float4x4 ViewRotProjectionMatrixPure : packoffset(c62);
  float4 ViewportSize : packoffset(c66);

  struct
  {
    float near;
    float far;
    float view;
    float oneOverView;
  } CameraDistances : packoffset(c67);


  struct
  {
    float4x4 inverseTransform;
    float3 rcpFadeRangePositive;
    float textureArrayIndexAsFloat;
    float3 rcpFadeRangeNegative;
    float fadeFactor;
    float2 multipliers;
    uint parallaxCorrection;
    float padding0;
  } ReflectionVolumes[15] : packoffset(c68);

  float3 CameraDirection : packoffset(c173);
  float DefaultReflectionTextureArrayIndexAsFloat : packoffset(c173.w);
  float3 CameraPosition : packoffset(c174);
  float DynamicCubeMapReflectionTextureMaxMipIndex : packoffset(c174.w);
  float3 CullingCameraPosition : packoffset(c175);
  float ExposedWhitePointOverExposureScale : packoffset(c175.w);
  float3 FogColorVector : packoffset(c176);
  float ExposureScale : packoffset(c176.w);
  float3 OppositeFogColorDelta : packoffset(c177);
  float MaxParaboloidReflectionMipIndex : packoffset(c177.w);
  float3 SideFogColor : packoffset(c178);
  float MaxStaticReflectionMipIndex : packoffset(c178.w);
  float3 SunFogColorDelta : packoffset(c179);
  float MeasuredExposureScale : packoffset(c179.w);
  float3 TemporalFilteringParams : packoffset(c180);
  float RaindropRippleScale : packoffset(c180.w);
  float3 UncompressDepthWeights : packoffset(c181);
  float ReflectionScaleDistanceMul : packoffset(c181.w);
  float3 UncompressDepthWeightsWS : packoffset(c182);
  float ReflectionScaleStrength : packoffset(c182.w);
  float3 ViewPoint : packoffset(c183);
  float SkyParaboloidTextureMaxMipIndex : packoffset(c183.w);
  float2 DefaultReflectionMultipliers : packoffset(c184);
  bool UseOnlySkyReflection : packoffset(c184.z);
  float2 ReflectionGIControl : packoffset(c185);
  uint2 SelectedPixel : packoffset(c185.z);
}

cbuffer SkyRenderer : register(b1)
{
  float4 AerialPerscpectiveFogParams : packoffset(c0);
  float4 ArtisticPatchForBrunetonSky : packoffset(c1);
  float4x4 SkyDomeInvViewMatrix : packoffset(c2);
  float4 SkyMoonPositionAndIntensity : packoffset(c6);
  float4 SkyParaboloidTextureSize : packoffset(c7);
  float4 SkyStarsIntensity : packoffset(c8);
  float4 SkySunPositionAndIrradiance : packoffset(c9);
  float4 StarDecalParams : packoffset(c10);
  float4 SunColorHack : packoffset(c11);
  float4 TopocentricXAxis : packoffset(c12);
  float4 TopocentricYAxis : packoffset(c13);
  float4 TopocentricZAxis : packoffset(c14);
  float3 MoonSkyColor : packoffset(c15);
  float MoonCloudIntensity : packoffset(c15.w);
  float3 MoonXAxis : packoffset(c16);
  float SkyIntensityForMainView : packoffset(c16.w);
  float3 MoonYAxis : packoffset(c17);
  float SkyMoonInScattering : packoffset(c17.w);
  float3 MoonZAxis : packoffset(c18);
  float SkyMoonMIETurbidity : packoffset(c18.w);
  float3 SkyMoonColor : packoffset(c19);
  float SkyMoonSpriteIntensity : packoffset(c19.w);
  float3 SkyMoonUnlitColor : packoffset(c20);
  float SkyMoonTurbidity : packoffset(c20.w);
  float3 SkyNightSkyHorizonColor : packoffset(c21);
  float SkyNightSkyCrossFadeThreshold : packoffset(c21.w);
  float3 SkyNightSkyTopColor : packoffset(c22);
  float SkyNightSkyGIFactor : packoffset(c22.w);
  float3 SkySunAndMoonTanCosAngle : packoffset(c23);
  float SkyNightSkyGradientGamma : packoffset(c23.w);
  float3 SunDiscDirection : packoffset(c24);
  float SkyNightSkyIntensity : packoffset(c24.w);
  float2 SkCameraSettings : packoffset(c25);
  float SkySunBelowHorizonFactor : packoffset(c25.z);
  float SkySunMoonCrossFade : packoffset(c25.w);
  float2 SkyFakeSunDirectionForMoonPhase : packoffset(c26);
  float SkySunTurbidity : packoffset(c26.z);
  float2 SkyOffScreenCloudLayersInvScale : packoffset(c27);
}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  out float2 o0 : TEXCOORD0,
  out float4 o1 : SV_Position0)
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

  o0.xy = v0.zw;
  o1.z = 1.99999994e-009;
  r0.xy = v0.zw * float2(2,2) + float2(-1,-1);
  r0.yzw = MoonYAxis.xyz * r0.yyy;
  r0.xyz = MoonXAxis.xyz * r0.xxx + r0.yzw;
  r0.xyz = r0.xyz * SkySunAndMoonTanCosAngle.xxx + SkyMoonPositionAndIntensity.xyz;
  r0.w = 1;
  o1.x = dot(r0.xyzw, ViewRotProjectionMatrix._m00_m10_m20_m30);
  o1.y = dot(r0.xyzw, ViewRotProjectionMatrix._m01_m11_m21_m31);
  o1.w = dot(r0.xyzw, ViewRotProjectionMatrix._m03_m13_m23_m33);
  return;
}
