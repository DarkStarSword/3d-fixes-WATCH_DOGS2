// hlsltool.py --fix-wd2-unproject -i --only-autofixed --fxc /home/dss/fxc.exe 81bf85f12e2873bc-ps_replace.txt
// ---- Created with 3Dmigoto v1.2.42 on Tue Dec 27 10:53:59 2016

cbuffer Global : register(b0)
{
  float4 EnvironmentLuminances : packoffset(c0);
  float4 FakeEarthShadowPlane : packoffset(c1);
  float4 GlobalLightsIntensity : packoffset(c2);
  float4 GlobalWeatherControl : packoffset(c3);
  float4 MaterialWetnessParams[22] : packoffset(c4);
  float4 WindGlobalTurbulence : packoffset(c26);
  float4 WindVelocityTextureCoverage : packoffset(c27);
  float4 WorldLoadingRingSizes[2] : packoffset(c28);

  struct
  {
    float debugValue0;
    float debugValue1;
    float debugValue2;
    float debugValue3;
  } DebugValues : packoffset(c30);

  float3 SunShadowDirection : packoffset(c31);
  float CrowdAnimationStartTime : packoffset(c31.w);
  float3 WindGlobalNoiseTextureChannelSel : packoffset(c32);
  float GlobalReflectionTextureBlendRatio : packoffset(c32.w);
  float3 WindGlobalNoiseTextureCoverage : packoffset(c33);
  float GlobalWaterLevel : packoffset(c33.w);

  struct
  {
    float time;
    float staticReflectionIntensity;
    float gameDeltaTime;
  } GlobalScalars : packoffset(c34);

  float RcpStaticReflectionExposureScale : packoffset(c34.w);
  float2 GlobalNoiseSampler2DSquareSize : packoffset(c35);
  float SandstormIntensity : packoffset(c35.z);
  float StaticReflectionIntensityDest : packoffset(c35.w);
  float2 WindNoiseDeltaVector : packoffset(c36);
  float TimeOfDay : packoffset(c36.z);
  float VertexAOIntensity : packoffset(c36.w);
  float2 WindVector : packoffset(c37);
}

cbuffer Viewport : register(b1)
{
  float4 CameraNearPlaneSize : packoffset(c0);
  float4x4 DepthTextureTransform : packoffset(c1);
  float4 FSMClipPlanes : packoffset(c5);
  float4 FacettedShadowCastParams : packoffset(c6);
  float4 FogValues0 : packoffset(c7);
  float4 FogValues1 : packoffset(c8);
  float4x4 InvProjectionMatrix : packoffset(c9);
  float4x4 InvProjectionMatrixDepth : packoffset(c13);
  float4x3 InvViewMatrix : packoffset(c17);
  float4x4 PreviousViewProjectionMatrix : packoffset(c20);
  float4x4 ProjectionMatrix : packoffset(c24);
  float4 RainOcclusionFadeParams : packoffset(c28);
  float4x4 RainOcclusionProjectionMatrix : packoffset(c29);
  float4 RainOcclusionShadowMapSize : packoffset(c33);
  float4 ReflectionVolumeDebugColors[15] : packoffset(c34);
  float4 VPosOffset : packoffset(c49);
  float4 VPosScale : packoffset(c50);
  float4x3 ViewMatrix : packoffset(c51);
  float4x4 ViewProjectionMatrix : packoffset(c54);
  float4x4 ViewRotProjectionMatrix : packoffset(c58);
  float4x4 ViewRotProjectionMatrixPure : packoffset(c62);
  float4 ViewportSize : packoffset(c66);

  struct
  {
    float near;
    float far;
    float view;
    float oneOverView;
  } CameraDistances : packoffset(c67);


  struct
  {
    float4x4 inverseTransform;
    float3 rcpFadeRangePositive;
    float textureArrayIndexAsFloat;
    float3 rcpFadeRangeNegative;
    float fadeFactor;
    float2 multipliers;
    uint parallaxCorrection;
    float padding0;
  } ReflectionVolumes[15] : packoffset(c68);

  float3 CameraDirection : packoffset(c173);
  float DefaultReflectionTextureArrayIndexAsFloat : packoffset(c173.w);
  float3 CameraPosition : packoffset(c174);
  float DynamicCubeMapReflectionTextureMaxMipIndex : packoffset(c174.w);
  float3 CullingCameraPosition : packoffset(c175);
  float ExposedWhitePointOverExposureScale : packoffset(c175.w);
  float3 FogColorVector : packoffset(c176);
  float ExposureScale : packoffset(c176.w);
  float3 OppositeFogColorDelta : packoffset(c177);
  float MaxParaboloidReflectionMipIndex : packoffset(c177.w);
  float3 SideFogColor : packoffset(c178);
  float MaxStaticReflectionMipIndex : packoffset(c178.w);
  float3 SunFogColorDelta : packoffset(c179);
  float MeasuredExposureScale : packoffset(c179.w);
  float3 TemporalFilteringParams : packoffset(c180);
  float RaindropRippleScale : packoffset(c180.w);
  float3 UncompressDepthWeights : packoffset(c181);
  float ReflectionScaleDistanceMul : packoffset(c181.w);
  float3 UncompressDepthWeightsWS : packoffset(c182);
  float ReflectionScaleStrength : packoffset(c182.w);
  float3 ViewPoint : packoffset(c183);
  float SkyParaboloidTextureMaxMipIndex : packoffset(c183.w);
  float2 DefaultReflectionMultipliers : packoffset(c184);
  bool UseOnlySkyReflection : packoffset(c184.z);
  float2 ReflectionGIControl : packoffset(c185);
  uint2 SelectedPixel : packoffset(c185.z);
}

cbuffer SkyBuffer : register(b2)
{

  struct
  {
    float4 m_lightIrradiance;
    float4 m_lightIrradianceWithoutCloudsCoverage;
    float4 m_lightDirection;
    float4 m_cloudLightVector;
    float4 m_cloudIrradiance;
    float4 m_environmentIrradianceSHRed;
    float4 m_environmentIrradianceSHGreen;
    float4 m_environmentIrradianceSHBlue;
    float4 m_environmentIrradianceAverage;
    float4 m_giDefaultProbeIrradiance[3];
    float4 m_giDefaultProbeTint[3];
    float4 m_giDirectEnvironmentIrradiance[3];
    float4 m_giBouncedEnvironmentIrradiance[4];
    float4 m_cloudAndSkyIrradianceSH[9];
    float4 m_skyOnlyIrradianceSH[9];
  } SkyLightStruct : packoffset(c0);

}

cbuffer LightData : register(b3)
{

  struct
  {
    float4x4 CascadedShadowProjections[4];
    float4 CascadedShadowSliceFadeParams;
    float4 CascadedBlurKernelMinSizes;
    float4 CascadedBlurKernelMaxSizes;
    float4 LightCapsuleDivLength;
    float4 LightFadingClipPlanes[8];
    float4 LightIESParams;
    float4 LightProjectedVideoUnpack[8];
    float4 LightShadowFactor;
    float4 LightShadowMapSize;
    float4x4 LightSpotShadowProjections;
    float4x4 LightVolumeTransform;
    float3 LightCapsuleMulLength;
    float3 LightDirection;
    float3 LightColor;
    float3 LightPivotPosition;
    float3 LightPosition;
    float2 LightCapsuleParams;
    float2 LightSpotConeFactors;
    float4 LightAttenuation;
    float2 LightSpotShadowAngleFactors;
    float LightSpotNearClipFactor;
    float CascadedShadowGrazingAngleScale;
  } LightDatas : packoffset(c0);

}

cbuffer SSR : register(b4)
{
  float4x4 CameraSpaceToPreviousProjectedSpace : packoffset(c0);
  float4x4 ProjectToPixelMatrix : packoffset(c4);
  float SSRTextureMaxMipIndex : packoffset(c8);
  bool GameIsPaused : packoffset(c8.y);
}

cbuffer SceneProceduralShadowCaster : register(b5)
{
  float4 ProceduralShadowFactors[2] : packoffset(c0);
  float4 ProceduralShadowFactors2[2] : packoffset(c2);
  float4 ProceduralShadowOrigin[2] : packoffset(c4);
  float4 ProceduralShadowPlane[2] : packoffset(c6);
}

SamplerState Global__PreIntegratedSkinDiffuseTexture__SampObj___s : register(s0);
SamplerState Viewport__DepthVPSampler__SampObj___s : register(s1);
SamplerState ColorClamp_s : register(s2);
SamplerState ColorWrap_s : register(s3);
Texture2D<float4> Global__PreIntegratedSkinDiffuseTexture__TexObj__ : register(t0);
Texture2D<float2> Global__IBLBRDFTexture : register(t1);
Texture2D<float4> Viewport__DepthVPSampler__TexObj__ : register(t2);
Texture2D<float4> Viewport__SkyParaboloidTexture : register(t3);
TextureCubeArray<float4> Viewport__DynamicCubeMapReflectionTextureArray : register(t4);
Texture2D<float2> DeferredLightingBase__SunShadowMaskTexture : register(t5);
Texture2D<float4> DeferredLightingBase__ProbeLightingTexture : register(t6);
Texture2D<float4> SSR__MotionVectorTexture__TexObj__ : register(t7);
Texture2D<float4> SSR__SSRDepthTexture__TexObj__ : register(t8);
Texture2D<float4> SSR__SSRTexture__TexObj__ : register(t9);
Texture2D<float4> DeferredLightingCommon__AlbedoTexture__TexObj__ : register(t10);
Texture2D<float4> DeferredLightingCommon__NormalTexture__TexObj__ : register(t11);
Texture2D<float4> DeferredLightingCommon__OtherTexture__TexObj__ : register(t12);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23;
  uint4 bitmask, uiDest;
  float4 fDest;

// WATCH_DOGS2 unprojection fix inserted by DarkStarSword's hlsltool.py:
// hlsltool.py --fix-wd2-unproject -i --only-autofixed --fxc /home/dss/fxc.exe 81bf85f12e2873bc-ps_replace.txt

  r0.xy = v0.xy * VPosScale.zw + VPosOffset.zw;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0,0);
  r0.z = Viewport__DepthVPSampler__TexObj__.Load(r1.xyw).x;
  r0.w = 1;
  r2.x = dot(r0.zw, InvProjectionMatrix._m22_m32);
  r0.z = dot(r0.zw, InvProjectionMatrix._m23_m33);
  r0.z = -r2.x / r0.z;
  r2.z = -r0.z;
  r2.xy = r2.zz * r0.xy;

// Fix lights, note depth is negative (or could have used r0.z):
float4 s = StereoParams.Load(0);
r2.x -= s.x * (-r2.z - s.y) * InvProjectionMatrix._m00;

  r2.w = 1;
  r0.x = dot(r2.xyzw, InvViewMatrix._m00_m10_m20_m30);
  r0.y = dot(r2.xyzw, InvViewMatrix._m01_m11_m21_m31);
  r0.z = dot(r2.xyzw, InvViewMatrix._m02_m12_m22_m32);
  r2.xyzw = DeferredLightingCommon__AlbedoTexture__TexObj__.Load(r1.xyw).wxyz;
  r3.xyzw = DeferredLightingCommon__NormalTexture__TexObj__.Load(r1.xyw).xyzw;
  r4.xyzw = DeferredLightingCommon__OtherTexture__TexObj__.Load(r1.xyw).zyxw;
  r5.x = r4.w * 255 + 0.5;
  r5.x = floor(r5.x);
  r5.x = (uint)r5.x;
  r5.x = (uint)r5.x >> 5;
  r5.y = dot(r3.xyz, r3.xyz);
  r5.y = rsqrt(r5.y);
  r5.yzw = r5.yyy * r3.xyz;
  r6.xyzw = cmp((int4)r5.xxxx == int4(1,4,2,0));
  r7.x = cmp(r2.x >= 0.75);
  r7.y = -0.75 + r2.x;
  r7.y = r7.y * -0.599999905 + 1;
  r7.x = r7.x ? r7.y : 1;
  r7.x = r6.y ? r7.x : r2.x;
  r7.x = r6.x ? 1 : r7.x;
  r7.yzw = CameraPosition.xyz + -r0.xyz;
  r8.x = dot(r7.yzw, r7.yzw);
  r8.x = rsqrt(r8.x);
  r8.yzw = r8.xxx * r7.yzw;
  r9.yzw = r7.xxx * r2.yzw;
  if (r6.x != 0) {
    r2.w = r3.w * 0.5 + 0.5;
    r2.w = r2.w * 65535 + 0.5;
    r2.w = (uint)r2.w;
    r10.xy = (int2)r2.ww & int2(255,0);
    r10.xy = (uint2)r10.xy;
    r10.xz = float2(0.00392156886,1.53186284e-005) * r10.xy;
    r2.w = 255 * r2.x;
    r2.w = (uint)r2.w;
    r11.xy = (int2)r2.ww & int2(15,240);
    r11.xy = (uint2)r11.xy;
    r10.yw = float2(0.00416666688,0.0666666701) * r11.yx;
    r11.w = 0;
    r9.x = r9.y;
    r12.x = 0;
  } else {
    r2.w = r4.y * r4.y;
    r4.y = max(0.00100000005, r2.w);
    r2.w = cmp((int)r5.x == 2);
    if (r2.w != 0) {
      r2.w = r3.w * 0.5 + 0.5;
      r2.w = r2.w * 65535 + 0.5;
      r2.w = (uint)r2.w;
      r13.xy = (int2)r2.ww & int2(255,0);
      r13.xy = (uint2)r13.xy;
      r13.z = r4.z;
      r13.xyz = r13.xyz * float3(0.00784313772,3.06372567e-005,2) + float3(-1,-1,-1);
      r2.w = 1 + -r2.x;
      r2.w = r9.y * r2.w;
      r9.x = r2.w * 0.5 + r9.y;
      r2.w = dot(r13.xyz, r13.xyz);
      r2.w = rsqrt(r2.w);
      r10.xzw = r13.xyz * r2.www;
      r10.y = 0;
      r4.z = 0.5;
      r11.w = 0;
      r12.x = 0;
    } else {
      r2.w = cmp((int)r5.x == 3);
      if (r2.w != 0) {
        r2.w = r3.w * 0.5 + 0.5;
        r2.w = r2.w * 65535 + 0.5;
        r2.w = (uint)r2.w;
        r13.xyzw = (int4)r2.wwww & int4(0,2016,31,31);
        r13.xyzw = (uint4)r13.xyzw;
        r14.xyz = cmp(float3(1.25395,81.5471954,2568.0896) >= r13.wyx);
        r2.w = 0.00249675405 * r13.w;
        r15.xyz = r13.zyx * float3(0.0322580636,0.000496031775,1.57510076e-005) + float3(0.0549999997,0.0549999997,0.0549999997);
        r15.xyz = float3(0.947867334,0.947867334,0.947867334) * r15.xyz;
        r15.xyz = log2(r15.xyz);
        r15.xyz = float3(2.4000001,2.4000001,2.4000001) * r15.xyz;
        r15.xyz = exp2(r15.xyz);
        r10.x = r14.x ? r2.w : r15.x;
        r13.xy = float2(3.83925508e-005,1.21911819e-006) * r13.yx;
        r10.zw = r14.yz ? r13.xy : r15.yz;
        r10.y = 0;
        r11.w = 0;
        r12.x = 0;
      } else {
        if (r6.y != 0) {
          r2.w = r3.w * 32767 + 32767;
          r2.w = (uint)r2.w;
          r12.w = (int)r2.w & 255;
          r12.w = (uint)r12.w;
          r12.w = 0.0123199718 * r12.w;
          if (8 == 0) r2.w = 0; else if (8+8 < 32) {           r2.w = (uint)r2.w << (32-(8 + 8)); r2.w = (uint)r2.w >> (32-8);          } else r2.w = (uint)r2.w >> 8;
          r2.w = (uint)r2.w;
          r2.w = r2.w * 0.0246399436 + -3.14159274;
          sincos(r12.w, r13.x, r14.x);
          sincos(r2.w, r15.x, r16.x);
          r16.x = r16.x * r13.x;
          r16.y = r15.x * r13.x;
          r16.z = r14.x;
          r2.w = dot(r16.xyz, r16.xyz);
          r2.w = rsqrt(r2.w);
          r10.xzw = r16.xyz * r2.www;
          r11.w = saturate(0.25 * r2.x);
          r10.y = 0;
          r12.x = 0;
        } else {
          r2.w = cmp((int)r5.x == 5);
          r12.w = cmp(r3.z < 0.899999976);
          r13.xyz = r12.www ? float3(0,1,0) : float3(1,0,0);
          r14.xyz = r13.xyz * r3.zxy;
          r13.xyz = r3.yzx * r13.yzx + -r14.xyz;
          r12.w = dot(r13.xyz, r13.xyz);
          r12.w = rsqrt(r12.w);
          r13.xyz = r13.xyz * r12.www;
          r14.xyz = r13.yzx * r3.zxy;
          r3.xyz = r3.yzx * r13.zxy + -r14.xyz;
          r12.w = dot(r3.xyz, r3.xyz);
          r12.w = rsqrt(r12.w);
          r3.xyz = r12.www * r3.xyz;
          r12.w = r3.w * 2 + -1;
          r12.w = 3.14159274 * r12.w;
          sincos(r12.w, r14.x, r15.x);
          r13.xyz = r14.xxx * r13.xyz;
          r13.xyz = r3.xyz * r15.xxx + r13.xyz;
          r3.x = r3.w * 0.5 + 0.5;
          r3.x = r3.x * 65535 + 0.5;
          r3.x = (uint)r3.x;
          r3.xy = (int2)r3.xx & int2(255,0);
          r3.xy = (uint2)r3.xy;
          r3.x = 0.00392156886 * r3.x;
          r3.z = r3.y * 3.06372567e-005 + -1;
          r3.xy = r5.xx ? float2(0,0) : r3.xz;
          r13.w = r4.x;
          r3.z = 0;
          r10.xyzw = r2.wwww ? r13.xwyz : r3.xzzz;
          r2.yz = float2(0,0);
          r3.w = r13.w;
          r12.xyz = r2.www ? r2.zxy : r3.yzw;
          r11.w = r12.y;
          r4.x = r12.z;
        }
      }
      r9.x = r9.y;
    }
  }
  r2.xyz = DeferredLightingBase__ProbeLightingTexture.Load(r1.xyw).xyz;
  r2.xyz = r2.xyz / ExposureScale;
  r1.xy = DeferredLightingBase__SunShadowMaskTexture.Load(r1.xyz).xy;
  r1.y = r1.y * r1.y;
  r1.z = (int)r6.z | (int)r6.y;
  if (r1.z != 0) {
    r1.z = dot(ProceduralShadowPlane[0].xyz, SunShadowDirection.xyz);
    r1.w = saturate(r1.z * ProceduralShadowFactors2[0].x + ProceduralShadowFactors2[0].y);
    r0.w = 1;
    r3.x = dot(ProceduralShadowPlane[0].xyzw, r0.xyzw);
    r3.y = saturate(1 + r1.z);
    r3.x = -r3.y * ProceduralShadowFactors2[0].z + r3.x;
    r1.z = -r3.x / r1.z;
    r3.xyz = SunShadowDirection.xyz * r1.zzz + r0.xyz;
    r12.yzw = ProceduralShadowOrigin[0].xyz + -r0.xyz;
    r3.xyz = ProceduralShadowOrigin[0].xyz + -r3.xyz;
    r13.x = dot(r12.yzw, r12.yzw);
    r13.y = dot(r3.xyz, r3.xyz);
    r3.xy = saturate(r13.xy * ProceduralShadowFactors[0].xz + ProceduralShadowFactors[0].yw);
    r1.z = cmp(0 < r1.z);
    r1.z = r1.z ? r3.x : r3.y;
    r1.z = r1.z + r1.w;
    r1.z = saturate(ProceduralShadowFactors2[0].w + r1.z);
    r1.w = dot(ProceduralShadowPlane[1].xyz, SunShadowDirection.xyz);
    r3.x = saturate(r1.w * ProceduralShadowFactors2[1].x + ProceduralShadowFactors2[1].y);
    r3.y = dot(ProceduralShadowPlane[1].xyzw, r0.xyzw);
    r3.z = saturate(1 + r1.w);
    r3.y = -r3.z * ProceduralShadowFactors2[1].z + r3.y;
    r1.w = -r3.y / r1.w;
    r3.yzw = SunShadowDirection.xyz * r1.www + r0.xyz;
    r12.yzw = ProceduralShadowOrigin[1].xyz + -r0.xyz;
    r3.yzw = ProceduralShadowOrigin[1].xyz + -r3.yzw;
    r13.x = dot(r12.yzw, r12.yzw);
    r13.y = dot(r3.yzw, r3.yzw);
    r3.yz = saturate(r13.xy * ProceduralShadowFactors[1].xz + ProceduralShadowFactors[1].yw);
    r1.w = cmp(0 < r1.w);
    r1.w = r1.w ? r3.y : r3.z;
    r1.w = r1.w + r3.x;
    r1.w = saturate(ProceduralShadowFactors2[1].w + r1.w);
    r1.z = r1.z * r1.w;
    r1.x = r1.x * r1.z;
  }
  r1.z = dot(r0.xyz, FakeEarthShadowPlane.xyz);
  r1.z = saturate(FakeEarthShadowPlane.w + r1.z);
  r1.x = r1.x * r1.z;
  r1.x = r1.x * LightDatas.LightShadowFactor.x + LightDatas.LightShadowFactor.y;
  r1.z = cmp(0 < r1.x);
  r1.w = cmp(0 < r10.x);
  r1.w = r1.w ? r6.w : 0;
  r1.z = (int)r1.w | (int)r1.z;
  if (r1.z != 0) {
    r3.w = dot(SkyLightStruct.m_lightIrradiance.xyz, float3(0.212639004,0.715168655,0.0721923187));
    r1.z = dot(r5.yzw, SkyLightStruct.m_lightDirection.xyz);
    r1.w = saturate(r1.z);
    r6.w = dot(r10.xzw, r10.xzw);
    r6.w = rsqrt(r6.w);
    r12.yzw = r10.xzw * r6.www;
    r6.w = dot(r12.yzw, SkyLightStruct.m_lightDirection.xyz);
    r6.w = 1 + r6.w;
    r6.w = saturate(0.5 * r6.w);
    r9.y = r6.w * r6.w;
    r6.w = r9.y * r6.w;
    r12.yzw = r6.zzz ? r10.xzw : r5.yzw;
    r6.w = r6.z ? r6.w : r1.w;
    if (r6.x != 0) {
      r13.xyzw = saturate(r10.xyzw);
      r14.xy = saturate(r4.xy);
      r15.xyz = log2(r9.xzw);
      r16.xyz = r15.xyz * r13.yyy;
      r16.xyz = float3(-12.7799997,-12.7799997,-12.7799997) * r16.xyz;
      r15.xyz = r15.xyz * float3(-0.0199999996,-0.0199999996,-0.0199999996) + r16.xyz;
      r9.y = cmp(r13.x == 0.000000);
      r13.y = 1 + -r14.x;
      r16.xyz = r13.yyy * r9.xzw;
      r16.xyz = float3(0.318309873,0.318309873,0.318309873) * r16.xyz;
      r17.xyz = r15.xyz * -r13.xxx;
      r17.xyz = exp2(r17.xyz);
      r17.xyz = r17.xyz * r16.xyz;
      r17.xyz = float3(0.444444448,0.444444448,0.444444448) * r17.xyz;
      r16.xyz = r9.yyy ? r16.xyz : r17.xyz;
      r16.w = 0.180000007;
      r13.y = 0.0799999982 * r13.w;
      r13.x = r13.x * 48.75 + 1.25;
      r14.y = r14.y * r14.y;
      r14.y = max(0.00100000005, r14.y);
      r13.z = r13.z * r13.z;
      r13.z = max(0.00100000005, r13.z);
      r14.z = cmp(0 < r1.z);
      r14.w = cmp(r1.z < 0);
      r14.z = (int)-r14.z + (int)r14.w;
      r14.z = (int)r14.z;
      r14.w = r1.z * r1.z + -1;
      r14.w = r14.w * 0.666860044 + 1;
      r14.w = sqrt(r14.w);
      r14.z = r14.z * r14.w;
      r1.z = r1.z * 0.666860044 + -r14.z;
      r17.xyz = float3(0.666860044,0.666860044,0.666860044) * SkyLightStruct.m_lightDirection.xyz;
      r17.xyz = r1.zzz * r5.yzw + -r17.xyz;
      r18.xyz = -SkyLightStruct.m_lightDirection.xyz + -r17.xyz;
      r17.xyz = r14.yyy * r18.xyz + r17.xyz;
      r1.z = dot(r17.xyz, r17.xyz);
      r1.z = rsqrt(r1.z);
      r18.xyz = r17.xyz * r1.zzz;
      r14.z = dot(r8.yzw, r5.yzw);
      r14.w = cmp(0 < r14.z);
      r15.w = cmp(r14.z < 0);
      r14.w = (int)-r14.w + (int)r15.w;
      r14.w = (int)r14.w;
      r15.w = r14.z * r14.z + -1;
      r15.w = r15.w * 0.666860044 + 1;
      r15.w = sqrt(r15.w);
      r14.w = r15.w * r14.w;
      r14.w = r14.z * 0.666860044 + -r14.w;
      r19.xyz = float3(0.666860044,0.666860044,0.666860044) * r8.yzw;
      r19.xyz = r14.www * r5.yzw + -r19.xyz;
      r20.xyz = -r7.yzw * r8.xxx + -r19.xyz;
      r19.xyz = r14.yyy * r20.xyz + r19.xyz;
      r14.w = dot(r19.xyz, r19.xyz);
      r14.w = rsqrt(r14.w);
      r19.xyz = r19.xyz * r14.www;
      r14.w = dot(r5.yzw, r18.xyz);
      r14.w = -abs(r14.w) * abs(r14.w) + 1;
      r14.w = -r14.w * 0.444702327 + 1;
      r13.x = r13.x + r13.x;
      r14.w = sqrt(r14.w);
      r13.x = r13.x / r14.w;
      r14.z = saturate(r14.z);
      r20.xyz = r7.yzw * r8.xxx + SkyLightStruct.m_lightDirection.xyz;
      r14.w = dot(r20.xyz, r20.xyz);
      r14.w = rsqrt(r14.w);
      r20.xyz = r20.xyz * r14.www;
      r14.w = saturate(dot(r5.yzw, r20.xyz));
      r15.w = r14.y * r14.y;
      r14.w = r14.w * r14.w;
      r17.w = r14.y * r14.y + -1;
      r14.w = r14.w * r17.w + 1;
      r14.w = r14.w * r14.w;
      r14.w = 3.14159274 * r14.w;
      r14.w = r15.w / r14.w;
      r14.y = r14.y * 0.5 + 0.5;
      r15.w = r1.w * r1.w;
      r14.y = r14.y * r14.y;
      r17.w = -r1.w * r1.w + 1;
      r17.w = r17.w * r14.y;
      r15.w = max(1.00000005e-034, r15.w);
      r15.w = r17.w / r15.w;
      r15.w = 1 + r15.w;
      r15.w = sqrt(r15.w);
      r15.w = 1 + r15.w;
      r15.w = 2 / r15.w;
      r17.w = r14.z * r14.z;
      r14.z = -r14.z * r14.z + 1;
      r14.y = r14.y * r14.z;
      r14.z = max(1.00000005e-034, r17.w);
      r14.y = r14.y / r14.z;
      r14.y = 1 + r14.y;
      r14.y = sqrt(r14.y);
      r14.y = 1 + r14.y;
      r14.y = 2 / r14.y;
      r14.y = r15.w * r14.y;
      r20.xyz = r1.www * r1.www + float3(1.24869561,1.24878526,1.24869561);
      r20.xyz = sqrt(r20.xyz);
      r21.xyz = r20.zyz + -r1.www;
      r20.xyz = r20.xyz + r1.www;
      r22.xyz = r21.zyz * r21.zyz;
      r23.xyz = r20.zyz * r20.zyz;
      r23.xyz = r23.xyz + r23.xyz;
      r22.xyz = r22.xyz / r23.xyz;
      r20.xyz = r1.www * r20.xyz + float3(-1,-1,-1);
      r21.xyz = r1.www * r21.xyz + float3(1,1,1);
      r20.xyz = r20.xyz / r21.xyz;
      r20.xyz = r20.xyz * r20.xyz + float3(1,1,1);
      r20.xyz = r22.xyz * r20.xyz;
      r14.y = r14.w * r14.y;
      r14.yzw = r14.yyy * r20.xyz;
      r20.xyz = -r13.www * float3(0.0799999982,0.0799999982,0.0799999982) + r9.xzw;
      r20.xyz = r14.xxx * r20.xyz + r13.yyy;
      r13.y = saturate(dot(r5.yzw, -r19.xyz));
      r17.xyz = -r17.xyz * r1.zzz + -r19.xyz;
      r1.z = dot(r17.xyz, r17.xyz);
      r1.z = rsqrt(r1.z);
      r17.xyz = r17.xyz * r1.zzz;
      r1.z = dot(r17.xyz, -r18.xyz);
      r13.w = saturate(dot(r5.yzw, -r18.xyz));
      r14.x = saturate(dot(r5.yzw, r17.xyz));
      r15.w = r13.z * r13.z;
      r14.x = r14.x * r14.x;
      r17.x = r13.z * r13.z + -1;
      r14.x = r14.x * r17.x + 1;
      r14.x = r14.x * r14.x;
      r14.x = 3.14159274 * r14.x;
      r14.x = r15.w / r14.x;
      r13.z = r13.z * 0.5 + 0.5;
      r15.w = r13.w * r13.w;
      r13.z = r13.z * r13.z;
      r13.w = -r13.w * r13.w + 1;
      r13.w = r13.z * r13.w;
      r15.w = max(1.00000005e-034, r15.w);
      r13.w = r13.w / r15.w;
      r13.w = 1 + r13.w;
      r13.w = sqrt(r13.w);
      r13.w = 1 + r13.w;
      r15.w = r13.y * r13.y;
      r13.y = -r13.y * r13.y + 1;
      r13.y = r13.z * r13.y;
      r13.z = max(1.00000005e-034, r15.w);
      r13.y = r13.y / r13.z;
      r13.y = 1 + r13.y;
      r13.y = sqrt(r13.y);
      r13.y = 1 + r13.y;
      r13.yw = float2(2,2) / r13.yw;
      r13.y = r13.w * r13.y;
      r13.z = dot(r20.xyz, float3(0.333333343,0.333333343,0.333333343));
      r13.z = saturate(50 * r13.z);
      r1.z = 1 + -r1.z;
      r13.w = r1.z * r1.z;
      r13.w = r13.w * r13.w;
      r17.xyz = r13.zzz + -r20.xyz;
      r17.xyz = r17.xyz * r13.www;
      r17.xyz = r17.xyz * r1.zzz + r20.xyz;
      r1.z = r14.x * r13.y;
      r13.yzw = r1.zzz * r17.xyz;
      r15.xyz = -r15.xyz * r13.xxx;
      r15.xyz = exp2(r15.xyz);
      r14.xyz = r13.yzw * r15.xyz + r14.yzw;
      r13.xyz = r9.yyy ? r13.yzw : r14.xyz;
      r13.w = dot(r13.xyz, float3(0.212639004,0.715168655,0.0721923187));
      r14.xyzw = float4(0,0,0,0);
    } else {
      if (r6.z != 0) {
        r15.xyz = float3(0.318309873,0.318309873,0.318309873) * r9.xzw;
        r15.w = 0.0572957806;
        r1.z = 1 + -r4.x;
        r16.xyzw = r15.xyzw * r1.zzzz;
      } else {
        r1.z = cmp((int)r5.x == 3);
        if (r1.z != 0) {
          r15.xyz = r7.yzw * r8.xxx + SkyLightStruct.m_lightDirection.xyz;
          r1.z = dot(r15.xyz, r15.xyz);
          r1.z = rsqrt(r1.z);
          r15.xyz = r15.xyz * r1.zzz;
          r1.z = saturate(dot(r15.xyz, r8.yzw));
          r9.y = 0.0799999982 * r4.z;
          r1.z = 1 + -r1.z;
          r15.x = r1.z * r1.z;
          r15.x = r15.x * r15.x;
          r15.y = -r4.z * 0.0799999982 + 1;
          r15.x = r15.y * r15.x;
          r1.z = r15.x * r1.z + r9.y;
          r9.y = saturate(r4.y + r4.y);
          r15.w = r9.y * -r1.z + 1;
          r15.xyz = r15.www * r9.xzw;
          r16.xyzw = float4(0.318309873,0.318309873,0.318309873,0.0572957806) * r15.xyzw;
        } else {
          if (r6.y != 0) {
            r15.xyz = r12.yzw + -r10.xzw;
            r17.xyz = r15.xyz * float3(0.100000001,0.100000001,0.100000001) + r10.xzw;
            r1.z = dot(r17.xyz, r17.xyz);
            r1.z = rsqrt(r1.z);
            r17.xyz = r17.xyz * r1.zzz;
            r15.xyz = r15.xyz * float3(0.300000012,0.300000012,0.300000012) + r10.xzw;
            r1.z = dot(r15.xyz, r15.xyz);
            r1.z = rsqrt(r1.z);
            r15.xyz = r15.xyz * r1.zzz;
            r1.z = dot(r10.xzw, SkyLightStruct.m_lightDirection.xyz);
            r9.y = dot(r17.xyz, SkyLightStruct.m_lightDirection.xyz);
            r15.x = dot(r15.xyz, SkyLightStruct.m_lightDirection.xyz);
            r11.z = r1.z * 0.5 + 0.5;
            r15.yz = r11.zw * float2(0.984375,0.984375) + float2(0.0078125,0.0078125);
            r15.y = Global__PreIntegratedSkinDiffuseTexture__TexObj__.SampleLevel(Global__PreIntegratedSkinDiffuseTexture__SampObj___s, r15.yz, 0).x;
            r11.y = r9.y * 0.5 + 0.5;
            r11.yz = r11.yw * float2(0.984375,0.984375) + float2(0.0078125,0.0078125);
            r15.z = Global__PreIntegratedSkinDiffuseTexture__TexObj__.SampleLevel(Global__PreIntegratedSkinDiffuseTexture__SampObj___s, r11.yz, 0).y;
            r11.x = r15.x * 0.5 + 0.5;
            r11.xy = r11.xw * float2(0.984375,0.984375) + float2(0.0078125,0.0078125);
            r15.w = Global__PreIntegratedSkinDiffuseTexture__TexObj__.SampleLevel(Global__PreIntegratedSkinDiffuseTexture__SampObj___s, r11.xy, 0).z;
            r15.xyz = r15.yzw * r9.xzw;
            r15.w = 0.0572957806;
            r16.xyzw = float4(0.318309873,0.318309873,0.318309873,1) * r15.xyzw;
          } else {
            r1.z = cmp((int)r5.x == 5);
            r9.y = dot(r10.xzw, SkyLightStruct.m_lightDirection.xyz);
            r9.y = -r9.y * r9.y + 1;
            r9.y = sqrt(r9.y);
            r15.xyz = float3(0.318309873,0.318309873,0.318309873) * r9.xzw;
            r15.w = 0.0572957806;
            r11.x = 1 + -r4.x;
            r15.xyzw = r15.xyzw * r11.xxxx;
            r17.xyzw = r15.xyzw * r9.yyyy;
            r17.xyzw = float4(0.5,0.5,0.5,0.5) * r17.xyzw;
            r9.y = 1 + -r10.y;
            r17.xyzw = r17.xyzw * r9.yyyy;
            r16.xyzw = r1.zzzz ? r17.xyzw : r15.xyzw;
          }
        }
      }
      if (r6.z != 0) {
        r1.z = 0.0799999982 * r4.z;
        r11.xyz = -r4.zzz * float3(0.0799999982,0.0799999982,0.0799999982) + r9.xzw;
        r11.xyz = r4.xxx * r11.xyz + r1.zzz;
        r1.z = saturate(dot(r5.yzw, r8.yzw));
        r15.xyz = r7.yzw * r8.xxx + SkyLightStruct.m_lightDirection.xyz;
        r9.y = dot(r15.xyz, r15.xyz);
        r9.y = rsqrt(r9.y);
        r15.xyz = r15.xyz * r9.yyy;
        r9.y = dot(r15.xyz, SkyLightStruct.m_lightDirection.xyz);
        r15.x = saturate(dot(r5.yzw, r15.xyz));
        r15.y = r4.y * r4.y;
        r15.x = r15.x * r15.x;
        r15.z = r4.y * r4.y + -1;
        r15.x = r15.x * r15.z + 1;
        r15.x = r15.x * r15.x;
        r15.x = 3.14159274 * r15.x;
        r15.x = r15.y / r15.x;
        r15.y = r4.y * 0.5 + 0.5;
        r15.z = r1.w * r1.w;
        r15.y = r15.y * r15.y;
        r15.w = -r1.w * r1.w + 1;
        r15.w = r15.y * r15.w;
        r15.z = max(1.00000005e-034, r15.z);
        r15.z = r15.w / r15.z;
        r15.z = 1 + r15.z;
        r15.z = sqrt(r15.z);
        r15.z = 1 + r15.z;
        r15.z = 2 / r15.z;
        r15.w = r1.z * r1.z;
        r1.z = -r1.z * r1.z + 1;
        r1.z = r15.y * r1.z;
        r15.y = max(1.00000005e-034, r15.w);
        r1.z = r1.z / r15.y;
        r1.z = 1 + r1.z;
        r1.z = sqrt(r1.z);
        r1.z = 1 + r1.z;
        r1.z = 2 / r1.z;
        r1.z = r15.z * r1.z;
        r15.y = dot(r11.xyz, float3(0.333333343,0.333333343,0.333333343));
        r15.y = saturate(50 * r15.y);
        r9.y = 1 + -r9.y;
        r15.z = r9.y * r9.y;
        r15.z = r15.z * r15.z;
        r17.xyz = r15.yyy + -r11.xyz;
        r15.yzw = r17.xyz * r15.zzz;
        r11.xyz = r15.yzw * r9.yyy + r11.xyz;
        r1.z = r15.x * r1.z;
        r13.xyz = r1.zzz * r11.xyz;
        r13.w = dot(r13.xyz, float3(0.212639004,0.715168655,0.0721923187));
      } else {
        r1.z = cmp((int)r5.x == 3);
        if (r1.z != 0) {
          r11.xyz = r7.yzw * r8.xxx + SkyLightStruct.m_lightDirection.xyz;
          r1.z = dot(r11.xyz, r11.xyz);
          r1.z = rsqrt(r1.z);
          r11.xyz = r11.xyz * r1.zzz;
          r1.z = saturate(dot(r11.xyz, r8.yzw));
          r9.y = 0.0799999982 * r4.z;
          r1.z = 1 + -r1.z;
          r15.x = r1.z * r1.z;
          r15.x = r15.x * r15.x;
          r15.y = -r4.z * 0.0799999982 + 1;
          r15.x = r15.y * r15.x;
          r1.z = r15.x * r1.z + r9.y;
          r9.y = saturate(dot(r5.yzw, r11.xyz));
          r11.x = r9.y * r9.y;
          r11.yz = -r9.yy * r9.yy + float2(1.00000095,1);
          r11.x = r11.x / r11.y;
          r11.y = r11.z * r11.z;
          r11.z = r4.y * r4.y;
          r15.xy = r4.yy * r4.yy + float2(9.99999997e-007,1.99999999e-006);
          r15.x = r15.x * 4 + 1;
          r15.x = 3.14159274 * r15.x;
          r15.x = 1 / r15.x;
          r11.x = -r11.x / r15.y;
          r11.x = 1.44269502 * r11.x;
          r11.x = exp2(r11.x);
          r11.x = 4 * r11.x;
          r11.x = r11.x / r11.y;
          r11.x = 1 + r11.x;
          r11.x = r15.x * r11.x;
          r11.y = saturate(dot(r5.yzw, r8.yzw));
          r15.x = r11.y + r1.w;
          r11.y = -r1.w * r11.y + r15.x;
          r11.y = 4 * r11.y;
          r11.y = 1 / r11.y;
          r11.y = saturate(r11.y);
          r11.z = 2 / r11.z;
          r11.z = -2 + r11.z;
          r11.z = max(1.00000003e-022, r11.z);
          r9.y = log2(r9.y);
          r9.y = r11.z * r9.y;
          r9.y = exp2(r9.y);
          r11.z = 8 + r11.z;
          r9.y = r11.z * r9.y;
          r9.y = 0.0397887342 * r9.y;
          r9.y = min(1, r9.y);
          r11.z = saturate(r4.y + r4.y);
          r11.x = r11.x * r11.y + -r9.y;
          r9.y = r11.z * r11.x + r9.y;
          r15.xyz = r9.yyy * r1.zzz;
          r15.w = dot(r15.zzz, float3(0.212639004,0.715168655,0.0721923187));
          r17.xyz = r10.xzw;
          r17.w = 1;
          r13.xyzw = r17.xyzw * r15.xyzw;
        } else {
          if (r6.y != 0) {
            r11.xy = float2(0.0799999982,0.400000006) * r4.zy;
            r15.xyz = -r4.zzz * float3(0.0799999982,0.0799999982,0.0799999982) + r9.xzw;
            r15.xyz = r4.xxx * r15.xyz + r11.xxx;
            r1.z = saturate(dot(r5.yzw, r8.yzw));
            r17.xyz = r7.yzw * r8.xxx + SkyLightStruct.m_lightDirection.xyz;
            r9.y = dot(r17.xyz, r17.xyz);
            r9.y = rsqrt(r9.y);
            r17.xyz = r17.xyz * r9.yyy;
            r9.y = dot(r17.xyz, SkyLightStruct.m_lightDirection.xyz);
            r11.x = saturate(dot(r5.yzw, r17.xyz));
            r11.z = r4.y * r4.y;
            r11.x = r11.x * r11.x;
            r15.w = r4.y * r4.y + -1;
            r15.w = r11.x * r15.w + 1;
            r15.w = r15.w * r15.w;
            r15.w = 3.14159274 * r15.w;
            r11.z = r11.z / r15.w;
            r17.xy = r4.yy * float2(0.5,0.200000003) + float2(0.5,0.5);
            r15.w = r1.w * r1.w;
            r17.xy = r17.xy * r17.xy;
            r17.z = -r1.w * r1.w + 1;
            r17.zw = r17.xy * r17.zz;
            r15.w = max(1.00000005e-034, r15.w);
            r17.zw = r17.zw / r15.ww;
            r17.zw = float2(1,1) + r17.zw;
            r17.zw = sqrt(r17.zw);
            r17.zw = float2(1,1) + r17.zw;
            r15.w = r1.z * r1.z;
            r1.z = -r1.z * r1.z + 1;
            r17.xy = r17.xy * r1.zz;
            r1.z = max(1.00000005e-034, r15.w);
            r17.xy = r17.xy / r1.zz;
            r17.xy = float2(1,1) + r17.xy;
            r17.xy = sqrt(r17.xy);
            r17.xy = float2(1,1) + r17.xy;
            r17.xyzw = float4(2,2,2,2) / r17.xyzw;
            r17.xy = r17.zw * r17.xy;
            r1.z = dot(r15.xyz, float3(0.333333343,0.333333343,0.333333343));
            r1.z = saturate(50 * r1.z);
            r9.y = 1 + -r9.y;
            r15.w = r9.y * r9.y;
            r15.w = r15.w * r15.w;
            r18.xyz = r1.zzz + -r15.xyz;
            r18.xyz = r18.xyz * r15.www;
            r15.xyz = r18.xyz * r9.yyy + r15.xyz;
            r1.z = r17.x * r11.z;
            r18.xyz = r1.zzz * r15.xyz;
            r18.w = dot(r18.xyz, float3(0.212639004,0.715168655,0.0721923187));
            r1.z = r11.y * r11.y;
            r9.y = r11.y * r11.y + -1;
            r9.y = r11.x * r9.y + 1;
            r9.y = r9.y * r9.y;
            r9.y = 3.14159274 * r9.y;
            r1.z = r1.z / r9.y;
            r1.z = r1.z * r17.y;
            r15.xyz = r1.zzz * r15.xyz;
            r15.w = dot(r15.xyz, float3(0.212639004,0.715168655,0.0721923187));
            r15.xyzw = float4(0.150000006,0.150000006,0.150000006,0.150000006) * r15.xyzw;
            r13.xyzw = r18.xyzw * float4(0.850000024,0.850000024,0.850000024,0.850000024) + r15.xyzw;
          } else {
            r1.z = cmp((int)r5.x == 5);
            r9.y = saturate(dot(r9.xzw, float3(0.212639004,0.715168655,0.0721923187)));
            r9.y = r9.y * 1.66666663 + 1.33333337;
            r11.xyz = r10.xzw * r4.yyy;
            r11.xyz = r11.xyz * float3(0.25,0.25,0.25) + r5.yzw;
            r9.y = 1 / r9.y;
            r15.x = dot(-SkyLightStruct.m_lightDirection.xyz, r11.xyz);
            r15.y = r9.y * r9.y;
            r15.z = -r15.x * r15.x + 1;
            r15.z = -r15.y * r15.z + 1;
            r15.w = sqrt(r15.z);
            r15.x = r9.y * r15.x + -r15.w;
            r17.xyz = r15.xxx * r11.xyz;
            r17.xyz = r9.yyy * SkyLightStruct.m_lightDirection.xyz + r17.xyz;
            r15.x = cmp(0 < r15.z);
            r15.x = r15.x ? 1.000000 : 0;
            r18.xyz = r17.xyz * r15.xxx;
            r15.z = dot(-r8.yzw, r11.xyz);
            r15.w = -r15.z * r15.z + 1;
            r15.y = -r15.y * r15.w + 1;
            r15.w = sqrt(r15.y);
            r15.z = r9.y * r15.z + -r15.w;
            r11.xyz = r15.zzz * r11.xyz;
            r11.xyz = r9.yyy * r8.yzw + r11.xyz;
            r9.y = cmp(0 < r15.y);
            r9.y = r9.y ? 1.000000 : 0;
            r11.xyz = r11.xyz * r9.yyy;
            r7.yzw = r7.yzw * r8.xxx + SkyLightStruct.m_lightDirection.xyz;
            r8.x = dot(r7.yzw, r7.yzw);
            r8.x = rsqrt(r8.x);
            r7.yzw = r8.xxx * r7.yzw;
            r8.x = saturate(dot(r5.yzw, r8.yzw));
            r9.y = saturate(dot(r5.yzw, r7.yzw));
            r15.y = dot(r7.yzw, SkyLightStruct.m_lightDirection.xyz);
            r15.z = saturate(r15.y);
            r15.w = dot(r7.yzw, r10.xzw);
            r19.xyz = r10.wxz * r5.zwy;
            r19.xyz = r10.zwx * r5.wyz + -r19.xyz;
            r17.w = dot(r19.xyz, r19.xyz);
            r17.w = rsqrt(r17.w);
            r19.xyz = r19.xyz * r17.www;
            r7.y = dot(r7.yzw, r19.xyz);
            r7.zw = float2(0.0799999982,3.14159274) * r4.zy;
            r20.xyz = -r4.zzz * float3(0.0799999982,0.0799999982,0.0799999982) + r9.xzw;
            r20.xyz = r4.xxx * r20.xyz + r7.zzz;
            r7.z = dot(r20.xyz, float3(0.333333343,0.333333343,0.333333343));
            r7.z = saturate(50 * r7.z);
            r15.z = 1 + -r15.z;
            r17.w = r15.z * r15.z;
            r17.w = r17.w * r17.w;
            r21.xyz = r7.zzz + -r20.xyz;
            r22.xyz = r21.xyz * r17.www;
            r22.xyz = r22.xyz * r15.zzz + r20.xyz;
            r7.z = r4.y * r4.y;
            r15.z = r9.y * r9.y;
            r15.w = r15.w * r15.w;
            r15.w = r15.w / r7.z;
            r7.y = r7.y * r7.y + r15.w;
            r7.y = r9.y * r9.y + r7.y;
            r7.y = r7.y * r7.y;
            r7.y = r7.y * r7.w;
            r7.y = 1 / r7.y;
            r9.y = r1.w * r1.w;
            r15.w = -r1.w * r1.w + 1;
            r17.w = r15.w * r7.z;
            r9.y = max(1.00000005e-034, r9.y);
            r17.w = r17.w / r9.y;
            r17.w = 1 + r17.w;
            r17.w = sqrt(r17.w);
            r17.w = 1 + r17.w;
            r17.w = 2 / r17.w;
            r18.w = r8.x * r8.x;
            r8.x = -r8.x * r8.x + 1;
            r19.w = r8.x * r7.z;
            r18.w = max(1.00000005e-034, r18.w);
            r19.w = r19.w / r18.w;
            r19.w = 1 + r19.w;
            r19.w = sqrt(r19.w);
            r19.w = 1 + r19.w;
            r19.w = 2 / r19.w;
            r17.w = r19.w * r17.w;
            r7.y = r17.w * r7.y;
            r22.xyz = saturate(r7.yyy * r22.xyz);
            r22.xyz = r22.xyz * r11.www;
            r23.xyz = float3(0.25,0.25,0.25) * r22.xyz;
            r17.xyz = -r17.xyz * r15.xxx + -r11.xyz;
            r7.y = dot(r17.xyz, r17.xyz);
            r7.y = rsqrt(r7.y);
            r17.xyz = r17.xyz * r7.yyy;
            r7.y = saturate(dot(r5.yzw, -r18.xyz));
            r11.x = saturate(dot(r5.yzw, -r11.xyz));
            r11.y = saturate(dot(r5.yzw, r17.xyz));
            r11.z = saturate(dot(r17.xyz, -r18.xyz));
            r11.w = dot(r17.xyz, r10.xzw);
            r15.x = dot(r17.xyz, r19.xyz);
            r11.z = 1 + -r11.z;
            r17.x = r11.z * r11.z;
            r17.x = r17.x * r17.x;
            r17.xyz = r21.xyz * r17.xxx;
            r17.xyz = r17.xyz * r11.zzz + r20.xyz;
            r11.z = r11.w * r11.w;
            r11.z = r11.z / r7.z;
            r11.z = r15.x * r15.x + r11.z;
            r11.y = r11.y * r11.y + r11.z;
            r11.y = r11.y * r11.y;
            r7.w = r11.y * r7.w;
            r7.w = 1 / r7.w;
            r11.y = r7.y * r7.y;
            r7.y = -r7.y * r7.y + 1;
            r7.y = r7.z * r7.y;
            r11.y = max(1.00000005e-034, r11.y);
            r7.y = r7.y / r11.y;
            r7.y = 1 + r7.y;
            r7.y = sqrt(r7.y);
            r7.y = 1 + r7.y;
            r7.y = 2 / r7.y;
            r11.y = r11.x * r11.x;
            r11.x = -r11.x * r11.x + 1;
            r11.x = r11.x * r7.z;
            r11.y = max(1.00000005e-034, r11.y);
            r11.x = r11.x / r11.y;
            r11.x = 1 + r11.x;
            r11.x = sqrt(r11.x);
            r11.x = 1 + r11.x;
            r11.x = 2 / r11.x;
            r7.y = r11.x * r7.y;
            r7.y = r7.w * r7.y;
            r11.xyz = saturate(r7.yyy * r17.xyz);
            r17.xyz = sqrt(r9.xzw);
            r11.xyz = -r22.xyz * float3(0.25,0.25,0.25) + r11.xyz;
            r11.xyz = r17.xyz * r11.xyz + r23.xyz;
            r11.w = dot(r11.xyz, float3(0.212639004,0.715168655,0.0721923187));
            r7.y = r4.y * r4.y + -1;
            r7.y = r15.z * r7.y + 1;
            r7.y = r7.y * r7.y;
            r7.y = 3.14159274 * r7.y;
            r7.y = r7.z / r7.y;
            r7.z = r4.y * 0.5 + 0.5;
            r7.z = r7.z * r7.z;
            r7.w = r7.z * r15.w;
            r7.w = r7.w / r9.y;
            r7.w = 1 + r7.w;
            r7.w = sqrt(r7.w);
            r7.w = 1 + r7.w;
            r7.z = r7.z * r8.x;
            r7.z = r7.z / r18.w;
            r7.z = 1 + r7.z;
            r7.z = sqrt(r7.z);
            r7.z = 1 + r7.z;
            r7.zw = float2(2,2) / r7.zw;
            r7.z = r7.w * r7.z;
            r7.w = 1 + -r15.y;
            r8.x = r7.w * r7.w;
            r8.x = r8.x * r8.x;
            r15.xyz = r21.xyz * r8.xxx;
            r15.xyz = r15.xyz * r7.www + r20.xyz;
            r7.y = r7.y * r7.z;
            r15.xyz = r7.yyy * r15.xyz;
            r15.w = dot(r15.xyz, float3(0.212639004,0.715168655,0.0721923187));
            r13.xyzw = r1.zzzz ? r11.xyzw : r15.xyzw;
          }
        }
      }
      if (r6.z != 0) {
        r14.xyzw = float4(0,0,0,0);
      } else {
        r1.z = cmp((int)r5.x == 3);
        if (r1.z != 0) {
          r14.xyzw = float4(0,0,0,0);
        } else {
          if (r6.y != 0) {
            r14.xyzw = float4(0,0,0,0);
          } else {
            r1.z = dot(r10.xzw, SkyLightStruct.m_lightDirection.xyz);
            r1.z = -r1.z * r1.z + 1;
            r1.z = sqrt(r1.z);
            r7.y = -1.5 * r10.y;
            r7.z = dot(r12.yzw, SkyLightStruct.m_lightDirection.xyz);
            r7.w = -r10.y * -1.5 + r7.z;
            r7.y = 1 / -r7.y;
            r7.y = saturate(r7.w * r7.y);
            r7.w = r7.y * -2 + 3;
            r7.y = r7.y * r7.y;
            r7.y = r7.w * r7.y;
            r11.xyz = float3(0.318309873,0.318309873,0.318309873) * r9.xzw;
            r11.w = 0.0572957806;
            r7.w = 1 + -r4.x;
            r11.xyzw = r11.xyzw * r7.wwww;
            r11.xyzw = r11.xyzw * r7.yyyy;
            r11.xyzw = r11.xyzw * r1.zzzz;
            r11.xyzw = r11.xyzw * r10.yyyy;
            r11.xyzw = float4(0.25,0.25,0.25,0.25) * r11.xyzw;
            r15.xy = cmp((int2)r5.xx == int2(5,8));
            r1.z = max(9.99999997e-007, abs(r7.z));
            r1.z = rcp(r1.z);
            r1.z = r7.z * r1.z;
            r7.y = dot(r12.yzw, r8.yzw);
            r7.z = max(9.99999997e-007, abs(r7.y));
            r7.z = rcp(r7.z);
            r7.y = r7.y * r7.z;
            r1.z = cmp(r1.z == r7.y);
            r17.w = r1.z ? 0 : 1;
            r7.yzw = r10.xzw * r7.www;
            r17.xyz = r7.yzw * r17.www;
            r17.xyzw = float4(0.318309873,0.318309873,0.318309873,0.180000007) * r17.xyzw;
            r18.xyz = r10.xxx * r9.xzw;
            r18.w = r10.x;
            r18.xyzw = float4(0.0795774683,0.0795774683,0.0795774683,0.0143239452) * r18.xyzw;
            r17.xyzw = r15.yyyy ? r17.xyzw : r18.xyzw;
            r14.xyzw = r15.xxxx ? r11.xyzw : r17.xyzw;
          }
        }
      }
    }
    r1.z = r6.y ? 1 : r6.w;
    r6.w = dot(r14.xyz, float3(0.212639004,0.715168655,0.0721923187));
    r7.y = r10.x * r1.x;
    r6.w = r6.w + -r1.z;
    r6.w = r7.y * r6.w + r1.z;
    r1.z = r5.x ? r1.z : r6.w;
    r11.xyzw = r13.xyzw * r1.wwww;
    r11.xyzw = r16.xyzw * r1.zzzz + r11.xyzw;
    r11.xyzw = r11.xyzw + r14.xyzw;
    r11.xyzw = r11.xyzw * r1.xxxx;
    r3.xyz = SkyLightStruct.m_lightIrradiance.xyz;
    r3.xyzw = r11.xyzw * r3.xyzw;
  } else {
    r3.xyzw = float4(0,0,0,0);
  }
  r2.w = dot(r2.xyz, float3(0.212639004,0.715168655,0.0721923187));
  if (r6.y != 0) {
    r2.xyz = r9.xzw * r2.xyz;
    r11.xyzw = float4(0.318309873,0.318309873,0.318309873,0.0572957806) * r2.xyzw;
  } else {
    if (r6.x != 0) {
      r1.xz = saturate(r10.xy);
      r1.w = saturate(r4.x);
      r7.yzw = log2(r9.xzw);
      r12.yzw = r7.yzw * r1.zzz;
      r12.yzw = float3(-12.7799997,-12.7799997,-12.7799997) * r12.yzw;
      r7.yzw = r7.yzw * float3(-0.0199999996,-0.0199999996,-0.0199999996) + r12.yzw;
      r1.z = cmp(r1.x == 0.000000);
      r1.w = 1 + -r1.w;
      r12.yzw = r9.xzw * r1.www;
      r12.yzw = float3(0.318309873,0.318309873,0.318309873) * r12.yzw;
      r7.yzw = r7.yzw * -r1.xxx;
      r7.yzw = exp2(r7.yzw);
      r7.yzw = r7.yzw * r12.yzw;
      r7.yzw = float3(0.444444448,0.444444448,0.444444448) * r7.yzw;
      r13.xyz = r1.zzz ? r12.yzw : r7.yzw;
      r13.w = 0.180000007;
    } else {
      if (r6.z != 0) {
        r14.xyz = float3(0.318309873,0.318309873,0.318309873) * r9.xzw;
        r14.w = 0.0572957806;
        r1.x = 1 + -r4.x;
        r13.xyzw = r14.xyzw * r1.xxxx;
      } else {
        r1.x = cmp((int)r5.x == 3);
        if (r1.x != 0) {
          r1.x = dot(r8.yzw, r8.yzw);
          r1.x = min(1, r1.x);
          r1.z = 0.0799999982 * r4.z;
          r1.x = 1 + -r1.x;
          r1.w = r1.x * r1.x;
          r1.w = r1.w * r1.w;
          r6.y = -r4.z * 0.0799999982 + 1;
          r1.w = r6.y * r1.w;
          r1.x = r1.w * r1.x + r1.z;
          r1.z = saturate(r4.y + r4.y);
          r14.w = r1.z * -r1.x + 1;
          r14.xyz = r14.www * r9.xzw;
          r13.xyzw = float4(0.318309873,0.318309873,0.318309873,0.0572957806) * r14.xyzw;
        } else {
          r14.xyz = float3(0.318309873,0.318309873,0.318309873) * r9.xzw;
          r14.w = 0.0572957806;
          r15.w = 1 + -r4.x;
          r14.xyzw = r15.wwww * r14.xyzw;
          r15.xyz = r14.xyz;
          r16.xyzw = float4(0.5,0.5,0.5,0.0286478903) * r15.xyzw;
          r1.x = 1 + -r10.y;
          r17.xyzw = r14.xyzw * r10.yyyy;
          r17.xyzw = float4(0.25,0.25,0.25,0.25) * r17.xyzw;
          r16.xyzw = r16.xyzw * r1.xxxx + r17.xyzw;
          r1.xz = cmp((int2)r5.xx == int2(5,8));
          r1.w = dot(r5.yzw, r8.yzw);
          r6.y = max(9.99999997e-007, abs(r1.w));
          r6.y = rcp(r6.y);
          r1.w = r6.y * r1.w;
          r1.w = cmp(r1.w == 0.000000);
          r17.w = r1.w ? 0 : 1;
          r6.yzw = r15.www * r10.xzw;
          r17.xyz = r6.yzw * r17.www;
          r15.xyzw = r17.xyzw * float4(0.318309873,0.318309873,0.318309873,0.180000007) + r14.xyzw;
          r17.xyz = r10.xxx * r9.xzw;
          r17.w = r10.x;
          r14.xyzw = r17.xyzw * float4(0.0795774683,0.0795774683,0.0795774683,0.0143239452) + r14.xyzw;
          r14.xyzw = r1.zzzz ? r15.xyzw : r14.xyzw;
          r13.xyzw = r1.xxxx ? r16.xyzw : r14.xyzw;
        }
      }
    }
    r11.xyzw = r13.xyzw * r2.xyzw;
  }
  r1.x = r11.w + r3.w;
  r2.xyz = r11.xyz + r3.xyz;
  if (r6.x != 0) {
    r10.xyzw = saturate(r10.xyzw);
    r4.xyz = saturate(r4.xyz);
    r1.z = r4.y * r4.y;
    r3.y = max(0.00100000005, r1.z);
    r1.z = r10.z * r10.z;
    r1.z = max(0.00100000005, r1.z);
    r1.w = dot(-r8.yzw, r5.yzw);
    r1.w = r1.w + r1.w;
    r6.xyz = r5.yzw * -r1.www + -r8.yzw;
    r1.w = dot(r5.yzw, r6.xyz);
    r1.w = -abs(r1.w) * abs(r1.w) + 1;
    r1.w = -r1.w * 0.444702327 + 1;
    r2.w = r10.x + r10.x;
    r1.w = sqrt(r1.w);
    r1.w = r2.w / r1.w;
    r7.yzw = log2(r9.xzw);
    r11.xyz = r7.yzw * r10.yyy;
    r11.xyz = float3(-12.7799997,-12.7799997,-12.7799997) * r11.xyz;
    r7.yzw = r7.yzw * float3(-0.0199999996,-0.0199999996,-0.0199999996) + r11.xyz;
    r2.w = cmp(r10.x == 0.000000);
    r3.w = r3.y * r3.y;
    r3.w = 2 / r3.w;
    r3.w = -2 + r3.w;
    r3.w = max(1.00000003e-022, r3.w);
    r3.w = sqrt(r3.w);
    r3.w = -10 / r3.w;
    r3.w = exp2(r3.w);
    r3.w = -0.000980000012 + r3.w;
    r3.w = saturate(1.00795019 * r3.w);
    r3.w = 1 + -r3.w;
    r6.w = SkyParaboloidTextureMaxMipIndex * r3.w;
    r8.x = DynamicCubeMapReflectionTextureMaxMipIndex * r3.w;
    r9.y = cmp(0.25 >= r3.y);
    if (r9.y != 0) {
      r9.y = cmp(r5.w >= 0.25);
      if (r9.y != 0) {
        r11.x = dot(r6.xyz, ViewMatrix._m00_m10_m20);
        r11.y = dot(r6.xyz, ViewMatrix._m01_m11_m21);
        r11.z = dot(r6.xyz, ViewMatrix._m02_m12_m22);
        r9.y = dot(r11.xyz, r11.xyz);
        r9.y = rsqrt(r9.y);
        r11.xyz = r11.xyz * r9.yyy;
        r0.w = 1;
        r13.x = dot(r0.xyzw, ViewMatrix._m00_m10_m20_m30);
        r13.y = dot(r0.xyzw, ViewMatrix._m01_m11_m21_m31);
        r13.z = dot(r0.xyzw, ViewMatrix._m02_m12_m22_m32);
        r14.x = dot(r5.yzw, ViewMatrix._m00_m10_m20);
        r14.y = dot(r5.yzw, ViewMatrix._m01_m11_m21);
        r14.z = dot(r5.yzw, ViewMatrix._m02_m12_m22);
        r9.y = -0.00999999978 * r13.z;
        r9.y = max(0.00100000005, r9.y);
        r14.xyz = r14.xyz * r9.yyy + r13.xyz;
        r9.y = r11.z * 1000 + r14.z;
        r9.y = cmp(-0.00999999978 < r9.y);
        r10.y = -0.00999999978 + -r14.z;
        r10.y = r10.y / r11.z;
        r9.y = r9.y ? r10.y : 1000;
        r11.xyz = r11.xyz * r9.yyy + r14.xyz;
        r14.w = 1;
        r13.y = dot(r14.xyzw, ProjectToPixelMatrix._m00_m10_m20_m30);
        r13.x = dot(r14.xyzw, ProjectToPixelMatrix._m01_m11_m21_m31);
        r9.y = dot(r14.xyzw, ProjectToPixelMatrix._m03_m13_m23_m33);
        r11.w = 1;
        r14.x = dot(r11.xyzw, ProjectToPixelMatrix._m00_m10_m20_m30);
        r14.y = dot(r11.xyzw, ProjectToPixelMatrix._m01_m11_m21_m31);
        r10.y = dot(r11.xyzw, ProjectToPixelMatrix._m03_m13_m23_m33);
        r9.y = 1 / r9.y;
        r10.y = 1 / r10.y;
        r11.xy = r13.xy * r9.yy;
        r12.yz = r14.xy * r10.yy;
        r11.w = r14.z * r9.y;
        r11.z = r11.z * r10.y;
        r15.xy = float2(-0.5,-0.5) + ViewportSize.yx;
        r15.zw = cmp(r15.xy < r12.zy);
        r16.xy = cmp(r12.zy < float2(0.5,0.5));
        r16.xy = (int2)r15.zw | (int2)r16.xy;
        r15.xy = r15.zw ? -r15.xy : float2(-0.5,-0.5);
        r15.xy = r14.yx * r10.yy + r15.xy;
        r14.xy = r14.yx * r10.yy + -r11.xy;
        r14.xy = r15.xy / r14.xy;
        r12.w = r16.x ? r14.x : 0;
        r13.w = max(r12.w, r14.y);
        r12.w = r16.y ? r13.w : r12.w;
        r14.xy = r13.yx * r9.yy + -r12.yz;
        r12.yz = r12.ww * r14.xy + r12.yz;
        r13.w = -r10.y + r9.y;
        r10.y = r12.w * r13.w + r10.y;
        r13.w = r14.z * r9.y + -r11.z;
        r11.z = r12.w * r13.w + r11.z;
        r14.xy = r13.yx * r9.yy + -r12.yz;
        r12.w = dot(r14.xy, r14.xy);
        r12.w = cmp(r12.w < 9.99999975e-005);
        r14.xy = r13.yx * r9.yy + float2(0.00999999978,0.00999999978);
        r15.xy = r12.ww ? r14.xy : r12.yz;
        r15.zw = -r13.yx * r9.yy + r15.xy;
        r12.y = cmp(abs(r15.z) < abs(r15.w));
        r11.xy = r12.yy ? r11.xy : r11.yx;
        r13.xyw = r12.yyy ? r15.ywz : r15.xzw;
        r12.z = cmp(0 < r13.y);
        r12.w = cmp(r13.y < 0);
        r12.z = (int)-r12.z + (int)r12.w;
        r14.x = (int)r12.z;
        r12.z = r14.x / r13.y;
        r14.y = r12.z * r13.w;
        r11.z = -r14.z * r9.y + r11.z;
        r11.z = r11.z * r12.z;
        r10.y = r10.y + -r9.y;
        r10.y = r10.y * r12.z;
        r12.z = r14.x * r13.x;
        r12.w = cmp(r14.z >= 99999.7969);
        r13.x = cmp(100000 >= r14.z);
        r12.w = r12.w ? r13.x : 0;
        r13.y = 1;
        r15.x = r11.w;
        r15.y = r9.y;
        r16.xy = float2(-1,-1);
        r17.xy = r11.xy;
        r13.w = 0;
        r14.w = r12.w;
        r18.y = r14.z;
        r16.z = r12.w;
        while (true) {
          r16.w = r17.x * r14.x;
          r16.w = cmp(r12.z >= r16.w);
          r17.z = cmp((int)r13.w < 200);
          r16.w = r16.w ? r17.z : 0;
          r17.z = ~(int)r16.z;
          r16.w = r16.w ? r17.z : 0;
          if (r16.w == 0) break;
          r15.xz = r11.zz * float2(5,2.5) + r15.xx;
          r15.yw = r10.yy * float2(5,2.5) + r15.yy;
          r18.x = r15.z / r15.w;
          r15.z = cmp(r18.x < r18.y);
          r15.zw = r15.zz ? r18.xy : r18.yx;
          r16.xy = r12.yy ? r17.yx : r17.xy;
          r17.zw = ViewportSize.zw * r16.xy;
          r13.x = SSR__SSRDepthTexture__TexObj__.SampleLevel(Viewport__DepthVPSampler__SampObj___s, r17.zw, 0).x;
          r16.w = dot(r13.xy, InvProjectionMatrix._m22_m32);
          r13.x = dot(r13.xy, InvProjectionMatrix._m23_m33);
          r13.x = -r16.w / r13.x;
          r15.z = cmp(-r13.x >= r15.z);
          r13.x = -0.200000003 + -r13.x;
          r13.x = cmp(r15.w >= r13.x);
          r16.z = r13.x ? r15.z : 0;
          r17.xy = r14.xy * float2(5,5) + r17.xy;
          r13.w = (int)r13.w + 1;
          r14.w = r16.z;
          r18.y = r18.x;
        }
        if (r14.w != 0) {
          if (GameIsPaused == 0) {
            r11.xy = (int2)r16.xy;
            r11.xy = max(int2(0,0), (int2)r11.xy);
            r11.zw = (int2)ViewportSize.xy;
            r11.zw = (int2)r11.zw + int2(-1,-1);
            r11.xy = min((int2)r11.xy, (int2)r11.zw);
            r11.zw = float2(0,0);
            r12.yz = SSR__MotionVectorTexture__TexObj__.Load(r11.xyw).xy;
            r13.xy = cmp(r12.yz != float2(0,0));
            r9.y = r13.y ? r13.x : 0;
            if (r9.y != 0) {
              r9.y = cmp(1 < r12.y);
              r10.y = -2 + r12.y;
              r12.y = r9.y ? r10.y : r12.y;
            } else {
              r11.z = SSR__SSRDepthTexture__TexObj__.Load(r11.xyz).x;
              r11.w = 1;
              r9.y = dot(r11.zw, InvProjectionMatrix._m22_m32);
              r10.y = dot(r11.zw, InvProjectionMatrix._m23_m33);
              r9.y = -r9.y / r10.y;
              r11.xy = (int2)r11.xy;
              r11.xy = r11.xy * ViewportSize.zw + float2(-0.5,-0.5);
              r11.xy = CameraNearPlaneSize.xy * r11.xy;
              r11.xy = float2(1,-1) * r11.xy;
              r9.y = r9.y / CameraDistances.near;
              r11.z = -CameraDistances.near;
              r11.xyz = r11.xyz * r9.yyy;
              r11.w = 1;
              r13.x = dot(r11.xyzw, ProjectionMatrix._m00_m10_m20_m30);
              r13.y = dot(r11.xyzw, ProjectionMatrix._m01_m11_m21_m31);
              r9.y = dot(r11.xyzw, ProjectionMatrix._m03_m13_m23_m33);
              r14.x = dot(r11.xyzw, CameraSpaceToPreviousProjectedSpace._m00_m10_m20_m30);
              r14.y = dot(r11.xyzw, CameraSpaceToPreviousProjectedSpace._m01_m11_m21_m31);
              r10.y = dot(r11.xyzw, CameraSpaceToPreviousProjectedSpace._m03_m13_m23_m33);
              r10.y = max(9.99999975e-005, r10.y);
              r11.xy = r14.xy / r10.yy;
              r11.zw = r13.xy / r9.yy;
              r11.xy = r11.zw + -r11.xy;
              r12.yw = float2(0.5,0.5) * r11.xy;
              r12.z = -r12.w;
            }
          } else {
            r12.yz = float2(0,0);
          }
          r11.xy = r16.xy * ViewportSize.zw + -r12.yz;
          r12.yz = ViewportSize.xy * r11.xy;
          r14.xy = (int2)r12.yz;
          r14.zw = float2(0,0);
          r12.y = SSR__SSRDepthTexture__TexObj__.Load(r14.xyz).x;
          r12.z = 1;
          r9.y = dot(r12.yz, InvProjectionMatrix._m22_m32);
          r10.y = dot(r12.yz, InvProjectionMatrix._m23_m33);
          r9.y = -r9.y / r10.y;
          r9.y = cmp(r13.z >= -r9.y);
          r10.y = ~(int)r9.y;
          r12.yz = v0.xy + -r16.xy;
          r12.y = dot(r12.yz, r12.yz);
          r12.y = sqrt(r12.y);
          r12.z = cmp(r12.y >= 700);
          r12.y = -700 + r12.y;
          r12.y = -r12.y * 0.00333333341 + 1;
          r12.y = r12.z ? r12.y : 1;
          r11.zw = float2(1,1) + -r11.xy;
          r13.xyzw = saturate(float4(10,10,10,10) * r11.xzyw);
          r11.z = r13.x * r13.y;
          r11.z = r11.z * r13.z;
          r11.z = r11.z * r13.w;
          r11.z = r12.y * r11.z;
          r11.w = cmp(0.136999995 < r3.y);
          r12.y = -r3.y * 4 + 1;
          r12.y = max(0, r12.y);
          r12.y = r12.y * r11.z;
          r11.z = r11.w ? r12.y : r11.z;
          r9.y = r9.y ? r11.z : 1;
        } else {
          r11.xy = float2(0,0);
          r9.y = 0;
          r10.y = 0;
        }
        if (r10.y == 0) {
          r10.y = cmp(0 < r9.y);
          if (r10.y != 0) {
            r3.w = SSRTextureMaxMipIndex * r3.w;
            r11.xyz = SSR__SSRTexture__TexObj__.SampleLevel(ColorClamp_s, r11.xy, r3.w).xyz;
          } else {
            r11.xyz = float3(0,0,0);
          }
        } else {
          r11.xyz = float3(0,0,0);
          r9.y = 0;
        }
      } else {
        r11.xyz = float3(0,0,0);
        r9.y = 0;
      }
    } else {
      r11.xyz = float3(0,0,0);
      r9.y = 0;
    }
    r3.w = cmp(0 < r9.y);
    if (r3.w != 0) {
      r11.xyz = r11.xyz / ExposureScale;
      r3.w = cmp(r9.y < 1);
      if (r3.w != 0) {
        if (UseOnlySkyReflection == 0) {
          r0.w = 1;
          r13.xyzw = float4(0,0,0,0);
          r3.w = 1;
          r10.y = 0;
          while (true) {
            r12.y = cmp((uint)r10.y >= 15);
            if (r12.y != 0) break;
            r12.y = (int)r10.y * 7;
            r14.x = dot(r0.xyzw, ReflectionVolumes[r10.y]._m00_m10_m20_m30);
            r14.y = dot(r0.xyzw, ReflectionVolumes[r10.y]._m01_m11_m21_m31);
            r14.z = dot(r0.xyzw, ReflectionVolumes[r10.y]._m02_m12_m22_m32);
            r15.xyz = cmp(r14.xyz >= float3(0,0,0));
            r15.xyz = r15.xyz ? ReflectionVolumes[r10.y].xyz : ReflectionVolumes[r10.y].xyz;
            r14.xyz = float3(1,1,1) + -abs(r14.xyz);
            r14.xyz = saturate(r14.xyz * r15.xyz);
            r12.z = r14.x * r14.y;
            r12.z = r12.z * r14.z;
            r12.w = cmp(0 < r12.z);
            if (r12.w != 0) {
              r14.x = dot(r6.xyz, ReflectionVolumes[r10.y]._m00_m10_m20);
              r14.y = dot(r6.xyz, ReflectionVolumes[r10.y]._m01_m11_m21);
              r14.z = dot(r6.xyz, ReflectionVolumes[r10.y]._m02_m12_m22);
              r12.z = ReflectionVolumes[r10.y] * r12.z;
              r14.w = ReflectionVolumes[r10.y];
              r14.xyzw = Viewport__DynamicCubeMapReflectionTextureArray.SampleLevel(ColorWrap_s, r14.xyzw, r8.x).xyzw;
              r14.xyzw = ReflectionVolumes[r10.y].xxxy * r14.xyzw;
              r12.y = min(r12.z, r3.w);
              r14.xyzw = r14.xyzw * r12.yyyy + r13.xyzw;
              r12.y = -r12.y + r3.w;
              r12.z = cmp(0 >= r12.y);
              if (r12.z != 0) {
                r13.xyzw = r14.xyzw;
                r3.w = r12.y;
                break;
              }
              r13.xyzw = r14.xyzw;
              r3.w = r12.y;
            }
            r10.y = (int)r10.y + 1;
          }
        } else {
          r13.xyzw = float4(0,0,0,0);
          r3.w = 1;
        }
        r10.y = r13.w + r3.w;
        r10.y = r10.y * r1.y;
        r12.y = cmp(0 < r10.y);
        if (r12.y != 0) {
          r12.y = r6.z + -abs(r6.z);
          r3.w = r3.w * r12.y + abs(r6.z);
          r3.w = r3.w * 2 + 2;
          r12.yz = float2(-1,1) / r3.ww;
          r12.yz = r12.yz * r6.yx;
          r12.yz = r12.yz * float2(0.949999988,0.949999988) + float2(0.5,0.5);
          r12.yzw = Viewport__SkyParaboloidTexture.SampleLevel(ColorClamp_s, r12.yz, r6.w).xyz;
          r14.xyz = saturate(r12.yzw);
          r12.yzw = UseOnlySkyReflection ? r14.xyz : r12.yzw;
          r12.yzw = r12.yzw / ExposureScale;
          r13.xyz = r12.yzw * r10.yyy + r13.xyz;
        }
        r9.y = saturate(r9.y);
        r12.yzw = -r13.xyz + r11.xyz;
        r11.xyz = r9.yyy * r12.yzw + r13.xyz;
      }
    } else {
      if (UseOnlySkyReflection == 0) {
        r0.w = 1;
        r11.xyzw = float4(0,0,0,0);
        r3.w = 1;
        r9.y = 0;
        while (true) {
          r10.y = cmp((uint)r9.y >= 15);
          if (r10.y != 0) break;
          r10.y = (int)r9.y * 7;
          r13.x = dot(r0.xyzw, ReflectionVolumes[r9.y]._m00_m10_m20_m30);
          r13.y = dot(r0.xyzw, ReflectionVolumes[r9.y]._m01_m11_m21_m31);
          r13.z = dot(r0.xyzw, ReflectionVolumes[r9.y]._m02_m12_m22_m32);
          r12.yzw = cmp(r13.xyz >= float3(0,0,0));
          r12.yzw = r12.yzw ? ReflectionVolumes[r9.y].xyz : ReflectionVolumes[r9.y].xyz;
          r13.xyz = float3(1,1,1) + -abs(r13.xyz);
          r12.yzw = saturate(r13.xyz * r12.yzw);
          r12.y = r12.y * r12.z;
          r12.y = r12.y * r12.w;
          r12.z = cmp(0 < r12.y);
          if (r12.z != 0) {
            r13.x = dot(r6.xyz, ReflectionVolumes[r9.y]._m00_m10_m20);
            r13.y = dot(r6.xyz, ReflectionVolumes[r9.y]._m01_m11_m21);
            r13.z = dot(r6.xyz, ReflectionVolumes[r9.y]._m02_m12_m22);
            r12.y = ReflectionVolumes[r9.y] * r12.y;
            r13.w = ReflectionVolumes[r9.y];
            r13.xyzw = Viewport__DynamicCubeMapReflectionTextureArray.SampleLevel(ColorWrap_s, r13.xyzw, r8.x).xyzw;
            r13.xyzw = ReflectionVolumes[r9.y].xxxy * r13.xyzw;
            r10.y = min(r12.y, r3.w);
            r13.xyzw = r13.xyzw * r10.yyyy + r11.xyzw;
            r10.y = -r10.y + r3.w;
            r12.y = cmp(0 >= r10.y);
            if (r12.y != 0) {
              r11.xyzw = r13.xyzw;
              r3.w = r10.y;
              break;
            }
            r11.xyzw = r13.xyzw;
            r3.w = r10.y;
          }
          r9.y = (int)r9.y + 1;
        }
      } else {
        r11.xyzw = float4(0,0,0,0);
        r3.w = 1;
      }
      r8.x = r11.w + r3.w;
      r8.x = r8.x * r1.y;
      r9.y = cmp(0 < r8.x);
      if (r9.y != 0) {
        r9.y = r6.z + -abs(r6.z);
        r3.w = r3.w * r9.y + abs(r6.z);
        r3.w = r3.w * 2 + 2;
        r12.yz = float2(-1,1) / r3.ww;
        r12.yz = r12.yz * r6.yx;
        r12.yz = r12.yz * float2(0.949999988,0.949999988) + float2(0.5,0.5);
        r12.yzw = Viewport__SkyParaboloidTexture.SampleLevel(ColorClamp_s, r12.yz, r6.w).xyz;
        r13.xyz = saturate(r12.yzw);
        r12.yzw = UseOnlySkyReflection ? r13.xyz : r12.yzw;
        r12.yzw = r12.yzw / ExposureScale;
        r11.xyz = r12.yzw * r8.xxx + r11.xyz;
      }
    }
    r3.w = 0.0799999982 * r4.z;
    r6.w = dot(r3.www, float3(0.333333343,0.333333343,0.333333343));
    r6.w = 50 * r6.w;
    r6.w = min(1, r6.w);
    r3.x = saturate(dot(r5.yzw, r8.yzw));
    r12.yz = Global__IBLBRDFTexture.SampleLevel(ColorClamp_s, r3.xy, 0).xy;
    r3.w = r3.w * r12.y + r12.z;
    r3.w = r3.w * r6.w;
    r11.xyz = r11.xyz * r3.www;
    r11.xyz = r11.xyz * r7.xxx;
    r1.z = r3.y + r1.z;
    r3.z = min(1, r1.z);
    r1.z = r3.z * r3.z;
    r1.z = 2 / r1.z;
    r1.z = -2 + r1.z;
    r1.z = max(1.00000003e-022, r1.z);
    r1.z = sqrt(r1.z);
    r1.z = -10 / r1.z;
    r1.z = exp2(r1.z);
    r1.z = -0.000980000012 + r1.z;
    r1.z = 1.00795019 * r1.z;
    r1.z = max(0, r1.z);
    r1.z = 1 + -r1.z;
    r3.y = SkyParaboloidTextureMaxMipIndex * r1.z;
    r3.w = DynamicCubeMapReflectionTextureMaxMipIndex * r1.z;
    r6.w = cmp(0.25 >= r3.z);
    if (r6.w != 0) {
      r6.w = cmp(r5.w >= 0.25);
      if (r6.w != 0) {
        r13.x = dot(r6.xyz, ViewMatrix._m00_m10_m20);
        r13.y = dot(r6.xyz, ViewMatrix._m01_m11_m21);
        r13.z = dot(r6.xyz, ViewMatrix._m02_m12_m22);
        r6.w = dot(r13.xyz, r13.xyz);
        r6.w = rsqrt(r6.w);
        r12.yzw = r13.xyz * r6.www;
        r0.w = 1;
        r13.x = dot(r0.xyzw, ViewMatrix._m00_m10_m20_m30);
        r13.y = dot(r0.xyzw, ViewMatrix._m01_m11_m21_m31);
        r13.z = dot(r0.xyzw, ViewMatrix._m02_m12_m22_m32);
        r14.x = dot(r5.yzw, ViewMatrix._m00_m10_m20);
        r14.y = dot(r5.yzw, ViewMatrix._m01_m11_m21);
        r14.z = dot(r5.yzw, ViewMatrix._m02_m12_m22);
        r6.w = -0.00999999978 * r13.z;
        r6.w = max(0.00100000005, r6.w);
        r14.xyz = r14.xyz * r6.www + r13.xyz;
        r6.w = r12.w * 1000 + r14.z;
        r6.w = cmp(-0.00999999978 < r6.w);
        r8.x = -0.00999999978 + -r14.z;
        r8.x = r8.x / r12.w;
        r6.w = r6.w ? r8.x : 1000;
        r15.xyz = r12.yzw * r6.www + r14.xyz;
        r14.w = 1;
        r13.y = dot(r14.xyzw, ProjectToPixelMatrix._m00_m10_m20_m30);
        r13.x = dot(r14.xyzw, ProjectToPixelMatrix._m01_m11_m21_m31);
        r6.w = dot(r14.xyzw, ProjectToPixelMatrix._m03_m13_m23_m33);
        r15.w = 1;
        r14.x = dot(r15.xyzw, ProjectToPixelMatrix._m00_m10_m20_m30);
        r14.y = dot(r15.xyzw, ProjectToPixelMatrix._m01_m11_m21_m31);
        r8.x = dot(r15.xyzw, ProjectToPixelMatrix._m03_m13_m23_m33);
        r6.w = 1 / r6.w;
        r8.x = 1 / r8.x;
        r12.yz = r13.xy * r6.ww;
        r15.xy = r14.xy * r8.xx;
        r9.y = r14.z * r6.w;
        r10.y = r15.z * r8.x;
        r15.zw = float2(-0.5,-0.5) + ViewportSize.yx;
        r16.xy = cmp(r15.zw < r15.yx);
        r16.zw = cmp(r15.yx < float2(0.5,0.5));
        r16.zw = (int2)r16.zw | (int2)r16.xy;
        r15.zw = r16.xy ? -r15.zw : float2(-0.5,-0.5);
        r15.zw = r14.yx * r8.xx + r15.zw;
        r14.xy = r14.yx * r8.xx + -r12.yz;
        r14.xy = r15.zw / r14.xy;
        r11.w = r16.z ? r14.x : 0;
        r12.w = max(r11.w, r14.y);
        r11.w = r16.w ? r12.w : r11.w;
        r14.xy = r13.yx * r6.ww + -r15.xy;
        r14.xy = r11.ww * r14.xy + r15.xy;
        r12.w = -r8.x + r6.w;
        r8.x = r11.w * r12.w + r8.x;
        r12.w = r14.z * r6.w + -r10.y;
        r10.y = r11.w * r12.w + r10.y;
        r15.xy = r13.yx * r6.ww + -r14.xy;
        r11.w = dot(r15.xy, r15.xy);
        r11.w = cmp(r11.w < 9.99999975e-005);
        r15.xy = r13.yx * r6.ww + float2(0.00999999978,0.00999999978);
        r15.xy = r11.ww ? r15.xy : r14.xy;
        r15.zw = -r13.yx * r6.ww + r15.xy;
        r11.w = cmp(abs(r15.z) < abs(r15.w));
        r12.yz = r11.ww ? r12.yz : r12.zy;
        r13.xyw = r11.www ? r15.ywz : r15.xzw;
        r12.w = cmp(0 < r13.y);
        r14.x = cmp(r13.y < 0);
        r12.w = (int)-r12.w + (int)r14.x;
        r14.x = (int)r12.w;
        r12.w = r14.x / r13.y;
        r14.y = r12.w * r13.w;
        r10.y = -r14.z * r6.w + r10.y;
        r10.y = r10.y * r12.w;
        r8.x = r8.x + -r6.w;
        r8.x = r8.x * r12.w;
        r12.w = r14.x * r13.x;
        r13.x = cmp(r14.z >= 99999.7969);
        r13.y = cmp(100000 >= r14.z);
        r13.x = r13.y ? r13.x : 0;
        r15.y = 1;
        r16.x = r9.y;
        r16.y = r6.w;
        r13.yw = float2(-1,-1);
        r17.xy = r12.yz;
        r14.w = 0;
        r18.y = r14.z;
        r15.zw = r13.xx;
        while (true) {
          r17.z = r17.x * r14.x;
          r17.z = cmp(r12.w >= r17.z);
          r17.w = cmp((int)r14.w < 200);
          r17.z = r17.w ? r17.z : 0;
          r17.w = ~(int)r15.w;
          r17.z = r17.w ? r17.z : 0;
          if (r17.z == 0) break;
          r16.xz = r10.yy * float2(5,2.5) + r16.xx;
          r16.yw = r8.xx * float2(5,2.5) + r16.yy;
          r18.x = r16.z / r16.w;
          r16.z = cmp(r18.x < r18.y);
          r16.zw = r16.zz ? r18.xy : r18.yx;
          r13.yw = r11.ww ? r17.yx : r17.xy;
          r17.zw = ViewportSize.zw * r13.yw;
          r15.x = SSR__SSRDepthTexture__TexObj__.SampleLevel(Viewport__DepthVPSampler__SampObj___s, r17.zw, 0).x;
          r17.z = dot(r15.xy, InvProjectionMatrix._m22_m32);
          r15.x = dot(r15.xy, InvProjectionMatrix._m23_m33);
          r15.x = -r17.z / r15.x;
          r16.z = cmp(-r15.x >= r16.z);
          r15.x = -0.200000003 + -r15.x;
          r15.x = cmp(r16.w >= r15.x);
          r15.w = r15.x ? r16.z : 0;
          r17.xy = r14.xy * float2(5,5) + r17.xy;
          r14.w = (int)r14.w + 1;
          r15.z = r15.w;
          r18.y = r18.x;
        }
        if (r15.z != 0) {
          if (GameIsPaused == 0) {
            r12.yz = (int2)r13.yw;
            r12.yz = max(int2(0,0), (int2)r12.yz);
            r14.xy = (int2)ViewportSize.xy;
            r14.xy = (int2)r14.xy + int2(-1,-1);
            r14.xy = min((int2)r14.xy, (int2)r12.yz);
            r14.zw = float2(0,0);
            r12.yz = SSR__MotionVectorTexture__TexObj__.Load(r14.xyw).xy;
            r15.xy = cmp(r12.yz != float2(0,0));
            r6.w = r15.y ? r15.x : 0;
            if (r6.w != 0) {
              r6.w = cmp(1 < r12.y);
              r8.x = -2 + r12.y;
              r12.y = r6.w ? r8.x : r12.y;
            } else {
              r14.z = SSR__SSRDepthTexture__TexObj__.Load(r14.xyz).x;
              r14.w = 1;
              r6.w = dot(r14.zw, InvProjectionMatrix._m22_m32);
              r8.x = dot(r14.zw, InvProjectionMatrix._m23_m33);
              r6.w = -r6.w / r8.x;
              r14.xy = (int2)r14.xy;
              r14.xy = r14.xy * ViewportSize.zw + float2(-0.5,-0.5);
              r14.xy = CameraNearPlaneSize.xy * r14.xy;
              r14.xy = float2(1,-1) * r14.xy;
              r6.w = r6.w / CameraDistances.near;
              r14.z = -CameraDistances.near;
              r14.xyz = r14.xyz * r6.www;
              r14.w = 1;
              r15.x = dot(r14.xyzw, ProjectionMatrix._m00_m10_m20_m30);
              r15.y = dot(r14.xyzw, ProjectionMatrix._m01_m11_m21_m31);
              r6.w = dot(r14.xyzw, ProjectionMatrix._m03_m13_m23_m33);
              r16.x = dot(r14.xyzw, CameraSpaceToPreviousProjectedSpace._m00_m10_m20_m30);
              r16.y = dot(r14.xyzw, CameraSpaceToPreviousProjectedSpace._m01_m11_m21_m31);
              r8.x = dot(r14.xyzw, CameraSpaceToPreviousProjectedSpace._m03_m13_m23_m33);
              r8.x = max(9.99999975e-005, r8.x);
              r14.xy = r16.xy / r8.xx;
              r14.zw = r15.xy / r6.ww;
              r14.xy = r14.zw + -r14.xy;
              r12.yw = float2(0.5,0.5) * r14.xy;
              r12.z = -r12.w;
            }
          } else {
            r12.yz = float2(0,0);
          }
          r14.xy = r13.yw * ViewportSize.zw + -r12.yz;
          r12.yz = ViewportSize.xy * r14.xy;
          r15.xy = (int2)r12.yz;
          r15.zw = float2(0,0);
          r12.y = SSR__SSRDepthTexture__TexObj__.Load(r15.xyz).x;
          r12.z = 1;
          r6.w = dot(r12.yz, InvProjectionMatrix._m22_m32);
          r8.x = dot(r12.yz, InvProjectionMatrix._m23_m33);
          r6.w = -r6.w / r8.x;
          r6.w = cmp(r13.z >= -r6.w);
          r8.x = ~(int)r6.w;
          r12.yz = v0.xy + -r13.yw;
          r9.y = dot(r12.yz, r12.yz);
          r9.y = sqrt(r9.y);
          r10.y = cmp(r9.y >= 700);
          r9.y = -700 + r9.y;
          r9.y = -r9.y * 0.00333333341 + 1;
          r9.y = r10.y ? r9.y : 1;
          r14.zw = float2(1,1) + -r14.xy;
          r13.xyzw = saturate(float4(10,10,10,10) * r14.xzyw);
          r10.y = r13.x * r13.y;
          r10.y = r10.y * r13.z;
          r10.y = r10.y * r13.w;
          r9.y = r10.y * r9.y;
          r10.y = cmp(0.136999995 < r3.z);
          r11.w = -r3.z * 4 + 1;
          r11.w = max(0, r11.w);
          r11.w = r11.w * r9.y;
          r9.y = r10.y ? r11.w : r9.y;
          r6.w = r6.w ? r9.y : 1;
        } else {
          r14.xy = float2(0,0);
          r6.w = 0;
          r8.x = 0;
        }
        if (r8.x == 0) {
          r8.x = cmp(0 < r6.w);
          if (r8.x != 0) {
            r1.z = SSRTextureMaxMipIndex * r1.z;
            r12.yzw = SSR__SSRTexture__TexObj__.SampleLevel(ColorClamp_s, r14.xy, r1.z).xyz;
          } else {
            r12.yzw = float3(0,0,0);
          }
        } else {
          r12.yzw = float3(0,0,0);
          r6.w = 0;
        }
      } else {
        r12.yzw = float3(0,0,0);
        r6.w = 0;
      }
    } else {
      r12.yzw = float3(0,0,0);
      r6.w = 0;
    }
    r1.z = cmp(0 < r6.w);
    if (r1.z != 0) {
      r13.xyz = r12.yzw / ExposureScale;
      r1.z = cmp(r6.w < 1);
      if (r1.z != 0) {
        if (UseOnlySkyReflection == 0) {
          r0.w = 1;
          r14.xyzw = float4(0,0,0,0);
          r1.z = 1;
          r8.x = 0;
          while (true) {
            r9.y = cmp((uint)r8.x >= 15);
            if (r9.y != 0) break;
            r9.y = (int)r8.x * 7;
            r15.x = dot(r0.xyzw, ReflectionVolumes[r8.x]._m00_m10_m20_m30);
            r15.y = dot(r0.xyzw, ReflectionVolumes[r8.x]._m01_m11_m21_m31);
            r15.z = dot(r0.xyzw, ReflectionVolumes[r8.x]._m02_m12_m22_m32);
            r12.yzw = cmp(r15.xyz >= float3(0,0,0));
            r12.yzw = r12.yzw ? ReflectionVolumes[r8.x].xyz : ReflectionVolumes[r8.x].xyz;
            r15.xyz = float3(1,1,1) + -abs(r15.xyz);
            r12.yzw = saturate(r15.xyz * r12.yzw);
            r10.y = r12.y * r12.z;
            r10.y = r10.y * r12.w;
            r11.w = cmp(0 < r10.y);
            if (r11.w != 0) {
              r15.x = dot(r6.xyz, ReflectionVolumes[r8.x]._m00_m10_m20);
              r15.y = dot(r6.xyz, ReflectionVolumes[r8.x]._m01_m11_m21);
              r15.z = dot(r6.xyz, ReflectionVolumes[r8.x]._m02_m12_m22);
              r10.y = ReflectionVolumes[r8.x] * r10.y;
              r15.w = ReflectionVolumes[r8.x];
              r15.xyzw = Viewport__DynamicCubeMapReflectionTextureArray.SampleLevel(ColorWrap_s, r15.xyzw, r3.w).xyzw;
              r15.xyzw = ReflectionVolumes[r8.x].xxxy * r15.xyzw;
              r9.y = min(r10.y, r1.z);
              r15.xyzw = r15.xyzw * r9.yyyy + r14.xyzw;
              r9.y = -r9.y + r1.z;
              r10.y = cmp(0 >= r9.y);
              if (r10.y != 0) {
                r14.xyzw = r15.xyzw;
                r1.z = r9.y;
                break;
              }
              r14.xyzw = r15.xyzw;
              r1.z = r9.y;
            }
            r8.x = (int)r8.x + 1;
          }
        } else {
          r14.xyzw = float4(0,0,0,0);
          r1.z = 1;
        }
        r8.x = r14.w + r1.z;
        r8.x = r8.x * r1.y;
        r9.y = cmp(0 < r8.x);
        if (r9.y != 0) {
          r9.y = r6.z + -abs(r6.z);
          r1.z = r1.z * r9.y + abs(r6.z);
          r1.z = r1.z * 2 + 2;
          r12.yz = float2(-1,1) / r1.zz;
          r12.yz = r12.yz * r6.yx;
          r12.yz = r12.yz * float2(0.949999988,0.949999988) + float2(0.5,0.5);
          r12.yzw = Viewport__SkyParaboloidTexture.SampleLevel(ColorClamp_s, r12.yz, r3.y).xyz;
          r15.xyz = saturate(r12.yzw);
          r12.yzw = UseOnlySkyReflection ? r15.xyz : r12.yzw;
          r12.yzw = r12.yzw / ExposureScale;
          r14.xyz = r12.yzw * r8.xxx + r14.xyz;
        }
        r6.w = saturate(r6.w);
        r12.yzw = -r14.xyz + r13.xyz;
        r13.xyz = r6.www * r12.yzw + r14.xyz;
      }
    } else {
      if (UseOnlySkyReflection == 0) {
        r0.w = 1;
        r13.xyzw = float4(0,0,0,0);
        r1.z = 1;
        r6.w = 0;
        while (true) {
          r8.x = cmp((uint)r6.w >= 15);
          if (r8.x != 0) break;
          r8.x = (int)r6.w * 7;
          r14.x = dot(r0.xyzw, ReflectionVolumes[r6.w]._m00_m10_m20_m30);
          r14.y = dot(r0.xyzw, ReflectionVolumes[r6.w]._m01_m11_m21_m31);
          r14.z = dot(r0.xyzw, ReflectionVolumes[r6.w]._m02_m12_m22_m32);
          r12.yzw = cmp(r14.xyz >= float3(0,0,0));
          r12.yzw = r12.yzw ? ReflectionVolumes[r6.w].xyz : ReflectionVolumes[r6.w].xyz;
          r14.xyz = float3(1,1,1) + -abs(r14.xyz);
          r12.yzw = saturate(r14.xyz * r12.yzw);
          r9.y = r12.y * r12.z;
          r9.y = r9.y * r12.w;
          r10.y = cmp(0 < r9.y);
          if (r10.y != 0) {
            r14.x = dot(r6.xyz, ReflectionVolumes[r6.w]._m00_m10_m20);
            r14.y = dot(r6.xyz, ReflectionVolumes[r6.w]._m01_m11_m21);
            r14.z = dot(r6.xyz, ReflectionVolumes[r6.w]._m02_m12_m22);
            r9.y = ReflectionVolumes[r6.w] * r9.y;
            r14.w = ReflectionVolumes[r6.w];
            r14.xyzw = Viewport__DynamicCubeMapReflectionTextureArray.SampleLevel(ColorWrap_s, r14.xyzw, r3.w).xyzw;
            r14.xyzw = ReflectionVolumes[r6.w].xxxy * r14.xyzw;
            r8.x = min(r9.y, r1.z);
            r14.xyzw = r14.xyzw * r8.xxxx + r13.xyzw;
            r8.x = -r8.x + r1.z;
            r9.y = cmp(0 >= r8.x);
            if (r9.y != 0) {
              r13.xyzw = r14.xyzw;
              r1.z = r8.x;
              break;
            }
            r13.xyzw = r14.xyzw;
            r1.z = r8.x;
          }
          r6.w = (int)r6.w + 1;
        }
      } else {
        r13.xyzw = float4(0,0,0,0);
        r1.z = 1;
      }
      r3.w = r13.w + r1.z;
      r3.w = r3.w * r1.y;
      r6.w = cmp(0 < r3.w);
      if (r6.w != 0) {
        r6.w = r6.z + -abs(r6.z);
        r1.z = r1.z * r6.w + abs(r6.z);
        r1.z = r1.z * 2 + 2;
        r6.zw = float2(-1,1) / r1.zz;
        r6.xy = r6.yx * r6.zw;
        r6.xy = r6.xy * float2(0.949999988,0.949999988) + float2(0.5,0.5);
        r6.xyz = Viewport__SkyParaboloidTexture.SampleLevel(ColorClamp_s, r6.xy, r3.y).xyz;
        r12.yzw = saturate(r6.xyz);
        r6.xyz = UseOnlySkyReflection ? r12.yzw : r6.xyz;
        r6.xyz = r6.xyz / ExposureScale;
        r13.xyz = r6.xyz * r3.www + r13.xyz;
      }
    }
    r1.z = 0.0799999982 * r10.w;
    r6.xyz = -r10.www * float3(0.0799999982,0.0799999982,0.0799999982) + r9.xzw;
    r6.xyz = r4.xxx * r6.xyz + r1.zzz;
    r1.z = dot(r6.xyz, float3(0.333333343,0.333333343,0.333333343));
    r1.z = saturate(50 * r1.z);
    r3.xy = Global__IBLBRDFTexture.SampleLevel(ColorClamp_s, r3.xz, 0).xy;
    r3.xyz = r6.xyz * r3.xxx + r3.yyy;
    r3.xyz = r3.xyz * r1.zzz;
    r3.xyz = r13.xyz * r3.xyz;
    r3.xyz = r3.xyz * r7.xxx;
    r6.xyz = -r7.yzw * r1.www;
    r6.xyz = exp2(r6.xyz);
    r6.xyz = r3.xyz * r6.xyz + r11.xyz;
    r3.xyz = r2.www ? r3.xyz : r6.xyz;
    r1.z = dot(r3.xyz, float3(0.212639004,0.715168655,0.0721923187));
  } else {
    r1.w = cmp((int)r5.x == 5);
    if (r1.w != 0) {
      r1.w = dot(-r8.yzw, r5.yzw);
      r1.w = r1.w + r1.w;
      r6.xyz = r5.yzw * -r1.www + -r8.yzw;
      r1.w = dot(r6.xyz, r10.xzw);
      r2.w = dot(r6.xyz, r5.yzw);
      r6.xyz = r5.yzw * r2.www;
      r6.xyz = r10.xzw * r1.www + r6.xyz;
      r1.w = dot(r10.xzw, r8.yzw);
      r1.w = -r1.w * r1.w + 1;
      r1.w = sqrt(r1.w);
      r2.w = r4.y * r4.y;
      r2.w = 2 / r2.w;
      r2.w = -2 + r2.w;
      r2.w = max(1.00000003e-022, r2.w);
      r2.w = sqrt(r2.w);
      r2.w = -10 / r2.w;
      r2.w = exp2(r2.w);
      r2.w = -0.000980000012 + r2.w;
      r2.w = saturate(1.00795019 * r2.w);
      r2.w = 1 + -r2.w;
      if (UseOnlySkyReflection == 0) {
        r3.w = DynamicCubeMapReflectionTextureMaxMipIndex * r2.w;
        r0.w = 1;
        r10.xyzw = float4(0,0,0,0);
        r5.x = 1;
        r6.w = 0;
        while (true) {
          r7.y = cmp((uint)r6.w >= 15);
          if (r7.y != 0) break;
          r7.y = (int)r6.w * 7;
          r11.x = dot(r0.xyzw, ReflectionVolumes[r6.w]._m00_m10_m20_m30);
          r11.y = dot(r0.xyzw, ReflectionVolumes[r6.w]._m01_m11_m21_m31);
          r11.z = dot(r0.xyzw, ReflectionVolumes[r6.w]._m02_m12_m22_m32);
          r12.yzw = cmp(r11.xyz >= float3(0,0,0));
          r12.yzw = r12.yzw ? ReflectionVolumes[r6.w].xyz : ReflectionVolumes[r6.w].xyz;
          r11.xyz = float3(1,1,1) + -abs(r11.xyz);
          r11.xyz = saturate(r11.xyz * r12.yzw);
          r7.z = r11.x * r11.y;
          r7.z = r7.z * r11.z;
          r7.w = cmp(0 < r7.z);
          if (r7.w != 0) {
            r11.x = dot(r6.xyz, ReflectionVolumes[r6.w]._m00_m10_m20);
            r11.y = dot(r6.xyz, ReflectionVolumes[r6.w]._m01_m11_m21);
            r11.z = dot(r6.xyz, ReflectionVolumes[r6.w]._m02_m12_m22);
            r7.z = ReflectionVolumes[r6.w] * r7.z;
            r11.w = ReflectionVolumes[r6.w];
            r11.xyzw = Viewport__DynamicCubeMapReflectionTextureArray.SampleLevel(ColorWrap_s, r11.xyzw, r3.w).xyzw;
            r11.xyzw = ReflectionVolumes[r6.w].xxxy * r11.xyzw;
            r7.y = min(r7.z, r5.x);
            r11.xyzw = r11.xyzw * r7.yyyy + r10.xyzw;
            r7.y = -r7.y + r5.x;
            r7.z = cmp(0 >= r7.y);
            if (r7.z != 0) {
              r10.xyzw = r11.xyzw;
              r5.x = r7.y;
              break;
            }
            r10.xyzw = r11.xyzw;
            r5.x = r7.y;
          }
          r6.w = (int)r6.w + 1;
        }
      } else {
        r10.xyzw = float4(0,0,0,0);
        r5.x = 1;
      }
      r3.w = r10.w + r5.x;
      r3.w = r3.w * r1.y;
      r6.w = cmp(0 < r3.w);
      if (r6.w != 0) {
        r2.w = SkyParaboloidTextureMaxMipIndex * r2.w;
        r6.w = r6.z + -abs(r6.z);
        r5.x = r5.x * r6.w + abs(r6.z);
        r5.x = r5.x * 2 + 2;
        r6.zw = float2(-1,1) / r5.xx;
        r6.xy = r6.yx * r6.zw;
        r6.xy = r6.xy * float2(0.949999988,0.949999988) + float2(0.5,0.5);
        r6.xyz = Viewport__SkyParaboloidTexture.SampleLevel(ColorClamp_s, r6.xy, r2.w).xyz;
        r7.yzw = saturate(r6.xyz);
        r6.xyz = UseOnlySkyReflection ? r7.yzw : r6.xyz;
        r6.xyz = r6.xyz / ExposureScale;
        r10.xyz = r6.xyz * r3.www + r10.xyz;
      }
      r6.xyz = sqrt(r9.xzw);
      r2.w = dot(r9.xzw, float3(0.212639004,0.715168655,0.0721923187));
      r6.xyz = r6.xyz * float3(4,4,4) + -r7.xxx;
      r6.xyz = r2.www * r6.xyz + r7.xxx;
      r6.xyz = r10.xyz * r6.xyz;
      r2.w = 0.0799999982 * r4.z;
      r7.yzw = -r4.zzz * float3(0.0799999982,0.0799999982,0.0799999982) + r9.xzw;
      r7.yzw = r4.xxx * r7.yzw + r2.www;
      r2.w = dot(r7.yzw, float3(0.333333343,0.333333343,0.333333343));
      r2.w = saturate(50 * r2.w);
      r4.w = saturate(dot(r5.yzw, r8.yzw));
      r10.xy = Global__IBLBRDFTexture.SampleLevel(ColorClamp_s, r4.wy, 0).xy;
      r7.yzw = r7.yzw * r10.xxx + r10.yyy;
      r7.yzw = r7.yzw * r2.www;
      r7.yzw = r7.yzw * r1.www;
      r3.xyz = r7.yzw * r6.xyz;
      r1.z = dot(r3.xyz, float3(0.212639004,0.715168655,0.0721923187));
    } else {
      r1.w = saturate(r12.x + r4.y);
      r2.w = dot(-r8.yzw, r5.yzw);
      r2.w = r2.w + r2.w;
      r6.xyz = r5.yzw * -r2.www + -r8.yzw;
      r2.w = r1.w * r1.w;
      r2.w = 2 / r2.w;
      r2.w = -2 + r2.w;
      r2.w = max(1.00000003e-022, r2.w);
      r2.w = sqrt(r2.w);
      r2.w = -10 / r2.w;
      r2.w = exp2(r2.w);
      r2.w = -0.000980000012 + r2.w;
      r2.w = saturate(1.00795019 * r2.w);
      r2.w = 1 + -r2.w;
      r3.w = SkyParaboloidTextureMaxMipIndex * r2.w;
      r5.x = DynamicCubeMapReflectionTextureMaxMipIndex * r2.w;
      r6.w = cmp(0.25 >= r1.w);
      if (r6.w != 0) {
        r6.w = cmp(r5.w >= 0.25);
        if (r6.w != 0) {
          r10.x = dot(r6.xyz, ViewMatrix._m00_m10_m20);
          r10.y = dot(r6.xyz, ViewMatrix._m01_m11_m21);
          r10.z = dot(r6.xyz, ViewMatrix._m02_m12_m22);
          r6.w = dot(r10.xyz, r10.xyz);
          r6.w = rsqrt(r6.w);
          r7.yzw = r10.xyz * r6.www;
          r0.w = 1;
          r10.x = dot(r0.xyzw, ViewMatrix._m00_m10_m20_m30);
          r10.y = dot(r0.xyzw, ViewMatrix._m01_m11_m21_m31);
          r10.z = dot(r0.xyzw, ViewMatrix._m02_m12_m22_m32);
          r11.x = dot(r5.yzw, ViewMatrix._m00_m10_m20);
          r11.y = dot(r5.yzw, ViewMatrix._m01_m11_m21);
          r11.z = dot(r5.yzw, ViewMatrix._m02_m12_m22);
          r6.w = -0.00999999978 * r10.z;
          r6.w = max(0.00100000005, r6.w);
          r11.xyz = r11.xyz * r6.www + r10.xyz;
          r6.w = r7.w * 1000 + r11.z;
          r6.w = cmp(-0.00999999978 < r6.w);
          r8.x = -0.00999999978 + -r11.z;
          r8.x = r8.x / r7.w;
          r6.w = r6.w ? r8.x : 1000;
          r12.xyz = r7.yzw * r6.www + r11.xyz;
          r11.w = 1;
          r10.y = dot(r11.xyzw, ProjectToPixelMatrix._m00_m10_m20_m30);
          r10.x = dot(r11.xyzw, ProjectToPixelMatrix._m01_m11_m21_m31);
          r6.w = dot(r11.xyzw, ProjectToPixelMatrix._m03_m13_m23_m33);
          r12.w = 1;
          r11.x = dot(r12.xyzw, ProjectToPixelMatrix._m00_m10_m20_m30);
          r11.y = dot(r12.xyzw, ProjectToPixelMatrix._m01_m11_m21_m31);
          r7.y = dot(r12.xyzw, ProjectToPixelMatrix._m03_m13_m23_m33);
          r6.w = 1 / r6.w;
          r7.y = 1 / r7.y;
          r7.zw = r10.xy * r6.ww;
          r12.xy = r11.xy * r7.yy;
          r8.x = r11.z * r6.w;
          r9.y = r12.z * r7.y;
          r12.zw = float2(-0.5,-0.5) + ViewportSize.yx;
          r13.xy = cmp(r12.zw < r12.yx);
          r13.zw = cmp(r12.yx < float2(0.5,0.5));
          r13.zw = (int2)r13.zw | (int2)r13.xy;
          r12.zw = r13.xy ? -r12.zw : float2(-0.5,-0.5);
          r12.zw = r11.yx * r7.yy + r12.zw;
          r11.xy = r11.yx * r7.yy + -r7.zw;
          r11.xy = r12.zw / r11.xy;
          r10.w = r13.z ? r11.x : 0;
          r11.x = max(r10.w, r11.y);
          r10.w = r13.w ? r11.x : r10.w;
          r11.xy = r10.yx * r6.ww + -r12.xy;
          r11.xy = r10.ww * r11.xy + r12.xy;
          r11.w = -r7.y + r6.w;
          r7.y = r10.w * r11.w + r7.y;
          r11.w = r11.z * r6.w + -r9.y;
          r9.y = r10.w * r11.w + r9.y;
          r12.xy = r10.yx * r6.ww + -r11.xy;
          r10.w = dot(r12.xy, r12.xy);
          r10.w = cmp(r10.w < 9.99999975e-005);
          r12.xy = r10.yx * r6.ww + float2(0.00999999978,0.00999999978);
          r12.xy = r10.ww ? r12.xy : r11.xy;
          r12.zw = -r10.yx * r6.ww + r12.xy;
          r10.x = cmp(abs(r12.z) < abs(r12.w));
          r7.zw = r10.xx ? r7.zw : r7.wz;
          r11.xyw = r10.xxx ? r12.ywz : r12.xzw;
          r10.y = cmp(0 < r11.y);
          r10.w = cmp(r11.y < 0);
          r10.y = (int)-r10.y + (int)r10.w;
          r12.x = (int)r10.y;
          r10.y = r12.x / r11.y;
          r12.y = r10.y * r11.w;
          r9.y = -r11.z * r6.w + r9.y;
          r9.y = r9.y * r10.y;
          r7.y = r7.y + -r6.w;
          r7.y = r7.y * r10.y;
          r10.y = r12.x * r11.x;
          r10.w = cmp(r11.z >= 99999.7969);
          r11.x = cmp(100000 >= r11.z);
          r10.w = r10.w ? r11.x : 0;
          r11.y = 1;
          r13.x = r8.x;
          r13.y = r6.w;
          r12.zw = float2(-1,-1);
          r14.xy = r7.zw;
          r11.w = 0;
          r15.y = r11.z;
          r14.zw = r10.ww;
          while (true) {
            r15.z = r14.x * r12.x;
            r15.z = cmp(r10.y >= r15.z);
            r15.w = cmp((int)r11.w < 200);
            r15.z = r15.w ? r15.z : 0;
            r15.w = ~(int)r14.w;
            r15.z = r15.w ? r15.z : 0;
            if (r15.z == 0) break;
            r13.xz = r9.yy * float2(5,2.5) + r13.xx;
            r13.yw = r7.yy * float2(5,2.5) + r13.yy;
            r15.x = r13.z / r13.w;
            r13.z = cmp(r15.x < r15.y);
            r13.zw = r13.zz ? r15.xy : r15.yx;
            r12.zw = r10.xx ? r14.yx : r14.xy;
            r15.zw = ViewportSize.zw * r12.zw;
            r11.x = SSR__SSRDepthTexture__TexObj__.SampleLevel(Viewport__DepthVPSampler__SampObj___s, r15.zw, 0).x;
            r15.z = dot(r11.xy, InvProjectionMatrix._m22_m32);
            r11.x = dot(r11.xy, InvProjectionMatrix._m23_m33);
            r11.x = -r15.z / r11.x;
            r13.z = cmp(-r11.x >= r13.z);
            r11.x = -0.200000003 + -r11.x;
            r11.x = cmp(r13.w >= r11.x);
            r14.w = r11.x ? r13.z : 0;
            r14.xy = r12.xy * float2(5,5) + r14.xy;
            r11.w = (int)r11.w + 1;
            r14.xyz = r14.xyw;
            r15.y = r15.x;
          }
          if (r14.z != 0) {
            if (GameIsPaused == 0) {
              r7.yz = (int2)r12.zw;
              r7.yz = max(int2(0,0), (int2)r7.yz);
              r10.xy = (int2)ViewportSize.xy;
              r10.xy = (int2)r10.xy + int2(-1,-1);
              r11.xy = min((int2)r10.xy, (int2)r7.yz);
              r11.zw = float2(0,0);
              r7.yz = SSR__MotionVectorTexture__TexObj__.Load(r11.xyw).xy;
              r10.xy = cmp(r7.yz != float2(0,0));
              r6.w = r10.y ? r10.x : 0;
              if (r6.w != 0) {
                r6.w = cmp(1 < r7.y);
                r8.x = -2 + r7.y;
                r7.y = r6.w ? r8.x : r7.y;
              } else {
                r10.x = SSR__SSRDepthTexture__TexObj__.Load(r11.xyz).x;
                r10.y = 1;
                r6.w = dot(r10.xy, InvProjectionMatrix._m22_m32);
                r8.x = dot(r10.xy, InvProjectionMatrix._m23_m33);
                r6.w = -r6.w / r8.x;
                r10.xy = (int2)r11.xy;
                r10.xy = r10.xy * ViewportSize.zw + float2(-0.5,-0.5);
                r10.xy = CameraNearPlaneSize.xy * r10.xy;
                r11.xy = float2(1,-1) * r10.xy;
                r6.w = r6.w / CameraDistances.near;
                r11.z = -CameraDistances.near;
                r11.xyz = r11.xyz * r6.www;
                r11.w = 1;
                r10.x = dot(r11.xyzw, ProjectionMatrix._m00_m10_m20_m30);
                r10.y = dot(r11.xyzw, ProjectionMatrix._m01_m11_m21_m31);
                r6.w = dot(r11.xyzw, ProjectionMatrix._m03_m13_m23_m33);
                r12.x = dot(r11.xyzw, CameraSpaceToPreviousProjectedSpace._m00_m10_m20_m30);
                r12.y = dot(r11.xyzw, CameraSpaceToPreviousProjectedSpace._m01_m11_m21_m31);
                r8.x = dot(r11.xyzw, CameraSpaceToPreviousProjectedSpace._m03_m13_m23_m33);
                r8.x = max(9.99999975e-005, r8.x);
                r11.xy = r12.xy / r8.xx;
                r10.xy = r10.xy / r6.ww;
                r10.xy = r10.xy + -r11.xy;
                r7.yw = float2(0.5,0.5) * r10.xy;
                r7.z = -r7.w;
              }
            } else {
              r7.yz = float2(0,0);
            }
            r11.xy = r12.zw * ViewportSize.zw + -r7.yz;
            r7.yz = ViewportSize.xy * r11.xy;
            r13.xy = (int2)r7.yz;
            r13.zw = float2(0,0);
            r7.y = SSR__SSRDepthTexture__TexObj__.Load(r13.xyz).x;
            r7.z = 1;
            r6.w = dot(r7.yz, InvProjectionMatrix._m22_m32);
            r7.y = dot(r7.yz, InvProjectionMatrix._m23_m33);
            r6.w = -r6.w / r7.y;
            r6.w = cmp(r10.z >= -r6.w);
            r7.y = ~(int)r6.w;
            r7.zw = v0.xy + -r12.zw;
            r7.z = dot(r7.zw, r7.zw);
            r7.z = sqrt(r7.z);
            r7.w = cmp(r7.z >= 700);
            r7.z = -700 + r7.z;
            r7.z = -r7.z * 0.00333333341 + 1;
            r7.z = r7.w ? r7.z : 1;
            r11.zw = float2(1,1) + -r11.xy;
            r10.xyzw = saturate(float4(10,10,10,10) * r11.xzyw);
            r7.w = r10.x * r10.y;
            r7.w = r7.w * r10.z;
            r7.w = r7.w * r10.w;
            r7.z = r7.z * r7.w;
            r7.w = cmp(0.136999995 < r1.w);
            r1.w = -r1.w * 4 + 1;
            r1.w = max(0, r1.w);
            r1.w = r7.z * r1.w;
            r1.w = r7.w ? r1.w : r7.z;
            r1.w = r6.w ? r1.w : 1;
          } else {
            r11.xy = float2(0,0);
            r1.w = 0;
            r7.y = 0;
          }
          if (r7.y == 0) {
            r6.w = cmp(0 < r1.w);
            if (r6.w != 0) {
              r2.w = SSRTextureMaxMipIndex * r2.w;
              r7.yzw = SSR__SSRTexture__TexObj__.SampleLevel(ColorClamp_s, r11.xy, r2.w).xyz;
            } else {
              r7.yzw = float3(0,0,0);
            }
          } else {
            r7.yzw = float3(0,0,0);
            r1.w = 0;
          }
        } else {
          r7.yzw = float3(0,0,0);
          r1.w = 0;
        }
      } else {
        r7.yzw = float3(0,0,0);
        r1.w = 0;
      }
      r2.w = cmp(0 < r1.w);
      if (r2.w != 0) {
        r10.xyz = r7.yzw / ExposureScale;
        r2.w = cmp(r1.w < 1);
        if (r2.w != 0) {
          if (UseOnlySkyReflection == 0) {
            r0.w = 1;
            r11.xyzw = float4(0,0,0,0);
            r2.w = 1;
            r6.w = 0;
            while (true) {
              r7.y = cmp((uint)r6.w >= 15);
              if (r7.y != 0) break;
              r7.y = (int)r6.w * 7;
              r12.x = dot(r0.xyzw, ReflectionVolumes[r6.w]._m00_m10_m20_m30);
              r12.y = dot(r0.xyzw, ReflectionVolumes[r6.w]._m01_m11_m21_m31);
              r12.z = dot(r0.xyzw, ReflectionVolumes[r6.w]._m02_m12_m22_m32);
              r13.xyz = cmp(r12.xyz >= float3(0,0,0));
              r13.xyz = r13.xyz ? ReflectionVolumes[r6.w].xyz : ReflectionVolumes[r6.w].xyz;
              r12.xyz = float3(1,1,1) + -abs(r12.xyz);
              r12.xyz = saturate(r12.xyz * r13.xyz);
              r7.z = r12.x * r12.y;
              r7.z = r7.z * r12.z;
              r7.w = cmp(0 < r7.z);
              if (r7.w != 0) {
                r12.x = dot(r6.xyz, ReflectionVolumes[r6.w]._m00_m10_m20);
                r12.y = dot(r6.xyz, ReflectionVolumes[r6.w]._m01_m11_m21);
                r12.z = dot(r6.xyz, ReflectionVolumes[r6.w]._m02_m12_m22);
                r7.z = ReflectionVolumes[r6.w] * r7.z;
                r12.w = ReflectionVolumes[r6.w];
                r12.xyzw = Viewport__DynamicCubeMapReflectionTextureArray.SampleLevel(ColorWrap_s, r12.xyzw, r5.x).xyzw;
                r12.xyzw = ReflectionVolumes[r6.w].xxxy * r12.xyzw;
                r7.y = min(r7.z, r2.w);
                r12.xyzw = r12.xyzw * r7.yyyy + r11.xyzw;
                r7.y = -r7.y + r2.w;
                r7.z = cmp(0 >= r7.y);
                if (r7.z != 0) {
                  r11.xyzw = r12.xyzw;
                  r2.w = r7.y;
                  break;
                }
                r11.xyzw = r12.xyzw;
                r2.w = r7.y;
              }
              r6.w = (int)r6.w + 1;
            }
          } else {
            r11.xyzw = float4(0,0,0,0);
            r2.w = 1;
          }
          r6.w = r11.w + r2.w;
          r6.w = r6.w * r1.y;
          r7.y = cmp(0 < r6.w);
          if (r7.y != 0) {
            r7.y = r6.z + -abs(r6.z);
            r2.w = r2.w * r7.y + abs(r6.z);
            r2.w = r2.w * 2 + 2;
            r7.yz = float2(-1,1) / r2.ww;
            r7.yz = r7.yz * r6.yx;
            r7.yz = r7.yz * float2(0.949999988,0.949999988) + float2(0.5,0.5);
            r7.yzw = Viewport__SkyParaboloidTexture.SampleLevel(ColorClamp_s, r7.yz, r3.w).xyz;
            r12.xyz = saturate(r7.yzw);
            r7.yzw = UseOnlySkyReflection ? r12.xyz : r7.yzw;
            r7.yzw = r7.yzw / ExposureScale;
            r11.xyz = r7.yzw * r6.www + r11.xyz;
          }
          r1.w = saturate(r1.w);
          r7.yzw = -r11.xyz + r10.xyz;
          r10.xyz = r1.www * r7.yzw + r11.xyz;
        }
      } else {
        if (UseOnlySkyReflection == 0) {
          r0.w = 1;
          r10.xyzw = float4(0,0,0,0);
          r1.w = 1;
          r2.w = 0;
          while (true) {
            r6.w = cmp((uint)r2.w >= 15);
            if (r6.w != 0) break;
            r6.w = (int)r2.w * 7;
            r11.x = dot(r0.xyzw, ReflectionVolumes[r2.w]._m00_m10_m20_m30);
            r11.y = dot(r0.xyzw, ReflectionVolumes[r2.w]._m01_m11_m21_m31);
            r11.z = dot(r0.xyzw, ReflectionVolumes[r2.w]._m02_m12_m22_m32);
            r7.yzw = cmp(r11.xyz >= float3(0,0,0));
            r7.yzw = r7.yzw ? ReflectionVolumes[r2.w].xyz : ReflectionVolumes[r2.w].xyz;
            r11.xyz = float3(1,1,1) + -abs(r11.xyz);
            r7.yzw = saturate(r11.xyz * r7.yzw);
            r7.y = r7.y * r7.z;
            r7.y = r7.y * r7.w;
            r7.z = cmp(0 < r7.y);
            if (r7.z != 0) {
              r11.x = dot(r6.xyz, ReflectionVolumes[r2.w]._m00_m10_m20);
              r11.y = dot(r6.xyz, ReflectionVolumes[r2.w]._m01_m11_m21);
              r11.z = dot(r6.xyz, ReflectionVolumes[r2.w]._m02_m12_m22);
              r7.y = ReflectionVolumes[r2.w] * r7.y;
              r11.w = ReflectionVolumes[r2.w];
              r11.xyzw = Viewport__DynamicCubeMapReflectionTextureArray.SampleLevel(ColorWrap_s, r11.xyzw, r5.x).xyzw;
              r11.xyzw = ReflectionVolumes[r2.w].xxxy * r11.xyzw;
              r6.w = min(r7.y, r1.w);
              r11.xyzw = r11.xyzw * r6.wwww + r10.xyzw;
              r6.w = -r6.w + r1.w;
              r7.y = cmp(0 >= r6.w);
              if (r7.y != 0) {
                r10.xyzw = r11.xyzw;
                r1.w = r6.w;
                break;
              }
              r10.xyzw = r11.xyzw;
              r1.w = r6.w;
            }
            r2.w = (int)r2.w + 1;
          }
        } else {
          r10.xyzw = float4(0,0,0,0);
          r1.w = 1;
        }
        r0.x = r10.w + r1.w;
        r0.x = r0.x * r1.y;
        r0.y = cmp(0 < r0.x);
        if (r0.y != 0) {
          r0.y = r6.z + -abs(r6.z);
          r0.y = r1.w * r0.y + abs(r6.z);
          r0.y = r0.y * 2 + 2;
          r0.yz = float2(-1,1) / r0.yy;
          r0.yz = r6.yx * r0.yz;
          r0.yz = r0.yz * float2(0.949999988,0.949999988) + float2(0.5,0.5);
          r0.yzw = Viewport__SkyParaboloidTexture.SampleLevel(ColorClamp_s, r0.yz, r3.w).xyz;
          r6.xyz = saturate(r0.yzw);
          r0.yzw = UseOnlySkyReflection ? r6.xyz : r0.yzw;
          r0.yzw = r0.yzw / ExposureScale;
          r10.xyz = r0.yzw * r0.xxx + r10.xyz;
        }
      }
      r0.x = 0.0799999982 * r4.z;
      r0.yzw = -r4.zzz * float3(0.0799999982,0.0799999982,0.0799999982) + r9.xzw;
      r0.xyz = r4.xxx * r0.yzw + r0.xxx;
      r0.w = dot(r0.xyz, float3(0.333333343,0.333333343,0.333333343));
      r0.w = saturate(50 * r0.w);
      r4.w = saturate(dot(r5.yzw, r8.yzw));
      r1.yw = Global__IBLBRDFTexture.SampleLevel(ColorClamp_s, r4.wy, 0).xy;
      r0.xyz = r0.xyz * r1.yyy + r1.www;
      r0.xyz = r0.xyz * r0.www;
      r0.xyz = r10.xyz * r0.xyz;
      r3.xyz = r0.xyz * r7.xxx;
      r1.z = dot(r3.xyz, float3(0.212639004,0.715168655,0.0721923187));
    }
  }
  r0.x = r1.x + r1.z;
  r0.yzw = r3.xyz + r2.xyz;
  r0.xyzw = ExposureScale * r0.xyzw;
  r0.xyzw = max(float4(0,0,0,0), r0.xyzw);
  o0.xyzw = min(float4(64512,64512,64512,64512), r0.yzwx);
  return;

}

/****************************** COMPILE ERRORS ******************************
C:\games\WATCH_DOGS2\bin\ShaderFixes\81bf85f12e2873bc-ps_replace.txt(1423,34-74): error X3018: invalid subscript '_m00_m10_m20_m30'
C:\games\WATCH_DOGS2\bin\ShaderFixes\81bf85f12e2873bc-ps_replace.txt(1423,21-75): error X3013: 'dot': no matching 2 parameter intrinsic function
C:\games\WATCH_DOGS2\bin\ShaderFixes\81bf85f12e2873bc-ps_replace.txt(1423,21-75): error X3013: Possible intrinsic functions are:
C:\games\WATCH_DOGS2\bin\ShaderFixes\81bf85f12e2873bc-ps_replace.txt(1423,21-75): error X3013:     dot(floatM|halfM|doubleM|min10floatM|min16floatM|intM|uintM|min12intM|min16intM|min16uintM, floatM|halfM|doubleM|min10floatM|min16floatM|intM|uintM|min12intM|min16intM|min16uintM)

compilation failed; no code produced
****************************** COMPILE ERRORS ******************************/
