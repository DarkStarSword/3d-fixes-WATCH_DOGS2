// Skydome - sun (Ansel)
// VS 873ae49b8ed37c3a (VS is used for other effects as well, do not adjust there)
// ---- Created with 3Dmigoto v1.2.42 on Tue Dec 27 11:06:40 2016

cbuffer Global : register(b0)
{
  float4 EnvironmentLuminances : packoffset(c0);
  float4 FakeEarthShadowPlane : packoffset(c1);
  float4 GlobalLightsIntensity : packoffset(c2);
  float4 GlobalWeatherControl : packoffset(c3);
  float4 MaterialWetnessParams[22] : packoffset(c4);
  float4 WindGlobalTurbulence : packoffset(c26);
  float4 WindVelocityTextureCoverage : packoffset(c27);
  float4 WorldLoadingRingSizes[2] : packoffset(c28);

  struct
  {
    float debugValue0;
    float debugValue1;
    float debugValue2;
    float debugValue3;
  } DebugValues : packoffset(c30);

  float3 SunShadowDirection : packoffset(c31);
  float CrowdAnimationStartTime : packoffset(c31.w);
  float3 WindGlobalNoiseTextureChannelSel : packoffset(c32);
  float GlobalReflectionTextureBlendRatio : packoffset(c32.w);
  float3 WindGlobalNoiseTextureCoverage : packoffset(c33);
  float GlobalWaterLevel : packoffset(c33.w);

  struct
  {
    float time;
    float staticReflectionIntensity;
    float gameDeltaTime;
  } GlobalScalars : packoffset(c34);

  float RcpStaticReflectionExposureScale : packoffset(c34.w);
  float2 GlobalNoiseSampler2DSquareSize : packoffset(c35);
  float SandstormIntensity : packoffset(c35.z);
  float StaticReflectionIntensityDest : packoffset(c35.w);
  float2 WindNoiseDeltaVector : packoffset(c36);
  float TimeOfDay : packoffset(c36.z);
  float VertexAOIntensity : packoffset(c36.w);
  float2 WindVector : packoffset(c37);
}

cbuffer Viewport : register(b1)
{
  float4 CameraNearPlaneSize : packoffset(c0);
  float4x4 DepthTextureTransform : packoffset(c1);
  float4 FSMClipPlanes : packoffset(c5);
  float4 FacettedShadowCastParams : packoffset(c6);
  float4 FogValues0 : packoffset(c7);
  float4 FogValues1 : packoffset(c8);
  float4x4 InvProjectionMatrix : packoffset(c9);
  float4x4 InvProjectionMatrixDepth : packoffset(c13);
  float4x3 InvViewMatrix : packoffset(c17);
  float4x4 PreviousViewProjectionMatrix : packoffset(c20);
  float4x4 ProjectionMatrix : packoffset(c24);
  float4 RainOcclusionFadeParams : packoffset(c28);
  float4x4 RainOcclusionProjectionMatrix : packoffset(c29);
  float4 RainOcclusionShadowMapSize : packoffset(c33);
  float4 ReflectionVolumeDebugColors[15] : packoffset(c34);
  float4 VPosOffset : packoffset(c49);
  float4 VPosScale : packoffset(c50);
  float4x3 ViewMatrix : packoffset(c51);
  float4x4 ViewProjectionMatrix : packoffset(c54);
  float4x4 ViewRotProjectionMatrix : packoffset(c58);
  float4x4 ViewRotProjectionMatrixPure : packoffset(c62);
  float4 ViewportSize : packoffset(c66);

  struct
  {
    float near;
    float far;
    float view;
    float oneOverView;
  } CameraDistances : packoffset(c67);


  struct
  {
    float4x4 inverseTransform;
    float3 rcpFadeRangePositive;
    float textureArrayIndexAsFloat;
    float3 rcpFadeRangeNegative;
    float fadeFactor;
    float2 multipliers;
    uint parallaxCorrection;
    float padding0;
  } ReflectionVolumes[15] : packoffset(c68);

  float3 CameraDirection : packoffset(c173);
  float DefaultReflectionTextureArrayIndexAsFloat : packoffset(c173.w);
  float3 CameraPosition : packoffset(c174);
  float DynamicCubeMapReflectionTextureMaxMipIndex : packoffset(c174.w);
  float3 CullingCameraPosition : packoffset(c175);
  float ExposedWhitePointOverExposureScale : packoffset(c175.w);
  float3 FogColorVector : packoffset(c176);
  float ExposureScale : packoffset(c176.w);
  float3 OppositeFogColorDelta : packoffset(c177);
  float MaxParaboloidReflectionMipIndex : packoffset(c177.w);
  float3 SideFogColor : packoffset(c178);
  float MaxStaticReflectionMipIndex : packoffset(c178.w);
  float3 SunFogColorDelta : packoffset(c179);
  float MeasuredExposureScale : packoffset(c179.w);
  float3 TemporalFilteringParams : packoffset(c180);
  float RaindropRippleScale : packoffset(c180.w);
  float3 UncompressDepthWeights : packoffset(c181);
  float ReflectionScaleDistanceMul : packoffset(c181.w);
  float3 UncompressDepthWeightsWS : packoffset(c182);
  float ReflectionScaleStrength : packoffset(c182.w);
  float3 ViewPoint : packoffset(c183);
  float SkyParaboloidTextureMaxMipIndex : packoffset(c183.w);
  float2 DefaultReflectionMultipliers : packoffset(c184);
  bool UseOnlySkyReflection : packoffset(c184.z);
  float2 ReflectionGIControl : packoffset(c185);
  uint2 SelectedPixel : packoffset(c185.z);
}

cbuffer SkyBuffer : register(b2)
{

  struct
  {
    float4 m_lightIrradiance;
    float4 m_lightIrradianceWithoutCloudsCoverage;
    float4 m_lightDirection;
    float4 m_cloudLightVector;
    float4 m_cloudIrradiance;
    float4 m_environmentIrradianceSHRed;
    float4 m_environmentIrradianceSHGreen;
    float4 m_environmentIrradianceSHBlue;
    float4 m_environmentIrradianceAverage;
    float4 m_giDefaultProbeIrradiance[3];
    float4 m_giDefaultProbeTint[3];
    float4 m_giDirectEnvironmentIrradiance[3];
    float4 m_giBouncedEnvironmentIrradiance[4];
    float4 m_cloudAndSkyIrradianceSH[9];
    float4 m_skyOnlyIrradianceSH[9];
  } SkyLightStruct : packoffset(c0);

}

cbuffer SkyRenderer : register(b3)
{
  float4 AerialPerscpectiveFogParams : packoffset(c0);
  float4 ArtisticPatchForBrunetonSky : packoffset(c1);
  float4x4 SkyDomeInvViewMatrix : packoffset(c2);
  float4 SkyMoonPositionAndIntensity : packoffset(c6);
  float4 SkyParaboloidTextureSize : packoffset(c7);
  float4 SkyStarsIntensity : packoffset(c8);
  float4 SkySunPositionAndIrradiance : packoffset(c9);
  float4 StarDecalParams : packoffset(c10);
  float4 SunColorHack : packoffset(c11);
  float4 TopocentricXAxis : packoffset(c12);
  float4 TopocentricYAxis : packoffset(c13);
  float4 TopocentricZAxis : packoffset(c14);
  float3 MoonSkyColor : packoffset(c15);
  float MoonCloudIntensity : packoffset(c15.w);
  float3 MoonXAxis : packoffset(c16);
  float SkyIntensityForMainView : packoffset(c16.w);
  float3 MoonYAxis : packoffset(c17);
  float SkyMoonInScattering : packoffset(c17.w);
  float3 MoonZAxis : packoffset(c18);
  float SkyMoonMIETurbidity : packoffset(c18.w);
  float3 SkyMoonColor : packoffset(c19);
  float SkyMoonSpriteIntensity : packoffset(c19.w);
  float3 SkyMoonUnlitColor : packoffset(c20);
  float SkyMoonTurbidity : packoffset(c20.w);
  float3 SkyNightSkyHorizonColor : packoffset(c21);
  float SkyNightSkyCrossFadeThreshold : packoffset(c21.w);
  float3 SkyNightSkyTopColor : packoffset(c22);
  float SkyNightSkyGIFactor : packoffset(c22.w);
  float3 SkySunAndMoonTanCosAngle : packoffset(c23);
  float SkyNightSkyGradientGamma : packoffset(c23.w);
  float3 SunDiscDirection : packoffset(c24);
  float SkyNightSkyIntensity : packoffset(c24.w);
  float2 SkCameraSettings : packoffset(c25);
  float SkySunBelowHorizonFactor : packoffset(c25.z);
  float SkySunMoonCrossFade : packoffset(c25.w);
  float2 SkyFakeSunDirectionForMoonPhase : packoffset(c26);
  float SkySunTurbidity : packoffset(c26.z);
  float2 SkyOffScreenCloudLayersInvScale : packoffset(c27);
}

SamplerState SkyRenderer__ExtinctionTexture__SampObj___s : register(s0);
SamplerState SkyRenderer__MoonInscattererTexture__SampObj___s : register(s1);
SamplerState SkyRenderer__SunInscattererTexture__SampObj___s : register(s2);
Texture2D<float4> SkyRenderer__ExtinctionTexture__TexObj__ : register(t0);
Texture2D<float4> SkyRenderer__MoonInscattererTexture__TexObj__ : register(t1);
Texture2D<float4> SkyRenderer__NoiseTexture__TexObj__ : register(t2);
Texture2D<float4> SkyRenderer__SunInscattererTexture__TexObj__ : register(t3);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  linear centroid float2 v0 : TEXCOORD0,
  float4 v1 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

// Adjust sun + glow to infinity (could adjust glow in an earlier shader, but
// the sun is drawn here):
float4 s = StereoParams.Load(0);
v0.x -= s.x / 2;

  r0.xy = v0.xy * float2(2,-2) + float2(-1,1);
  r0.zw = float2(1,1);
  r1.x = dot(r0.xyww, InvProjectionMatrix._m00_m10_m20_m30);
  r1.y = dot(r0.xyww, InvProjectionMatrix._m01_m11_m21_m31);
  r0.x = dot(r0.xyzw, InvProjectionMatrix._m03_m13_m23_m33);
  r0.xy = r1.xy / r0.xx;
  r0.z = -CameraDistances.near;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r1.x = dot(r0.xyz, SkyDomeInvViewMatrix._m00_m10_m20);
  r1.y = dot(r0.xyz, SkyDomeInvViewMatrix._m01_m11_m21);
  r1.z = dot(r0.xyz, SkyDomeInvViewMatrix._m02_m12_m22);
  r0.z = SkCameraSettings.y + -GlobalWaterLevel;
  r0.w = r0.z * r1.z + r0.z;
  r0.w = r0.w * r0.w;
  r0.w = SkCameraSettings.x * SkCameraSettings.x + -r0.w;
  r1.w = r0.z * r1.z;
  r0.w = r1.w * r1.w + r0.w;
  r0.w = sqrt(r0.w);
  r0.xy = float2(0,0);
  r0.xyz = r1.xyz * r0.www + r0.xyz;
  r1.xy = float2(0,0);
  r1.z = GlobalWaterLevel;
  r0.xyz = -r1.xyz + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r1.x = saturate(r0.z * r0.w + 0.0199999996);
  r0.xyz = r0.xyz * r0.www;
  r1.x = log2(r1.x);
  r1.x = SkyNightSkyGradientGamma * r1.x;
  r1.x = exp2(r1.x);
  r1.yzw = SkyNightSkyTopColor.xyz + -SkyNightSkyHorizonColor.xyz;
  r1.xyz = r1.xxx * r1.yzw + SkyNightSkyHorizonColor.xyz;
  r0.w = max(0, r0.z);
  r0.z = dot(r0.xyw, r0.xyw);
  r0.z = rsqrt(r0.z);
  r0.xyz = r0.xyw * r0.zzz;
  r0.w = dot(SkySunPositionAndIrradiance.xyz, r0.xyz);
  r0.x = dot(SunDiscDirection.xyz, r0.xyz);
  r0.x = SkySunAndMoonTanCosAngle.y + r0.x;
  r0.x = SkySunAndMoonTanCosAngle.z * r0.x;
  r0.x = saturate(0.5 * r0.x);
  r0.y = r0.w * 0.5 + 0.5;
  r0.y = log2(abs(r0.y));
  r0.y = ArtisticPatchForBrunetonSky.y * r0.y;
  r0.y = exp2(r0.y);
  r0.y = -1 + r0.y;
  r0.y = ArtisticPatchForBrunetonSky.x * r0.y + 1;
  r2.xyz = SkyRenderer__SunInscattererTexture__TexObj__.Sample(SkyRenderer__SunInscattererTexture__SampObj___s, v0.xy).xyz;
  r0.yzw = r2.xyz * r0.yyy;
  r1.w = saturate(SkyMoonPositionAndIntensity.z / SkyNightSkyCrossFadeThreshold);
  r1.w = -20 * r1.w;
  r1.w = exp2(r1.w);
  r1.w = SkyMoonPositionAndIntensity.w * r1.w;
  r2.xyz = SkyRenderer__MoonInscattererTexture__TexObj__.Sample(SkyRenderer__MoonInscattererTexture__SampObj___s, v0.xy).xyz;
  r2.xyz = r2.xyz * r1.www;
  r1.w = saturate(SkySunPositionAndIrradiance.z / SkyNightSkyCrossFadeThreshold);
  r1.w = -20 * r1.w;
  r1.w = exp2(r1.w);
  r1.w = -1 + r1.w;
  r1.w = SkySunBelowHorizonFactor * r1.w + 1;
  r1.w = SkySunPositionAndIrradiance.w * r1.w;
  r0.yzw = r0.yzw * r1.www + r2.xyz;
  r0.yzw = r1.xyz * SkyNightSkyIntensity + r0.yzw;
  r1.x = r0.x * -2 + 3;
  r0.x = r0.x * r0.x;
  r0.x = r1.x * r0.x;
  r0.x = 10 * r0.x;
  r0.x = min(1, r0.x);
  r1.xyz = SkyRenderer__ExtinctionTexture__TexObj__.Sample(SkyRenderer__ExtinctionTexture__SampObj___s, v0.xy).xyz;
  r1.xyz = r1.xyz * r0.xxx;
  r1.xyz = r1.xyz * r1.www;
  r2.xyz = float3(9.99999975e-006,9.99999975e-006,9.99999975e-006) + SkyLightStruct.m_lightIrradiance.xyz;
  r0.x = dot(r2.xyz, r2.xyz);
  r0.x = rsqrt(r0.x);
  r2.xyz = r2.xyz * r0.xxx;
  r1.xyz = r2.xyz * r1.xyz;
  r0.xyz = r1.xyz * SunColorHack.www + r0.yzw;
  r0.xyz = ExposureScale * r0.xyz;
  r1.xy = (uint2)v1.xy;
  r1.xy = (int2)r1.xy & int2(127,127);
  r1.zw = float2(0,0);
  r0.w = SkyRenderer__NoiseTexture__TexObj__.Load(r1.xyz).x;
  r1.xyz = r0.xyz * r0.www;
  r0.xyz = float3(0.925000012,0.925000012,0.925000012) * r0.xyz;
  r0.xyz = r1.xyz * float3(0.075000003,0.075000003,0.075000003) + r0.xyz;
  r0.xyz = SkyIntensityForMainView * r0.xyz;
  r0.w = dot(r0.xyz, float3(0.212639004,0.715168655,0.0721923187));
  r0.xyz = max(float3(6.09755989e-005,6.09755989e-005,6.09755989e-005), r0.xyz);
  o0.xyz = min(float3(64512,64512,64512), r0.xyz);
  r0.x = max(6.09755989e-005, r0.w);
  o0.w = min(64512, r0.x);
  return;
}
