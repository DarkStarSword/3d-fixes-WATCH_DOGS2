// ---- HUD ELEMENT Brances in skill-menue

cbuffer Viewport : register(b0)
{
  float4 CameraNearPlaneSize : packoffset(c0);
  float4x4 DepthTextureTransform : packoffset(c1);
  float4 FSMClipPlanes : packoffset(c5);
  float4 FacettedShadowCastParams : packoffset(c6);
  float4 FogValues0 : packoffset(c7);
  float4 FogValues1 : packoffset(c8);
  float4x4 InvProjectionMatrix : packoffset(c9);
  float4x4 InvProjectionMatrixDepth : packoffset(c13);
  float4x3 InvViewMatrix : packoffset(c17);
  float4x4 PreviousViewProjectionMatrix : packoffset(c20);
  float4x4 ProjectionMatrix : packoffset(c24);
  float4 RainOcclusionFadeParams : packoffset(c28);
  float4x4 RainOcclusionProjectionMatrix : packoffset(c29);
  float4 RainOcclusionShadowMapSize : packoffset(c33);
  float4 ReflectionVolumeDebugColors[15] : packoffset(c34);
  float4 VPosOffset : packoffset(c49);
  float4 VPosScale : packoffset(c50);
  float4x3 ViewMatrix : packoffset(c51);
  float4x4 ViewProjectionMatrix : packoffset(c54);
  float4x4 ViewRotProjectionMatrix : packoffset(c58);
  float4x4 ViewRotProjectionMatrixPure : packoffset(c62);
  float4 ViewportSize : packoffset(c66);

  struct
  {
    float near;
    float far;
    float view;
    float oneOverView;
  } CameraDistances : packoffset(c67);


  struct
  {
    float4x4 inverseTransform;
    float3 rcpFadeRangePositive;
    float textureArrayIndexAsFloat;
    float3 rcpFadeRangeNegative;
    float fadeFactor;
    float2 multipliers;
    uint parallaxCorrection;
    float padding0;
  } ReflectionVolumes[15] : packoffset(c68);

  float3 CameraDirection : packoffset(c173);
  float DefaultReflectionTextureArrayIndexAsFloat : packoffset(c173.w);
  float3 CameraPosition : packoffset(c174);
  float DynamicCubeMapReflectionTextureMaxMipIndex : packoffset(c174.w);
  float3 CullingCameraPosition : packoffset(c175);
  float ExposedWhitePointOverExposureScale : packoffset(c175.w);
  float3 FogColorVector : packoffset(c176);
  float ExposureScale : packoffset(c176.w);
  float3 OppositeFogColorDelta : packoffset(c177);
  float MaxParaboloidReflectionMipIndex : packoffset(c177.w);
  float3 SideFogColor : packoffset(c178);
  float MaxStaticReflectionMipIndex : packoffset(c178.w);
  float3 SunFogColorDelta : packoffset(c179);
  float MeasuredExposureScale : packoffset(c179.w);
  float3 TemporalFilteringParams : packoffset(c180);
  float RaindropRippleScale : packoffset(c180.w);
  float3 UncompressDepthWeights : packoffset(c181);
  float ReflectionScaleDistanceMul : packoffset(c181.w);
  float3 UncompressDepthWeightsWS : packoffset(c182);
  float ReflectionScaleStrength : packoffset(c182.w);
  float3 ViewPoint : packoffset(c183);
  float SkyParaboloidTextureMaxMipIndex : packoffset(c183.w);
  float2 DefaultReflectionMultipliers : packoffset(c184);
  bool UseOnlySkyReflection : packoffset(c184.z);
  float2 ReflectionGIControl : packoffset(c185);
  uint2 SelectedPixel : packoffset(c185.z);
}

cbuffer Primitive : register(b1)
{
  float4 GeometryPickingID : packoffset(c0);
  float4 MaterialPickingID : packoffset(c1);
  float4 ModelPickingID : packoffset(c2);
  float4 PickingID : packoffset(c3);
  float4 ColorMultiplier : packoffset(c4);
  float4x4 SecondTextureUVTransform : packoffset(c5);
  float4x4 Transform : packoffset(c9);
  float4x4 UVTransform : packoffset(c13);
  float4 VideoTextureUnpack[8] : packoffset(c17);
  float3 GammaBrightnessContrastParams : packoffset(c25);
  float CustomExposureScale : packoffset(c25.w);
  float MipLevel : packoffset(c26);
  float Sharpness : packoffset(c26.y);
  float VolumeTextureSizeZ : packoffset(c26.z);
  bool SecondTextureAdditive : packoffset(c26.w);
  bool TextureIsOffscreenComposited : packoffset(c27);
}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "hud.hlsl"

void main( 
  float4 v0 : position0,
  float4 v1 : color1,
  float4 v2 : texcoord2,
  uint v3 : SV_VertexID0,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD1,
  out float4 o2 : TEXCOORD2,
  out float2 o3 : TEXCOORD3,
  out float4 o4 : SV_Position0)
{
// Needs manual fix for instruction: 
// unknown dcl_: dcl_input_sgv v3.x, vertex_id
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  o0.xyzw = v1.zyxw;
  r0.x = (int)v2.w & 255;
  r0.x = (uint)r0.x;
  r0.x = ViewportSize.y * r0.x;
  r0.x = 0.000347222231 * r0.x;
  r0.x = max(1, r0.x);
  r0.x = min(32, r0.x);
  r0.y = -0.5 + r0.x;
  o1.w = 0.03125 * r0.y;
  r0.y = r0.x * 0.5 + 1;
  r1.x = dot(v0.xyzw, Transform._m00_m10_m20_m30);
  r1.y = dot(v0.xyzw, Transform._m01_m11_m21_m31);
  r0.zw = ViewportSize.xy * r1.xy;
  r1.zw = v2.xy * ViewportSize.xy + -r0.zw;
  r2.x = dot(r1.zw, r1.zw);
  r2.x = sqrt(r2.x);
  r3.xy = r1.zw / r2.xx;
  r0.x = r2.x + -r0.x;
  r0.x = 0.5 * r0.x;
  o2.w = r0.x / r0.y;
  r3.z = -r3.x;
  r0.x = dot(r3.yz, r0.zw);
  r0.zw = v2.xy * ViewportSize.xy + r0.zw;
  r0.zw = float2(0.5,0.5) * r0.zw;
  r0.z = dot(r3.xy, r0.zw);
  r2.z = -r0.z;
  r3.w = -r0.x;
  o1.xyz = r3.yzw / r0.yyy;
  r2.xy = r3.xy;
  o2.xyz = r2.xyz / r0.yyy;
  r0.xy = r2.xy * r0.yy;
  r1.yz = r1.xy * ViewportSize.xy + -r3.xy;
  r2.yz = v2.xy * ViewportSize.xy + r2.xy;
  r1.x = dot(v0.xyzw, Transform._m02_m12_m22_m32);
  r3.xy = (int2)v3.xx & int2(3,2);
  r3.xz = cmp((int2)r3.xx == int2(1,2));
  r0.w = (int)r3.z | (int)r3.x;
  r2.x = v2.z;
  r1.xyz = r0.www ? r2.xyz : r1.xyz;
  r0.z = -r0.x;
  r0.xw = r1.yz + r0.yz;
  r0.yz = r1.yz + -r0.yz;
  o4.z = r1.x;
  r0.xy = r3.yy ? r0.xw : r0.yz;
  o3.xy = r0.xy;
  r0.xy = ViewportSize.zw * r0.xy;
  r0.xy = r0.xy * float2(2,2) + float2(-1,-1);
  o4.xy = float2(1,-1) * r0.xy;
  o4.w = 1;


float4 s = StereoParams.Load(0);
if (o4.w == 1)
	to_hud_depth(o4);

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.52 on Fri Jan 06 10:31:35 2017
//
//
// Buffer Definitions: 
//
// cbuffer Viewport
// {
//
//   float4 CameraNearPlaneSize;        // Offset:    0 Size:    16 [unused]
//   float4x4 DepthTextureTransform;    // Offset:   16 Size:    64 [unused]
//   float4 FSMClipPlanes;              // Offset:   80 Size:    16 [unused]
//   float4 FacettedShadowCastParams;   // Offset:   96 Size:    16 [unused]
//   float4 FogValues0;                 // Offset:  112 Size:    16 [unused]
//   float4 FogValues1;                 // Offset:  128 Size:    16 [unused]
//   float4x4 InvProjectionMatrix;      // Offset:  144 Size:    64 [unused]
//   float4x4 InvProjectionMatrixDepth; // Offset:  208 Size:    64 [unused]
//   float4x3 InvViewMatrix;            // Offset:  272 Size:    48 [unused]
//   float4x4 PreviousViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4x4 ProjectionMatrix;         // Offset:  384 Size:    64 [unused]
//   float4 RainOcclusionFadeParams;    // Offset:  448 Size:    16 [unused]
//   float4x4 RainOcclusionProjectionMatrix;// Offset:  464 Size:    64 [unused]
//   float4 RainOcclusionShadowMapSize; // Offset:  528 Size:    16 [unused]
//   float4 ReflectionVolumeDebugColors[15];// Offset:  544 Size:   240 [unused]
//   float4 VPosOffset;                 // Offset:  784 Size:    16 [unused]
//   float4 VPosScale;                  // Offset:  800 Size:    16 [unused]
//   float4x3 ViewMatrix;               // Offset:  816 Size:    48 [unused]
//   float4x4 ViewProjectionMatrix;     // Offset:  864 Size:    64 [unused]
//   float4x4 ViewRotProjectionMatrix;  // Offset:  928 Size:    64 [unused]
//   float4x4 ViewRotProjectionMatrixPure;// Offset:  992 Size:    64 [unused]
//   float4 ViewportSize;               // Offset: 1056 Size:    16
//   
//   struct SCameraDistances
//   {
//       
//       float near;                    // Offset: 1072
//       float far;                     // Offset: 1076
//       float view;                    // Offset: 1080
//       float oneOverView;             // Offset: 1084
//
//   } CameraDistances;                 // Offset: 1072 Size:    16 [unused]
//   
//   struct SReflectionVolume
//   {
//       
//       float4x4 inverseTransform;     // Offset: 1088
//       float3 rcpFadeRangePositive;   // Offset: 1152
//       float textureArrayIndexAsFloat;// Offset: 1164
//       float3 rcpFadeRangeNegative;   // Offset: 1168
//       float fadeFactor;              // Offset: 1180
//       float2 multipliers;            // Offset: 1184
//       uint parallaxCorrection;       // Offset: 1192
//       float padding0;                // Offset: 1196
//
//   } ReflectionVolumes[15];           // Offset: 1088 Size:  1680 [unused]
//   float3 CameraDirection;            // Offset: 2768 Size:    12 [unused]
//   float DefaultReflectionTextureArrayIndexAsFloat;// Offset: 2780 Size:     4 [unused]
//   float3 CameraPosition;             // Offset: 2784 Size:    12 [unused]
//   float DynamicCubeMapReflectionTextureMaxMipIndex;// Offset: 2796 Size:     4 [unused]
//   float3 CullingCameraPosition;      // Offset: 2800 Size:    12 [unused]
//   float ExposedWhitePointOverExposureScale;// Offset: 2812 Size:     4 [unused]
//   float3 FogColorVector;             // Offset: 2816 Size:    12 [unused]
//   float ExposureScale;               // Offset: 2828 Size:     4 [unused]
//   float3 OppositeFogColorDelta;      // Offset: 2832 Size:    12 [unused]
//   float MaxParaboloidReflectionMipIndex;// Offset: 2844 Size:     4 [unused]
//   float3 SideFogColor;               // Offset: 2848 Size:    12 [unused]
//   float MaxStaticReflectionMipIndex; // Offset: 2860 Size:     4 [unused]
//   float3 SunFogColorDelta;           // Offset: 2864 Size:    12 [unused]
//   float MeasuredExposureScale;       // Offset: 2876 Size:     4 [unused]
//   float3 TemporalFilteringParams;    // Offset: 2880 Size:    12 [unused]
//   float RaindropRippleScale;         // Offset: 2892 Size:     4 [unused]
//   float3 UncompressDepthWeights;     // Offset: 2896 Size:    12 [unused]
//   float ReflectionScaleDistanceMul;  // Offset: 2908 Size:     4 [unused]
//   float3 UncompressDepthWeightsWS;   // Offset: 2912 Size:    12 [unused]
//   float ReflectionScaleStrength;     // Offset: 2924 Size:     4 [unused]
//   float3 ViewPoint;                  // Offset: 2928 Size:    12 [unused]
//   float SkyParaboloidTextureMaxMipIndex;// Offset: 2940 Size:     4 [unused]
//   float2 DefaultReflectionMultipliers;// Offset: 2944 Size:     8 [unused]
//   bool UseOnlySkyReflection;         // Offset: 2952 Size:     4 [unused]
//   float2 ReflectionGIControl;        // Offset: 2960 Size:     8 [unused]
//   uint2 SelectedPixel;               // Offset: 2968 Size:     8 [unused]
//
// }
//
// cbuffer Primitive
// {
//
//   float4 GeometryPickingID;          // Offset:    0 Size:    16 [unused]
//   float4 MaterialPickingID;          // Offset:   16 Size:    16 [unused]
//   float4 ModelPickingID;             // Offset:   32 Size:    16 [unused]
//   float4 PickingID;                  // Offset:   48 Size:    16 [unused]
//   float4 ColorMultiplier;            // Offset:   64 Size:    16 [unused]
//   float4x4 SecondTextureUVTransform; // Offset:   80 Size:    64 [unused]
//   float4x4 Transform;                // Offset:  144 Size:    64
//   float4x4 UVTransform;              // Offset:  208 Size:    64 [unused]
//   float4 VideoTextureUnpack[8];      // Offset:  272 Size:   128 [unused]
//   float3 GammaBrightnessContrastParams;// Offset:  400 Size:    12 [unused]
//   float CustomExposureScale;         // Offset:  412 Size:     4 [unused]
//   float MipLevel;                    // Offset:  416 Size:     4 [unused]
//   float Sharpness;                   // Offset:  420 Size:     4 [unused]
//   float VolumeTextureSizeZ;          // Offset:  424 Size:     4 [unused]
//   bool SecondTextureAdditive;        // Offset:  428 Size:     4 [unused]
//   bool TextureIsOffscreenComposited; // Offset:  432 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// Viewport                          cbuffer      NA          NA    0        1
// Primitive                         cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// position                 0   xyzw        0     NONE   float   xyzw
// color                    1   xyzw        1     NONE   float   xyzw
// texcoord                 2   xyzw        2     NONE   float   xyzw
// SV_VertexID              0   x           3   VERTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xy          3     NONE   float   xy  
// SV_Position              0   xyzw        4      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[67], immediateIndexed
dcl_constantbuffer cb1[12], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input_sgv v3.x, vertex_id
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xy
dcl_output_siv o4.xyzw, position
dcl_temps 4
mov o0.xyzw, v1.zyxw
and r0.x, v2.w, l(255)
utof r0.x, r0.x
mul r0.x, r0.x, cb0[66].y
mul r0.x, r0.x, l(0.000347222231)
max r0.x, r0.x, l(1.000000)
min r0.x, r0.x, l(32.000000)
add r0.y, r0.x, l(-0.500000)
mul o1.w, r0.y, l(0.031250)
mad r0.y, r0.x, l(0.500000), l(1.000000)
dp4 r1.x, v0.xyzw, cb1[9].xyzw
dp4 r1.y, v0.xyzw, cb1[10].xyzw
mul r0.zw, r1.xxxy, cb0[66].xxxy
mad r1.zw, v2.xxxy, cb0[66].xxxy, -r0.zzzw
dp2 r2.x, r1.zwzz, r1.zwzz
sqrt r2.x, r2.x
div r3.xy, r1.zwzz, r2.xxxx
add r0.x, -r0.x, r2.x
mul r0.x, r0.x, l(0.500000)
div o2.w, r0.x, r0.y
mov r3.z, -r3.x
dp2 r0.x, r3.yzyy, r0.zwzz
mad r0.zw, v2.xxxy, cb0[66].xxxy, r0.zzzw
mul r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
dp2 r0.z, r3.xyxx, r0.zwzz
mov r2.z, -r0.z
mov r3.w, -r0.x
div o1.xyz, r3.yzwy, r0.yyyy
mov r2.xy, r3.xyxx
div o2.xyz, r2.xyzx, r0.yyyy
mul r0.xy, r0.yyyy, r2.xyxx
mad r1.yz, r1.xxyx, cb0[66].xxyx, -r3.xxyx
mad r2.yz, v2.xxyx, cb0[66].xxyx, r2.xxyx
dp4 r1.x, v0.xyzw, cb1[11].xyzw
and r3.xy, v3.xxxx, l(3, 2, 0, 0)
ieq r3.xz, r3.xxxx, l(1, 0, 2, 0)
or r0.w, r3.z, r3.x
mov r2.x, v2.z
movc r1.xyz, r0.wwww, r2.xyzx, r1.xyzx
mov r0.z, -r0.x
add r0.xw, r0.yyyz, r1.yyyz
add r0.yz, -r0.yyzy, r1.yyzy
mov o4.z, r1.x
movc r0.xy, r3.yyyy, r0.xwxx, r0.yzyy
mov o3.xy, r0.xyxx
mul r0.xy, r0.xyxx, cb0[66].zwzz
mad r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul o4.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
mov o4.w, l(1.000000)
ret 
// Approximately 50 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 