// asmtool.py --auto-fix-vertex-halo -i --only-autofixed 3d92d792ae7029cb-vs.txt
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.42 on Tue Dec 27 10:53:12 2016
//
//
// Buffer Definitions: 
//
// cbuffer Viewport
// {
//
//   float4 CameraNearPlaneSize;        // Offset:    0 Size:    16 [unused]
//   float4x4 DepthTextureTransform;    // Offset:   16 Size:    64 [unused]
//   float4 FSMClipPlanes;              // Offset:   80 Size:    16 [unused]
//   float4 FacettedShadowCastParams;   // Offset:   96 Size:    16 [unused]
//   float4 FogValues0;                 // Offset:  112 Size:    16 [unused]
//   float4 FogValues1;                 // Offset:  128 Size:    16 [unused]
//   float4x4 InvProjectionMatrix;      // Offset:  144 Size:    64 [unused]
//   float4x4 InvProjectionMatrixDepth; // Offset:  208 Size:    64 [unused]
//   float4x3 InvViewMatrix;            // Offset:  272 Size:    48 [unused]
//   float4x4 PreviousViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4x4 ProjectionMatrix;         // Offset:  384 Size:    64 [unused]
//   float4 RainOcclusionFadeParams;    // Offset:  448 Size:    16 [unused]
//   float4x4 RainOcclusionProjectionMatrix;// Offset:  464 Size:    64 [unused]
//   float4 RainOcclusionShadowMapSize; // Offset:  528 Size:    16 [unused]
//   float4 ReflectionVolumeDebugColors[15];// Offset:  544 Size:   240 [unused]
//   float4 VPosOffset;                 // Offset:  784 Size:    16 [unused]
//   float4 VPosScale;                  // Offset:  800 Size:    16 [unused]
//   float4x3 ViewMatrix;               // Offset:  816 Size:    48 [unused]
//   float4x4 ViewProjectionMatrix;     // Offset:  864 Size:    64 [unused]
//   float4x4 ViewRotProjectionMatrix;  // Offset:  928 Size:    64
//   float4x4 ViewRotProjectionMatrixPure;// Offset:  992 Size:    64 [unused]
//   float4 ViewportSize;               // Offset: 1056 Size:    16 [unused]
//   
//   struct SCameraDistances
//   {
//       
//       float near;                    // Offset: 1072
//       float far;                     // Offset: 1076
//       float view;                    // Offset: 1080
//       float oneOverView;             // Offset: 1084
//
//   } CameraDistances;                 // Offset: 1072 Size:    16 [unused]
//   
//   struct SReflectionVolume
//   {
//       
//       float4x4 inverseTransform;     // Offset: 1088
//       float3 rcpFadeRangePositive;   // Offset: 1152
//       float textureArrayIndexAsFloat;// Offset: 1164
//       float3 rcpFadeRangeNegative;   // Offset: 1168
//       float fadeFactor;              // Offset: 1180
//       float2 multipliers;            // Offset: 1184
//       uint parallaxCorrection;       // Offset: 1192
//       float padding0;                // Offset: 1196
//
//   } ReflectionVolumes[15];           // Offset: 1088 Size:  1680 [unused]
//   float3 CameraDirection;            // Offset: 2768 Size:    12 [unused]
//   float DefaultReflectionTextureArrayIndexAsFloat;// Offset: 2780 Size:     4 [unused]
//   float3 CameraPosition;             // Offset: 2784 Size:    12
//   float DynamicCubeMapReflectionTextureMaxMipIndex;// Offset: 2796 Size:     4 [unused]
//   float3 CullingCameraPosition;      // Offset: 2800 Size:    12 [unused]
//   float ExposedWhitePointOverExposureScale;// Offset: 2812 Size:     4 [unused]
//   float3 FogColorVector;             // Offset: 2816 Size:    12 [unused]
//   float ExposureScale;               // Offset: 2828 Size:     4 [unused]
//   float3 OppositeFogColorDelta;      // Offset: 2832 Size:    12 [unused]
//   float MaxParaboloidReflectionMipIndex;// Offset: 2844 Size:     4 [unused]
//   float3 SideFogColor;               // Offset: 2848 Size:    12 [unused]
//   float MaxStaticReflectionMipIndex; // Offset: 2860 Size:     4 [unused]
//   float3 SunFogColorDelta;           // Offset: 2864 Size:    12 [unused]
//   float MeasuredExposureScale;       // Offset: 2876 Size:     4 [unused]
//   float3 TemporalFilteringParams;    // Offset: 2880 Size:    12 [unused]
//   float RaindropRippleScale;         // Offset: 2892 Size:     4 [unused]
//   float3 UncompressDepthWeights;     // Offset: 2896 Size:    12 [unused]
//   float ReflectionScaleDistanceMul;  // Offset: 2908 Size:     4 [unused]
//   float3 UncompressDepthWeightsWS;   // Offset: 2912 Size:    12 [unused]
//   float ReflectionScaleStrength;     // Offset: 2924 Size:     4 [unused]
//   float3 ViewPoint;                  // Offset: 2928 Size:    12 [unused]
//   float SkyParaboloidTextureMaxMipIndex;// Offset: 2940 Size:     4 [unused]
//   float2 DefaultReflectionMultipliers;// Offset: 2944 Size:     8 [unused]
//   bool UseOnlySkyReflection;         // Offset: 2952 Size:     4 [unused]
//   float2 ReflectionGIControl;        // Offset: 2960 Size:     8 [unused]
//   uint2 SelectedPixel;               // Offset: 2968 Size:     8 [unused]
//
// }
//
// cbuffer CollisionRegionsModifier
// {
//
//   float4 RegionOffsets[3];           // Offset:    0 Size:    48
//   float4 RegionsDeform[4];           // Offset:   48 Size:    64
//   float4 RegionsScratches[4];        // Offset:  112 Size:    64 [unused]
//   float3 BoundingMax;                // Offset:  176 Size:    12
//   float3 BoundingMin;                // Offset:  192 Size:    12
//   uint3 RegionsCount;                // Offset:  208 Size:    12
//
// }
//
// cbuffer SceneGeometry
// {
//
//   float4 GeometryPickingID;          // Offset:    0 Size:    16 [unused]
//   float4 GeometryUserData;           // Offset:   16 Size:    16 [unused]
//   float4 UVDecompression;            // Offset:   32 Size:    16 [unused]
//   
//   struct SMeshDecompression
//   {
//       
//       float positionMin;             // Offset:   48
//       float positionRange;           // Offset:   52
//       float meshLocalHeight;         // Offset:   56
//       float isBuildingFacadeInterior;// Offset:   60
//
//   } MeshDecompression;               // Offset:   48 Size:    16
//   float3 GeometryBBoxMax;            // Offset:   64 Size:    12 [unused]
//   float3 GeometryBBoxMin;            // Offset:   80 Size:    12 [unused]
//
// }
//
// cbuffer Skinning
// {
//
//   float4x3 BlendMatrices[511];       // Offset:    0 Size: 24528
//   float4x3 PrevBlendMatrices[511];   // Offset: 24528 Size: 24528 [unused]
//
// }
//
// cbuffer SceneGraphicObjectInstancePart
// {
//
//   float4x3 WorldMatrix;              // Offset:    0 Size:    48
//
// }
//
// cbuffer MaterialNetHackingGeneric
// {
//
//   float3 Color;                      // Offset:    0 Size:    12 [unused]
//   float AttenuationDistanceFar;      // Offset:   12 Size:     4
//   float3 OutlineColor;               // Offset:   16 Size:    12 [unused]
//   float AttenuationDistanceRange;    // Offset:   28 Size:     4
//   float3 OutlineTargetColor;         // Offset:   32 Size:    12 [unused]
//   float ConstantIntensity;           // Offset:   44 Size:     4 [unused]
//   float InnerFresnelIntensity;       // Offset:   48 Size:     4 [unused]
//   float InnerFresnelPower;           // Offset:   52 Size:     4 [unused]
//   float OccludedIntensity;           // Offset:   56 Size:     4 [unused]
//   float OuterFresnelIntensity;       // Offset:   60 Size:     4 [unused]
//   float OuterFresnelPower;           // Offset:   64 Size:     4 [unused]
//   float OutlineCutout;               // Offset:   68 Size:     4 [unused]
//   float OutlineFarMultiplier;        // Offset:   72 Size:     4 [unused]
//   float OutlineIntensity;            // Offset:   76 Size:     4 [unused]
//   float OutlineNearMultiplier;       // Offset:   80 Size:     4 [unused]
//   float OverExposeIntensity;         // Offset:   84 Size:     4 [unused]
//   float TransparentIntensity;        // Offset:   88 Size:     4 [unused]
//   float TransparentSoft;             // Offset:   92 Size:     4 [unused]
//   float VertexNoiseBaseMultiplier;   // Offset:   96 Size:     4 [unused]
//   float VertexNoiseFarDist;          // Offset:  100 Size:     4
//   float VertexNoiseFarMultiplier;    // Offset:  104 Size:     4 [unused]
//   float VertexNoiseIntensity;        // Offset:  108 Size:     4 [unused]
//   float VertexNoiseNearDist;         // Offset:  112 Size:     4
//   float VertexNoiseNearMultiplier;   // Offset:  116 Size:     4 [unused]
//   float VertexNoiseRatio;            // Offset:  120 Size:     4 [unused]
//   float VertexNoiseScale;            // Offset:  124 Size:     4 [unused]
//   float VertexNoiseTop;              // Offset:  128 Size:     4 [unused]
//   float VertexNoiseTopMultiplier;    // Offset:  132 Size:     4 [unused]
//   bool DisableAlphaTest;             // Offset:  136 Size:     4 [unused]
//   bool RandomColor;                  // Offset:  140 Size:     4 [unused]
//   bool WhiteNoise;                   // Offset:  144 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// SkinningConfig                    texture   uint4         buf    0        1
// Viewport                          cbuffer      NA          NA    0        1
// CollisionRegionsModifier          cbuffer      NA          NA    1        1
// SceneGeometry                     cbuffer      NA          NA    2        1
// Skinning                          cbuffer      NA          NA    3        1
// SceneGraphicObjectInstancePart    cbuffer      NA          NA    4        1
// MaterialNetHackingGeneric         cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// position                 0   xyzw        0     NONE     int   xyzw
// blendweight              0   xyzw        1     NONE   float   xyzw
// normal                   0   xyzw        2     NONE   float   xyz 
// color                    1   xyzw        3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xy          2     NONE   float   xy  
// SV_Position              0   xyzw        3      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer cb0[175], immediateIndexed
dcl_constantbuffer cb1[14], dynamicIndexed
dcl_constantbuffer cb2[4], immediateIndexed
dcl_constantbuffer cb3[1533], dynamicIndexed
dcl_constantbuffer cb4[3], immediateIndexed
dcl_constantbuffer cb5[8], immediateIndexed
dcl_resource_buffer (uint,uint,uint,uint) t0
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyz
dcl_input v3.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xy
dcl_output_siv o3.xyzw, position
dcl_temps 11

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r10.xyzw, l(0, 0, 0, 0), t125.xyzw

itof r0.xyz, v0.xyzx
ubfe r0.w, l(3), l(13), v0.w
iadd r0.w, r0.w, l(1)
ieq r1.x, r0.w, l(1)
if_nz r1.x
  and r1.x, v0.w, l(8191)
  mov r2.xyzw, l(1.000000,0,0,0)
  mov r1.yzw, l(0,0,0,0)
else 
  and r3.x, v0.w, l(8191)
  ld_indexable(buffer)(uint,uint,uint,uint) r3.xyzw, r3.xxxx, t0.xyzw
  and r1.xyzw, r3.xyzw, l(0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff)
  mov r2.xyzw, v1.zyxw
endif 
mad r0.xyz, r0.xyzx, cb2[3].yyyy, cb2[3].xxxx
mad r3.xyz, v2.zyxz, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
add r4.xyz, v3.zyxz, l(-0.500000, -0.500000, -0.500000, 0.000000)
add r5.xyz, r0.xyzx, -cb1[12].xyzx
add r6.xyz, cb1[11].xyzx, -cb1[12].xyzx
div r5.xyz, r5.xyzx, r6.xyzx
ine r6.xyz, cb1[13].xyzx, l(1, 1, 1, 0)
if_nz r6.x
  ge r7.xyzw, r5.xxxx, cb1[0].xyzw
  and r7.xyzw, r7.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  dp4 r3.w, r7.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  ftou r3.w, r3.w
  if_nz r3.w
    iadd r4.w, r3.w, l(-1)
    dp4 r4.w, cb1[0].xyzw, icb[r4.w + 0].xyzw
  else 
    mov r4.w, l(0)
  endif 
  iadd r6.xw, cb1[13].xxxx, l(-1, 0, 0, -2)
  ult r5.w, r3.w, r6.x
  if_nz r5.w
    dp4 r5.w, cb1[0].xyzw, icb[r3.w + 0].xyzw
  else 
    mov r5.w, l(1.000000)
  endif 
  add r6.x, -r4.w, r5.x
  add r4.w, -r4.w, r5.w
  div r4.w, r6.x, r4.w
  mad r4.w, r4.w, l(2.000000), l(-1.000000)
  dp4 r5.w, cb1[0].xyzw, icb[r6.w + 0].xyzw
  add r5.w, r5.w, l(1.000000)
  mul r5.w, r5.w, l(0.500000)
  ge r5.w, r5.w, r5.x
  and r5.w, r5.w, l(0x3f800000)
  mul r4.w, r4.w, r5.w
  mul r5.w, cb1[0].x, l(0.500000)
  ge r5.x, r5.x, r5.w
  and r5.x, r5.x, l(0x3f800000)
  mul r7.x, r4.w, r5.x
else 
  mov r7.x, l(0)
  mov r3.w, l(0)
endif 
if_nz r6.y
  ge r8.xyzw, r5.yyyy, cb1[1].xyzw
  and r8.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  dp4 r4.w, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  ftou r4.w, r4.w
  if_nz r4.w
    iadd r5.x, r4.w, l(-1)
    dp4 r5.x, cb1[1].xyzw, icb[r5.x + 0].xyzw
  else 
    mov r5.x, l(0)
  endif 
  iadd r6.xy, cb1[13].yyyy, l(-1, -2, 0, 0)
  ult r5.w, r4.w, r6.x
  if_nz r5.w
    dp4 r5.w, cb1[1].xyzw, icb[r4.w + 0].xyzw
  else 
    mov r5.w, l(1.000000)
  endif 
  add r6.x, -r5.x, r5.y
  add r5.x, -r5.x, r5.w
  div r5.x, r6.x, r5.x
  mad r5.x, r5.x, l(2.000000), l(-1.000000)
  dp4 r5.w, cb1[1].xyzw, icb[r6.y + 0].xyzw
  add r5.w, r5.w, l(1.000000)
  mul r5.w, r5.w, l(0.500000)
  ge r5.w, r5.w, r5.y
  and r5.w, r5.w, l(0x3f800000)
  mul r5.x, r5.w, r5.x
  mul r5.w, cb1[1].x, l(0.500000)
  ge r5.y, r5.y, r5.w
  and r5.y, r5.y, l(0x3f800000)
  mul r7.y, r5.y, r5.x
else 
  mov r7.y, l(0)
  mov r4.w, l(0)
endif 
imad r3.w, r4.w, cb1[13].x, r3.w
if_nz r6.z
  ge r6.xyzw, r5.zzzz, cb1[2].xyzw
  and r6.xyzw, r6.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  dp4 r4.w, r6.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  ftou r4.w, r4.w
  if_nz r4.w
    iadd r5.x, r4.w, l(-1)
    dp4 r5.x, cb1[2].xyzw, icb[r5.x + 0].xyzw
  else 
    mov r5.x, l(0)
  endif 
  iadd r5.yw, cb1[13].zzzz, l(0, -1, 0, -2)
  ult r5.y, r4.w, r5.y
  if_nz r5.y
    dp4 r5.y, cb1[2].xyzw, icb[r4.w + 0].xyzw
  else 
    mov r5.y, l(1.000000)
  endif 
  add r6.x, -r5.x, r5.z
  add r5.x, -r5.x, r5.y
  div r5.x, r6.x, r5.x
  mad r5.x, r5.x, l(2.000000), l(-1.000000)
  dp4 r5.y, cb1[2].xyzw, icb[r5.w + 0].xyzw
  add r5.y, r5.y, l(1.000000)
  mul r5.y, r5.y, l(0.500000)
  ge r5.y, r5.y, r5.z
  and r5.y, r5.y, l(0x3f800000)
  mul r5.x, r5.y, r5.x
  mul r5.y, cb1[2].x, l(0.500000)
  ge r5.y, r5.z, r5.y
  and r5.y, r5.y, l(0x3f800000)
  mul r7.z, r5.y, r5.x
else 
  mov r7.z, l(0)
  mov r4.w, l(0)
endif 
imul null, r4.w, r4.w, cb1[13].x
imad r3.w, r4.w, cb1[13].y, r3.w
lt r5.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r7.xyzx
lt r6.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
iadd r5.xyz, -r5.yxzy, r6.yxzy
imul null, r6.xy, r5.xzxx, cb1[13].xxxx
imad r5.w, r5.x, cb1[13].x, r5.y
mov r5.x, l(0)
mov r5.z, r6.x
iadd r5.xyzw, r3.wwww, r5.xyzw
imad r6.xyzw, r6.yyyy, cb1[13].yyyy, r5.xyzw
min r7.xyz, |r7.xyzx|, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r7.xyz, r7.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
ushr r8.xyzw, r5.xyzw, l(2, 2, 2, 2)
and r5.xyzw, r5.xyzw, l(3, 3, 3, 3)
dp4 r9.x, cb1[r8.x + 3].xyzw, icb[r5.x + 0].xyzw
dp4 r9.y, cb1[r8.y + 3].xyzw, icb[r5.y + 0].xyzw
dp4 r9.z, cb1[r8.z + 3].xyzw, icb[r5.z + 0].xyzw
dp4 r9.w, cb1[r8.w + 3].xyzw, icb[r5.w + 0].xyzw
ushr r5.xyzw, r6.xyzw, l(2, 2, 2, 2)
and r6.xyzw, r6.xyzw, l(3, 3, 3, 3)
dp4 r8.x, cb1[r5.x + 3].xyzw, icb[r6.x + 0].xyzw
dp4 r8.y, cb1[r5.y + 3].xyzw, icb[r6.y + 0].xyzw
dp4 r8.z, cb1[r5.z + 3].xyzw, icb[r6.z + 0].xyzw
dp4 r8.w, cb1[r5.w + 3].xyzw, icb[r6.w + 0].xyzw
add r5.xyzw, -r9.xyzw, r8.xyzw
mad r5.xyzw, r7.zzzz, r5.xyzw, r9.xyzw
add r5.zw, -r5.xxxy, r5.zzzw
mad r5.xy, r7.yyyy, r5.zwzz, r5.xyxx
add r3.w, -r5.x, r5.y
mad_sat r3.w, r7.x, r3.w, r5.x
mul r4.xyz, r3.wwww, r4.xyzx
mad r4.xyz, r4.xyzx, l(0.650000, 0.650000, 0.650000, 0.000000), r0.xyzx
mov r5.xyzw, l(0,0,0,0)
mov r6.xyzw, l(0,0,0,0)
mov r7.xyzw, l(0,0,0,0)
mov r0.x, l(0)
loop 
  ult r0.z, r0.x, r0.w
  ult r3.w, r0.x, l(4)
  and r0.z, r0.z, r3.w
  breakc_z r0.z
  dp4 r0.z, r2.xyzw, icb[r0.x + 0].xyzw
  ineg r3.w, r0.x
  ult r8.xyz, r0.xxxx, l(1, 2, 3, 0)
  and r9.y, r3.w, r8.y
  iadd r0.xy, r0.xxxx, l(1, -3, 0, 0)
  movc r9.z, r8.y, l(0), r0.y
  ieq r9.w, r8.z, l(0)
  mov r9.x, r8.x
  and r8.xyzw, r1.xyzw, r9.xyzw
  or r8.xy, r8.ywyy, r8.xzxx
  or r0.y, r8.y, r8.x
  imul null, r0.y, r0.y, l(3)
  mul r8.x, r0.z, cb3[r0.y + 0].w
  mul r8.y, r0.z, cb3[r0.y + 1].w
  mul r8.z, r0.z, cb3[r0.y + 2].w
  mad r5.xyz, r0.zzzz, cb3[r0.y + 0].xyzx, r5.xyzx
  mad r6.xyz, r0.zzzz, cb3[r0.y + 1].xyzx, r6.xyzx
  mad r7.xyz, r0.zzzz, cb3[r0.y + 2].xyzx, r7.xyzx
  mov r9.x, r5.w
  mov r9.y, r6.w
  mov r9.z, r7.w
  add r8.xyz, r8.xyzx, r9.xyzx
  mov r5.w, r8.x
  mov r6.w, r8.y
  mov r7.w, r8.z
endloop 
mov r4.w, l(1.000000)
dp4 r0.x, r4.xyzw, r5.xyzw
dp4 r0.y, r4.xyzw, r6.xyzw
dp4 r0.z, r4.xyzw, r7.xyzw
dp3 r1.x, r3.xyzx, r5.xyzx
dp3 r1.y, r3.xyzx, r6.xyzx
dp3 r1.z, r3.xyzx, r7.xyzx
mov r2.x, cb4[0].w
mov r2.y, cb4[1].w
mov r2.z, cb4[2].w
add r2.xyz, r2.xyzx, -cb0[174].xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
sqrt r1.w, r1.w
add r1.w, r1.w, -cb5[7].x
add r2.x, cb5[6].y, -cb5[7].x
div_sat o0.w, r1.w, r2.x
mov r0.w, l(1.000000)
dp4 r2.x, r0.xyzw, cb4[0].xyzw
dp4 r2.y, r0.xyzw, cb4[1].xyzw
dp4 r2.z, r0.xyzw, cb4[2].xyzw
add r0.xyz, r2.xyzx, -cb0[174].xyzx
mad r2.xyz, -r0.xyzx, l(0.001000, 0.001000, 0.001000, 0.000000), r2.xyzx
mul r0.xyz, r0.xyzx, l(0.999000, 0.999000, 0.999000, 0.000000)
mul r3.x, r0.x, cb0[58].x
mul r3.y, r0.x, cb0[59].x
mul r3.z, r0.x, cb0[60].x
mul r3.w, r0.x, cb0[61].x
mul r4.x, r0.y, cb0[58].y
mul r4.y, r0.y, cb0[59].y
mul r4.z, r0.y, cb0[60].y
mul r4.w, r0.y, cb0[61].y
mad r5.x, r0.z, cb0[58].z, cb0[58].w
mad r5.y, r0.z, cb0[59].z, cb0[59].w
mad r5.z, r0.z, cb0[60].z, cb0[60].w
mad r5.w, r0.z, cb0[61].z, cb0[61].w
add r0.xyzw, r4.xyzw, r5.xyzw
add r0.xyzw, r0.xyzw, r3.xyzw
dp3 o1.x, r1.xyzx, cb4[0].xyzx
dp3 o1.y, r1.xyzx, cb4[1].xyzx
dp3 o1.z, r1.xyzx, cb4[2].xyzx
add r1.xyz, r2.xyzx, -cb0[174].xyzx
dp3 r1.x, r1.xyzx, r1.xyzx
sqrt r1.x, r1.x
add r1.x, r1.x, -cb5[0].w
div_sat r1.x, r1.x, cb5[1].w
add o1.w, -r1.x, l(1.000000)
mov o0.xyz, r2.xyzx
mov o3.xyzw, r0.xyzw

// Automatic vertex shader halo fix inserted with DarkStarSword's asmtool.py:
// asmtool.py --auto-fix-vertex-halo -i --only-autofixed 3d92d792ae7029cb-vs.txt
ne r10.w, r0.w, l(1.0)
if_nz r10.w
  add r10.w, r0.w, -r10.y
  mad r0.x, r10.w, r10.x, r0.x
endif

mov o2.xy, r0.zwzz
ret 
// Approximately 248 instruction slots used