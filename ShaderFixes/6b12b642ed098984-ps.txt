// asmtool.py --fix-wd2-unproject --fix-wd2-camera-pos -i --only-autofixed 6b12b642ed098984-ps.txt
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.42 on Tue Dec 27 10:51:54 2016
//
//
// Buffer Definitions: 
//
// cbuffer Viewport
// {
//
//   float4 CameraNearPlaneSize;        // Offset:    0 Size:    16 [unused]
//   float4x4 DepthTextureTransform;    // Offset:   16 Size:    64 [unused]
//   float4 FSMClipPlanes;              // Offset:   80 Size:    16 [unused]
//   float4 FacettedShadowCastParams;   // Offset:   96 Size:    16 [unused]
//   float4 FogValues0;                 // Offset:  112 Size:    16 [unused]
//   float4 FogValues1;                 // Offset:  128 Size:    16 [unused]
//   float4x4 InvProjectionMatrix;      // Offset:  144 Size:    64
//   float4x4 InvProjectionMatrixDepth; // Offset:  208 Size:    64 [unused]
//   float4x3 InvViewMatrix;            // Offset:  272 Size:    48
//   float4x4 PreviousViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4x4 ProjectionMatrix;         // Offset:  384 Size:    64 [unused]
//   float4 RainOcclusionFadeParams;    // Offset:  448 Size:    16 [unused]
//   float4x4 RainOcclusionProjectionMatrix;// Offset:  464 Size:    64 [unused]
//   float4 RainOcclusionShadowMapSize; // Offset:  528 Size:    16 [unused]
//   float4 ReflectionVolumeDebugColors[15];// Offset:  544 Size:   240 [unused]
//   float4 VPosOffset;                 // Offset:  784 Size:    16
//   float4 VPosScale;                  // Offset:  800 Size:    16
//   float4x3 ViewMatrix;               // Offset:  816 Size:    48 [unused]
//   float4x4 ViewProjectionMatrix;     // Offset:  864 Size:    64 [unused]
//   float4x4 ViewRotProjectionMatrix;  // Offset:  928 Size:    64 [unused]
//   float4x4 ViewRotProjectionMatrixPure;// Offset:  992 Size:    64 [unused]
//   float4 ViewportSize;               // Offset: 1056 Size:    16 [unused]
//   
//   struct SCameraDistances
//   {
//       
//       float near;                    // Offset: 1072
//       float far;                     // Offset: 1076
//       float view;                    // Offset: 1080
//       float oneOverView;             // Offset: 1084
//
//   } CameraDistances;                 // Offset: 1072 Size:    16 [unused]
//   
//   struct SReflectionVolume
//   {
//       
//       float4x4 inverseTransform;     // Offset: 1088
//       float3 rcpFadeRangePositive;   // Offset: 1152
//       float textureArrayIndexAsFloat;// Offset: 1164
//       float3 rcpFadeRangeNegative;   // Offset: 1168
//       float fadeFactor;              // Offset: 1180
//       float2 multipliers;            // Offset: 1184
//       uint parallaxCorrection;       // Offset: 1192
//       float padding0;                // Offset: 1196
//
//   } ReflectionVolumes[15];           // Offset: 1088 Size:  1680
//   float3 CameraDirection;            // Offset: 2768 Size:    12 [unused]
//   float DefaultReflectionTextureArrayIndexAsFloat;// Offset: 2780 Size:     4 [unused]
//   float3 CameraPosition;             // Offset: 2784 Size:    12
//   float DynamicCubeMapReflectionTextureMaxMipIndex;// Offset: 2796 Size:     4
//   float3 CullingCameraPosition;      // Offset: 2800 Size:    12 [unused]
//   float ExposedWhitePointOverExposureScale;// Offset: 2812 Size:     4 [unused]
//   float3 FogColorVector;             // Offset: 2816 Size:    12 [unused]
//   float ExposureScale;               // Offset: 2828 Size:     4
//   float3 OppositeFogColorDelta;      // Offset: 2832 Size:    12 [unused]
//   float MaxParaboloidReflectionMipIndex;// Offset: 2844 Size:     4 [unused]
//   float3 SideFogColor;               // Offset: 2848 Size:    12 [unused]
//   float MaxStaticReflectionMipIndex; // Offset: 2860 Size:     4 [unused]
//   float3 SunFogColorDelta;           // Offset: 2864 Size:    12 [unused]
//   float MeasuredExposureScale;       // Offset: 2876 Size:     4 [unused]
//   float3 TemporalFilteringParams;    // Offset: 2880 Size:    12 [unused]
//   float RaindropRippleScale;         // Offset: 2892 Size:     4 [unused]
//   float3 UncompressDepthWeights;     // Offset: 2896 Size:    12 [unused]
//   float ReflectionScaleDistanceMul;  // Offset: 2908 Size:     4 [unused]
//   float3 UncompressDepthWeightsWS;   // Offset: 2912 Size:    12 [unused]
//   float ReflectionScaleStrength;     // Offset: 2924 Size:     4 [unused]
//   float3 ViewPoint;                  // Offset: 2928 Size:    12 [unused]
//   float SkyParaboloidTextureMaxMipIndex;// Offset: 2940 Size:     4
//   float2 DefaultReflectionMultipliers;// Offset: 2944 Size:     8 [unused]
//   bool UseOnlySkyReflection;         // Offset: 2952 Size:     4
//   float2 ReflectionGIControl;        // Offset: 2960 Size:     8 [unused]
//   uint2 SelectedPixel;               // Offset: 2968 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// ColorClamp                        sampler      NA          NA    0        1
// ColorWrap                         sampler      NA          NA    1        1
// Global__IBLBRDFTexture            texture  float2          2d    0        1
// Viewport__SkyParaboloidTexture    texture  float4          2d    1        1
// Viewport__DynamicCubeMapReflectionTextureArray    texture  float4   cubearray    2        1
// DeferredLightingBase__ProbeLightingTextureMS    texture  float4        2dMS    3        1
// DeferredLightingCommon__AlbedoTextureMS    texture  float4        2dMS    4        1
// DeferredLightingCommon__DepthSamplerMS    texture  float4        2dMS    5        1
// DeferredLightingCommon__NormalTextureMS    texture  float4        2dMS    6        1
// DeferredLightingCommon__OtherTextureMS    texture  float4        2dMS    7        1
// Viewport                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// SV_SampleIndex           0   x           1   SAMPLE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
// Pixel Shader runs at sample frequency
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[185], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texturecubearray (float,float,float,float) t2
dcl_resource_texture2dms(0) (float,float,float,float) t3
dcl_resource_texture2dms(0) (float,float,float,float) t4
dcl_resource_texture2dms(0) (float,float,float,float) t5
dcl_resource_texture2dms(0) (float,float,float,float) t6
dcl_resource_texture2dms(0) (float,float,float,float) t7
dcl_input_ps_siv linear noperspective sample v0.xy, position
dcl_input_ps_sgv v1.x, sampleIndex
dcl_output o0.xyzw
dcl_temps 19

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r15.xyzw, l(0, 0, 0, 0), t125.xyzw


// WATCH_DOGS2 CameraPosition adjustment inserted with DarkStarSword's asmtool.py:
// asmtool.py --fix-wd2-unproject --fix-wd2-camera-pos -i --only-autofixed 6b12b642ed098984-ps.txt

mul r15.w, r15.x, r15.y
mul r17.x, r15.w, cb0[9].x
mul r17.y, r15.w, cb0[10].x
mul r17.z, r15.w, cb0[11].x
mul r17.w, r15.w, cb0[12].x
dp4 r18.x, r17.xyzw, cb0[17].xyzw
dp4 r18.y, r17.xyzw, cb0[18].xyzw
dp4 r18.z, r17.xyzw, cb0[19].xyzw
add r16.xyz, cb0[174].xyz, r18.xyz

mad r0.xy, v0.xyxx, cb0[50].zwzz, cb0[49].zwzz
ftoi r1.xy, v0.xyxx
mov r1.zw, l(0,0,0,0)
ldms_indexable(texture2dms)(float,float,float,float) r0.z, r1.xyww, t5.zwxy, v1.x
mov r0.w, l(1.000000)
dp2 r2.x, r0.zwzz, cb0[11].zwzz
dp2 r0.z, r0.zwzz, cb0[12].zwzz
div r0.z, -r2.x, r0.z
mov r2.z, -r0.z
mul r2.xy, r0.xyxx, r2.zzzz

// WATCH_DOGS2 unprojection fix inserted with DarkStarSword's asmtool.py:
// asmtool.py --fix-wd2-unproject --fix-wd2-camera-pos -i --only-autofixed 6b12b642ed098984-ps.txt

add r15.w, -r2.z, -r15.y
mul r15.w, r15.w, r15.x
mad r2.x, -r15.w, cb0[9].x, r2.x

mov r2.w, l(1.000000)
dp4 r0.x, r2.xyzw, cb0[17].xyzw
dp4 r0.y, r2.xyzw, cb0[18].xyzw
dp4 r0.z, r2.xyzw, cb0[19].xyzw
ldms_indexable(texture2dms)(float,float,float,float) r2.xyzw, r1.xyww, t4.xyzw, v1.x
ldms_indexable(texture2dms)(float,float,float,float) r3.xyzw, r1.xyww, t6.xyzw, v1.x
ldms_indexable(texture2dms)(float,float,float,float) r4.xyzw, r1.xyww, t7.zyxw, v1.x
mad r5.x, r4.w, l(255.000000), l(0.500000)
round_ni r5.x, r5.x
ftou r5.x, r5.x
ushr r5.x, r5.x, l(5)
dp3 r5.y, r3.xyzx, r3.xyzx
rsq r5.y, r5.y
mul r5.yzw, r3.xxyz, r5.yyyy
ieq r6.xy, r5.xxxx, l(1, 4, 0, 0)
ge r6.z, r2.w, l(0.750000)
add r6.w, r2.w, l(-0.750000)
mad r6.w, r6.w, l(-0.599999905), l(1.000000)
movc r6.z, r6.z, r6.w, l(1.000000)
movc r6.z, r6.y, r6.z, r2.w
movc r6.z, r6.x, l(1.000000), r6.z
add r7.xyz, -r0.xyzx, r16.xyzx
dp3 r6.w, r7.xyzx, r7.xyzx
rsq r6.w, r6.w
mul r7.xyz, r6.wwww, r7.xyzx
mul r8.yzw, r2.xxyz, r6.zzzz
if_nz r6.x
  mad r2.x, r3.w, l(0.500000), l(0.500000)
  mad r2.x, r2.x, l(65535.000000), l(0.500000)
  ftou r2.x, r2.x
  and r2.xy, r2.xxxx, l(255, 0x0000ff00, 0, 0)
  utof r2.xy, r2.xyxx
  mul r9.xz, r2.xxyx, l(0.00392156886, 0.000000, 0.0000153186284, 0.000000)
  mul r2.x, r2.w, l(255.000000)
  ftou r2.x, r2.x
  and r2.xy, r2.xxxx, l(15, 240, 0, 0)
  utof r2.xy, r2.xyxx
  mul r9.yw, r2.yyyx, l(0.000000, 0.00416666688, 0.000000, 0.0666666701)
  mov r8.x, r8.y
  mov r2.x, l(0)
else 
  mul r2.z, r4.y, r4.y
  max r4.y, r2.z, l(0.001000)
  ieq r2.z, r5.x, l(2)
  if_nz r2.z
    mad r2.z, r3.w, l(0.500000), l(0.500000)
    mad r2.z, r2.z, l(65535.000000), l(0.500000)
    ftou r2.z, r2.z
    and r10.xy, r2.zzzz, l(255, 0x0000ff00, 0, 0)
    utof r10.xy, r10.xyxx
    mov r10.z, r4.z
    mad r10.xyz, r10.xyzx, l(0.00784313772, 0.0000306372567, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
    add r2.z, -r2.w, l(1.000000)
    mul r2.z, r2.z, r8.y
    mad r8.x, r2.z, l(0.500000), r8.y
    dp3 r2.z, r10.xyzx, r10.xyzx
    rsq r2.z, r2.z
    mul r9.xzw, r2.zzzz, r10.xxyz
    mov r9.y, l(0)
    mov r4.z, l(0.500000)
    mov r2.x, l(0)
  else 
    ieq r2.z, r5.x, l(3)
    if_nz r2.z
      mad r2.z, r3.w, l(0.500000), l(0.500000)
      mad r2.z, r2.z, l(65535.000000), l(0.500000)
      ftou r2.z, r2.z
      and r10.xyzw, r2.zzzz, l(0x0000f800, 2016, 31, 31)
      utof r10.xyzw, r10.xyzw
      ge r11.xyz, l(1.253950, 81.547195, 2568.089600, 0.000000), r10.wyxw
      mul r2.z, r10.w, l(0.00249675405)
      mad r12.xyz, r10.zyxz, l(0.0322580636, 0.000496031775, 0.0000157510076, 0.000000), l(0.055000, 0.055000, 0.055000, 0.000000)
      mul r12.xyz, r12.xyzx, l(0.947867334, 0.947867334, 0.947867334, 0.000000)
      log r12.xyz, r12.xyzx
      mul r12.xyz, r12.xyzx, l(2.400000, 2.400000, 2.400000, 0.000000)
      exp r12.xyz, r12.xyzx
      movc r9.x, r11.x, r2.z, r12.x
      mul r2.zw, r10.yyyx, l(0.000000, 0.000000, 0.0000383925508, 0.00000121911819)
      movc r9.zw, r11.yyyz, r2.zzzw, r12.yyyz
      mov r9.y, l(0)
      mov r2.x, l(0)
    else 
      if_nz r6.y
        mad r2.z, r3.w, l(32767.000000), l(32767.000000)
        ftou r2.z, r2.z
        and r2.w, r2.z, l(255)
        utof r2.w, r2.w
        mul r2.w, r2.w, l(0.0123199718)
        ubfe r2.z, l(8), l(8), r2.z
        utof r2.z, r2.z
        mad r2.z, r2.z, l(0.0246399436), l(-3.14159274)
        sincos r10.x, r11.x, r2.w
        sincos r12.x, r13.x, r2.z
        mul r13.x, r10.x, r13.x
        mul r13.y, r10.x, r12.x
        mov r13.z, r11.x
        dp3 r2.z, r13.xyzx, r13.xyzx
        rsq r2.z, r2.z
        mul r9.xzw, r2.zzzz, r13.xxyz
        mov r9.y, l(0)
        mov r2.x, l(0)
      else 
        ieq r2.z, r5.x, l(5)
        lt r2.w, r3.z, l(0.900000)
        movc r10.xyz, r2.wwww, l(0,1.000000,0,0), l(1.000000,0,0,0)
        mul r11.xyz, r3.zxyz, r10.xyzx
        mad r10.xyz, r3.yzxy, r10.yzxy, -r11.xyzx
        dp3 r2.w, r10.xyzx, r10.xyzx
        rsq r2.w, r2.w
        mul r10.xyz, r2.wwww, r10.xyzx
        mul r11.xyz, r3.zxyz, r10.yzxy
        mad r3.xyz, r3.yzxy, r10.zxyz, -r11.xyzx
        dp3 r2.w, r3.xyzx, r3.xyzx
        rsq r2.w, r2.w
        mul r3.xyz, r2.wwww, r3.xyzx
        mad r2.w, r3.w, l(2.000000), l(-1.000000)
        mul r2.w, r2.w, l(3.14159274)
        sincos r11.x, r12.x, r2.w
        mul r10.xyz, r10.xyzx, r11.xxxx
        mad r10.xyz, r3.xyzx, r12.xxxx, r10.xyzx
        mad r2.w, r3.w, l(0.500000), l(0.500000)
        mad r2.w, r2.w, l(65535.000000), l(0.500000)
        ftou r2.w, r2.w
        and r3.xy, r2.wwww, l(255, 0x0000ff00, 0, 0)
        utof r3.xy, r3.xyxx
        mul r3.x, r3.x, l(0.00392156886)
        mad r3.z, r3.y, l(0.0000306372567), l(-1.000000)
        movc r3.xy, r5.xxxx, l(0,0,0,0), r3.xzxx
        mov r10.w, r4.x
        mov r3.z, l(0)
        movc r9.xyzw, r2.zzzz, r10.xwyz, r3.xzzz
        mov r3.w, r10.w
        movc r2.xy, r2.zzzz, l(0,0,0,0), r3.ywyy
        mov r4.x, r2.y
      endif 
    endif 
    mov r8.x, r8.y
  endif 
endif 
ldms_indexable(texture2dms)(float,float,float,float) r1.xyzw, r1.xyzw, t3.xyzw, v1.x
div r3.xyz, r1.xyzx, cb0[176].wwww
dp3 r3.w, r3.xyzx, l(0.212639, 0.715168655, 0.0721923187, 0.000000)
if_nz r6.y
  mul r3.xyz, r3.xyzx, r8.xzwx
  mul r10.xyzw, r3.xyzw, l(0.318309873, 0.318309873, 0.318309873, 0.0572957806)
else 
  if_nz r6.x
    mov_sat r1.xy, r9.xyxx
    mov_sat r1.z, r4.x
    log r2.yzw, r8.xxzw
    mul r11.xyz, r1.yyyy, r2.yzwy
    mul r11.xyz, r11.xyzx, l(-12.780000, -12.780000, -12.780000, 0.000000)
    mad r2.yzw, r2.yyzw, l(0.000000, -0.020000, -0.020000, -0.020000), r11.xxyz
    eq r1.y, r1.x, l(0.000000)
    add r1.z, -r1.z, l(1.000000)
    mul r11.xyz, r1.zzzz, r8.xzwx
    mul r11.xyz, r11.xyzx, l(0.318309873, 0.318309873, 0.318309873, 0.000000)
    mul r2.yzw, -r1.xxxx, r2.yyzw
    exp r2.yzw, r2.yyzw
    mul r2.yzw, r11.xxyz, r2.yyzw
    mul r2.yzw, r2.yyzw, l(0.000000, 0.444444448, 0.444444448, 0.444444448)
    movc r11.xyz, r1.yyyy, r11.xyzx, r2.yzwy
    mov r11.w, l(0.180000)
  else 
    ieq r1.x, r5.x, l(2)
    if_nz r1.x
      mul r12.xyz, r8.xzwx, l(0.318309873, 0.318309873, 0.318309873, 0.000000)
      mov r12.w, l(0.0572957806)
      add r1.x, -r4.x, l(1.000000)
      mul r11.xyzw, r1.xxxx, r12.xyzw
    else 
      ieq r1.x, r5.x, l(3)
      if_nz r1.x
        dp3 r1.x, r7.xyzx, r7.xyzx
        min r1.x, r1.x, l(1.000000)
        mul r1.y, r4.z, l(0.080000)
        add r1.x, -r1.x, l(1.000000)
        mul r1.z, r1.x, r1.x
        mul r1.z, r1.z, r1.z
        mad r2.y, -r4.z, l(0.080000), l(1.000000)
        mul r1.z, r1.z, r2.y
        mad r1.x, r1.z, r1.x, r1.y
        add_sat r1.y, r4.y, r4.y
        mad r12.w, r1.y, -r1.x, l(1.000000)
        mul r12.xyz, r8.xzwx, r12.wwww
        mul r11.xyzw, r12.xyzw, l(0.318309873, 0.318309873, 0.318309873, 0.0572957806)
      else 
        ieq r1.x, r5.x, l(5)
        if_nz r1.x
          mul r12.xyz, r8.xzwx, l(0.318309873, 0.318309873, 0.318309873, 0.000000)
          mov r12.w, l(0.0572957806)
          add r13.w, -r4.x, l(1.000000)
          mul r12.xyzw, r12.xyzw, r13.wwww
          mov r13.xyz, r12.xyzx
          mul r13.xyzw, r13.xyzw, l(0.500000, 0.500000, 0.500000, 0.0286478903)
          add r1.x, -r9.y, l(1.000000)
          mul r12.xyzw, r9.yyyy, r12.xyzw
          mul r12.xyzw, r12.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000)
          mad r11.xyzw, r13.xyzw, r1.xxxx, r12.xyzw
        else 
          ieq r1.x, r5.x, l(8)
          dp3 r1.y, r5.yzwy, r7.xyzx
          max r1.z, |r1.y|, l(0.000001)
          rcp r1.z, r1.z
          mul r1.y, r1.z, r1.y
          eq r1.y, r1.y, l(0.000000)
          movc r1.y, r1.y, l(0), l(1.000000)
          mul r2.yzw, r9.xxzw, l(0.000000, 0.318309873, 0.318309873, 0.318309873)
          add r12.w, -r4.x, l(1.000000)
          mul r13.xyz, r2.yzwy, r12.wwww
          mov r13.w, l(0.180000)
          mul r12.xyz, r8.xzwx, r12.wwww
          mul r12.xyzw, r12.xyzw, l(0.318309873, 0.318309873, 0.318309873, 0.0572957806)
          mad r13.xyzw, r1.yyyy, r13.xyzw, r12.xyzw
          mul r14.xyz, r8.xzwx, r9.xxxx
          mov r14.w, r9.x
          mad r12.xyzw, r14.xyzw, l(0.0795774683, 0.0795774683, 0.0795774683, 0.0143239452), r12.xyzw
          movc r11.xyzw, r1.xxxx, r13.xyzw, r12.xyzw
        endif 
      endif 
    endif 
  endif 
  mul r10.xyzw, r3.xyzw, r11.xyzw
endif 
if_nz r6.x
  mov_sat r9.xyzw, r9.xyzw
  mov_sat r4.xyz, r4.xyzx
  mul r1.x, r4.y, r4.y
  max r1.y, r1.x, l(0.001000)
  mul r2.y, r9.z, r9.z
  max r2.y, r2.y, l(0.001000)
  dp3 r2.z, -r7.xyzx, r5.yzwy
  add r2.z, r2.z, r2.z
  mad r3.xyz, r5.yzwy, -r2.zzzz, -r7.xyzx
  dp3 r2.z, r5.yzwy, r3.xyzx
  mad r2.z, -|r2.z|, |r2.z|, l(1.000000)
  mad r2.z, -r2.z, l(0.444702327), l(1.000000)
  add r2.w, r9.x, r9.x
  sqrt r2.z, r2.z
  div r2.z, r2.w, r2.z
  log r6.xyw, r8.xzxw
  mul r11.xyz, r9.yyyy, r6.xywx
  mul r11.xyz, r11.xyzx, l(-12.780000, -12.780000, -12.780000, 0.000000)
  mad r6.xyw, r6.xyxw, l(-0.020000, -0.020000, 0.000000, -0.020000), r11.xyxz
  eq r2.w, r9.x, l(0.000000)
  mul r3.w, r1.y, r1.y
  div r3.w, l(2.000000), r3.w
  add r3.w, r3.w, l(-2.000000)
  max r3.w, r3.w, l(1.000000031E-022)
  sqrt r3.w, r3.w
  div r3.w, l(-10.000000), r3.w
  exp r3.w, r3.w
  add r3.w, r3.w, l(-0.000980)
  mul_sat r3.w, r3.w, l(1.00795019)
  add r3.w, -r3.w, l(1.000000)
  if_z cb0[184].z
    mul r7.w, r3.w, cb0[174].w
    mov r0.w, l(1.000000)
    mov r11.xyzw, l(0,0,0,0)
    mov r8.y, l(1.000000)
    mov r9.y, l(0)
    loop 
      uge r12.x, r9.y, l(15)
      breakc_nz r12.x
      imul null, r12.x, r9.y, l(7)
      dp4 r13.x, r0.xyzw, cb0[r12.x + 68].xyzw
      dp4 r13.y, r0.xyzw, cb0[r12.x + 69].xyzw
      dp4 r13.z, r0.xyzw, cb0[r12.x + 70].xyzw
      ge r12.yzw, r13.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
      movc r12.yzw, r12.yyzw, cb0[r12.x + 72].xxyz, cb0[r12.x + 73].xxyz
      add r13.xyz, -|r13.xyzx|, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul_sat r12.yzw, r12.yyzw, r13.xxyz
      mul r12.y, r12.z, r12.y
      mul r12.y, r12.w, r12.y
      lt r12.z, l(0.000000), r12.y
      if_nz r12.z
        dp3 r13.x, r3.xyzx, cb0[r12.x + 68].xyzx
        dp3 r13.y, r3.xyzx, cb0[r12.x + 69].xyzx
        dp3 r13.z, r3.xyzx, cb0[r12.x + 70].xyzx
        mul r12.y, r12.y, cb0[r12.x + 73].w
        mov r13.w, cb0[r12.x + 72].w
        sample_l_indexable(texturecubearray)(float,float,float,float) r13.xyzw, r13.xyzw, t2.xyzw, s1, r7.w
        mul r13.xyzw, r13.xyzw, cb0[r12.x + 74].xxxy
        min r12.x, r8.y, r12.y
        mad r13.xyzw, r13.xyzw, r12.xxxx, r11.xyzw
        add r12.x, r8.y, -r12.x
        ge r12.y, l(0.000000), r12.x
        if_nz r12.y
          mov r11.xyzw, r13.xyzw
          mov r8.y, r12.x
          break 
        endif 
        mov r11.xyzw, r13.xyzw
        mov r8.y, r12.x
      endif 
      iadd r9.y, r9.y, l(1)
    endloop 
  else 
    mov r11.xyzw, l(0,0,0,0)
    mov r8.y, l(1.000000)
  endif 
  add r7.w, r8.y, r11.w
  mul r7.w, r1.w, r7.w
  lt r9.y, l(0.000000), r7.w
  if_nz r9.y
    mul r3.w, r3.w, cb0[183].w
    add r9.y, -|r3.z|, r3.z
    mad r8.y, r8.y, r9.y, |r3.z|
    mad r8.y, r8.y, l(2.000000), l(2.000000)
    div r12.xy, l(-1.000000, 1.000000, 0.000000, 0.000000), r8.yyyy
    mul r12.xy, r3.yxyy, r12.xyxx
    mad r12.xy, r12.xyxx, l(0.950000, 0.950000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    sample_l_indexable(texture2d)(float,float,float,float) r12.xyz, r12.xyxx, t1.xyzw, s0, r3.w
    mov_sat r13.xyz, r12.xyzx
    movc r12.xyz, cb0[184].zzzz, r13.xyzx, r12.xyzx
    div r12.xyz, r12.xyzx, cb0[176].wwww
    mad r11.xyz, r12.xyzx, r7.wwww, r11.xyzx
  endif 
  mul r3.w, r4.z, l(0.080000)
  dp3 r7.w, r3.wwww, l(0.333333343, 0.333333343, 0.333333343, 0.000000)
  mul r7.w, r7.w, l(50.000000)
  min r7.w, r7.w, l(1.000000)
  dp3_sat r1.x, r5.yzwy, r7.xyzx
  sample_l_indexable(texture2d)(float,float,float,float) r12.xy, r1.xyxx, t0.xyzw, s0, l(0.000000)
  mad r3.w, r3.w, r12.x, r12.y
  mul r3.w, r7.w, r3.w
  mul r11.xyz, r3.wwww, r11.xyzx
  mul r11.xyz, r6.zzzz, r11.xyzx
  add r1.y, r1.y, r2.y
  min r1.z, r1.y, l(1.000000)
  mul r1.y, r1.z, r1.z
  div r1.y, l(2.000000), r1.y
  add r1.y, r1.y, l(-2.000000)
  max r1.y, r1.y, l(1.000000031E-022)
  sqrt r1.y, r1.y
  div r1.y, l(-10.000000), r1.y
  exp r1.y, r1.y
  add r1.y, r1.y, l(-0.000980)
  mul r1.y, r1.y, l(1.00795019)
  max r1.y, r1.y, l(0.000000)
  add r1.y, -r1.y, l(1.000000)
  if_z cb0[184].z
    mul r2.y, r1.y, cb0[174].w
    mov r0.w, l(1.000000)
    mov r12.xyzw, l(0,0,0,0)
    mov r3.w, l(1.000000)
    mov r7.w, l(0)
    loop 
      uge r8.y, r7.w, l(15)
      breakc_nz r8.y
      imul null, r8.y, r7.w, l(7)
      dp4 r13.x, r0.xyzw, cb0[r8.y + 68].xyzw
      dp4 r13.y, r0.xyzw, cb0[r8.y + 69].xyzw
      dp4 r13.z, r0.xyzw, cb0[r8.y + 70].xyzw
      ge r14.xyz, r13.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      movc r14.xyz, r14.xyzx, cb0[r8.y + 72].xyzx, cb0[r8.y + 73].xyzx
      add r13.xyz, -|r13.xyzx|, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul_sat r13.xyz, r14.xyzx, r13.xyzx
      mul r9.y, r13.y, r13.x
      mul r9.y, r13.z, r9.y
      lt r11.w, l(0.000000), r9.y
      if_nz r11.w
        dp3 r13.x, r3.xyzx, cb0[r8.y + 68].xyzx
        dp3 r13.y, r3.xyzx, cb0[r8.y + 69].xyzx
        dp3 r13.z, r3.xyzx, cb0[r8.y + 70].xyzx
        mul r9.y, r9.y, cb0[r8.y + 73].w
        mov r13.w, cb0[r8.y + 72].w
        sample_l_indexable(texturecubearray)(float,float,float,float) r13.xyzw, r13.xyzw, t2.xyzw, s1, r2.y
        mul r13.xyzw, r13.xyzw, cb0[r8.y + 74].xxxy
        min r8.y, r3.w, r9.y
        mad r13.xyzw, r13.xyzw, r8.yyyy, r12.xyzw
        add r8.y, r3.w, -r8.y
        ge r9.y, l(0.000000), r8.y
        if_nz r9.y
          mov r12.xyzw, r13.xyzw
          mov r3.w, r8.y
          break 
        endif 
        mov r12.xyzw, r13.xyzw
        mov r3.w, r8.y
      endif 
      iadd r7.w, r7.w, l(1)
    endloop 
  else 
    mov r12.xyzw, l(0,0,0,0)
    mov r3.w, l(1.000000)
  endif 
  add r2.y, r3.w, r12.w
  mul r2.y, r1.w, r2.y
  lt r7.w, l(0.000000), r2.y
  if_nz r7.w
    mul r1.y, r1.y, cb0[183].w
    add r7.w, -|r3.z|, r3.z
    mad r3.z, r3.w, r7.w, |r3.z|
    mad r3.z, r3.z, l(2.000000), l(2.000000)
    div r3.zw, l(0.000000, 0.000000, -1.000000, 1.000000), r3.zzzz
    mul r3.xy, r3.zwzz, r3.yxyy
    mad r3.xy, r3.xyxx, l(0.950000, 0.950000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    sample_l_indexable(texture2d)(float,float,float,float) r3.xyz, r3.xyxx, t1.xyzw, s0, r1.y
    mov_sat r13.xyz, r3.xyzx
    movc r3.xyz, cb0[184].zzzz, r13.xyzx, r3.xyzx
    div r3.xyz, r3.xyzx, cb0[176].wwww
    mad r12.xyz, r3.xyzx, r2.yyyy, r12.xyzx
  endif 
  mul r1.y, r9.w, l(0.080000)
  mad r3.xyz, -r9.wwww, l(0.080000, 0.080000, 0.080000, 0.000000), r8.xzwx
  mad r3.xyz, r4.xxxx, r3.xyzx, r1.yyyy
  dp3 r1.y, r3.xyzx, l(0.333333343, 0.333333343, 0.333333343, 0.000000)
  mul_sat r1.y, r1.y, l(50.000000)
  sample_l_indexable(texture2d)(float,float,float,float) r1.xz, r1.xzxx, t0.xzyw, s0, l(0.000000)
  mad r3.xyz, r3.xyzx, r1.xxxx, r1.zzzz
  mul r1.xyz, r1.yyyy, r3.xyzx
  mul r1.xyz, r1.xyzx, r12.xyzx
  mul r1.xyz, r6.zzzz, r1.xyzx
  mul r3.xyz, r2.zzzz, -r6.xywx
  exp r3.xyz, r3.xyzx
  mad r3.xyz, r1.xyzx, r3.xyzx, r11.xyzx
  movc r1.xyz, r2.wwww, r1.xyzx, r3.xyzx
  dp3 r2.y, r1.xyzx, l(0.212639, 0.715168655, 0.0721923187, 0.000000)
else 
  ieq r2.z, r5.x, l(5)
  if_nz r2.z
    dp3 r2.z, -r7.xyzx, r5.yzwy
    add r2.z, r2.z, r2.z
    mad r3.xyz, r5.yzwy, -r2.zzzz, -r7.xyzx
    dp3 r2.z, r3.xyzx, r9.xzwx
    dp3 r2.w, r3.xyzx, r5.yzwy
    mul r3.xyz, r2.wwww, r5.yzwy
    mad r3.xyz, r9.xzwx, r2.zzzz, r3.xyzx
    dp3 r2.z, r9.xzwx, r7.xyzx
    mad r2.z, -r2.z, r2.z, l(1.000000)
    mul r2.w, r4.y, r4.y
    div r2.w, l(2.000000), r2.w
    add r2.w, r2.w, l(-2.000000)
    max r2.w, r2.w, l(1.000000031E-022)
    sqrt r2.zw, r2.zzzw
    div r2.w, l(-10.000000), r2.w
    exp r2.w, r2.w
    add r2.w, r2.w, l(-0.000980)
    mul_sat r2.w, r2.w, l(1.00795019)
    add r2.w, -r2.w, l(1.000000)
    if_z cb0[184].z
      mul r3.w, r2.w, cb0[174].w
      mov r0.w, l(1.000000)
      mov r9.xyzw, l(0,0,0,0)
      mov r5.x, l(1.000000)
      mov r6.x, l(0)
      loop 
        uge r6.y, r6.x, l(15)
        breakc_nz r6.y
        imul null, r6.y, r6.x, l(7)
        dp4 r11.x, r0.xyzw, cb0[r6.y + 68].xyzw
        dp4 r11.y, r0.xyzw, cb0[r6.y + 69].xyzw
        dp4 r11.z, r0.xyzw, cb0[r6.y + 70].xyzw
        ge r12.xyz, r11.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
        movc r12.xyz, r12.xyzx, cb0[r6.y + 72].xyzx, cb0[r6.y + 73].xyzx
        add r11.xyz, -|r11.xyzx|, l(1.000000, 1.000000, 1.000000, 0.000000)
        mul_sat r11.xyz, r12.xyzx, r11.xyzx
        mul r6.w, r11.y, r11.x
        mul r6.w, r11.z, r6.w
        lt r7.w, l(0.000000), r6.w
        if_nz r7.w
          dp3 r11.x, r3.xyzx, cb0[r6.y + 68].xyzx
          dp3 r11.y, r3.xyzx, cb0[r6.y + 69].xyzx
          dp3 r11.z, r3.xyzx, cb0[r6.y + 70].xyzx
          mul r6.w, r6.w, cb0[r6.y + 73].w
          mov r11.w, cb0[r6.y + 72].w
          sample_l_indexable(texturecubearray)(float,float,float,float) r11.xyzw, r11.xyzw, t2.xyzw, s1, r3.w
          mul r11.xyzw, r11.xyzw, cb0[r6.y + 74].xxxy
          min r6.y, r5.x, r6.w
          mad r11.xyzw, r11.xyzw, r6.yyyy, r9.xyzw
          add r6.y, r5.x, -r6.y
          ge r6.w, l(0.000000), r6.y
          if_nz r6.w
            mov r9.xyzw, r11.xyzw
            mov r5.x, r6.y
            break 
          endif 
          mov r9.xyzw, r11.xyzw
          mov r5.x, r6.y
        endif 
        iadd r6.x, r6.x, l(1)
      endloop 
    else 
      mov r9.xyzw, l(0,0,0,0)
      mov r5.x, l(1.000000)
    endif 
    add r3.w, r5.x, r9.w
    mul r3.w, r1.w, r3.w
    lt r6.x, l(0.000000), r3.w
    if_nz r6.x
      mul r2.w, r2.w, cb0[183].w
      add r6.x, -|r3.z|, r3.z
      mad r3.z, r5.x, r6.x, |r3.z|
      mad r3.z, r3.z, l(2.000000), l(2.000000)
      div r6.xy, l(-1.000000, 1.000000, 0.000000, 0.000000), r3.zzzz
      mul r3.xy, r3.yxyy, r6.xyxx
      mad r3.xy, r3.xyxx, l(0.950000, 0.950000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      sample_l_indexable(texture2d)(float,float,float,float) r3.xyz, r3.xyxx, t1.xyzw, s0, r2.w
      mov_sat r6.xyw, r3.xyxz
      movc r3.xyz, cb0[184].zzzz, r6.xywx, r3.xyzx
      div r3.xyz, r3.xyzx, cb0[176].wwww
      mad r9.xyz, r3.xyzx, r3.wwww, r9.xyzx
    endif 
    sqrt r3.xyz, r8.xzwx
    dp3 r2.w, r8.xzwx, l(0.212639, 0.715168655, 0.0721923187, 0.000000)
    mad r3.xyz, r3.xyzx, l(4.000000, 4.000000, 4.000000, 0.000000), -r6.zzzz
    mad r3.xyz, r2.wwww, r3.xyzx, r6.zzzz
    mul r3.xyz, r3.xyzx, r9.xyzx
    mul r2.w, r4.z, l(0.080000)
    mad r6.xyw, -r4.zzzz, l(0.080000, 0.080000, 0.000000, 0.080000), r8.xzxw
    mad r6.xyw, r4.xxxx, r6.xyxw, r2.wwww
    dp3 r2.w, r6.xywx, l(0.333333343, 0.333333343, 0.333333343, 0.000000)
    mul_sat r2.w, r2.w, l(50.000000)
    dp3_sat r4.w, r5.yzwy, r7.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r9.xy, r4.wyww, t0.xyzw, s0, l(0.000000)
    mad r6.xyw, r6.xyxw, r9.xxxx, r9.yyyy
    mul r6.xyw, r2.wwww, r6.xyxw
    mul r6.xyw, r2.zzzz, r6.xyxw
    mul r1.xyz, r3.xyzx, r6.xywx
    dp3 r2.y, r1.xyzx, l(0.212639, 0.715168655, 0.0721923187, 0.000000)
  else 
    add_sat r2.x, r2.x, r4.y
    dp3 r2.z, -r7.xyzx, r5.yzwy
    add r2.z, r2.z, r2.z
    mad r3.xyz, r5.yzwy, -r2.zzzz, -r7.xyzx
    mul r2.x, r2.x, r2.x
    div r2.x, l(2.000000), r2.x
    add r2.x, r2.x, l(-2.000000)
    max r2.x, r2.x, l(1.000000031E-022)
    sqrt r2.x, r2.x
    div r2.x, l(-10.000000), r2.x
    exp r2.x, r2.x
    add r2.x, r2.x, l(-0.000980)
    mul_sat r2.x, r2.x, l(1.00795019)
    add r2.x, -r2.x, l(1.000000)
    if_z cb0[184].z
      mul r2.z, r2.x, cb0[174].w
      mov r0.w, l(1.000000)
      mov r9.xyzw, l(0,0,0,0)
      mov r2.w, l(1.000000)
      mov r3.w, l(0)
      loop 
        uge r5.x, r3.w, l(15)
        breakc_nz r5.x
        imul null, r5.x, r3.w, l(7)
        dp4 r11.x, r0.xyzw, cb0[r5.x + 68].xyzw
        dp4 r11.y, r0.xyzw, cb0[r5.x + 69].xyzw
        dp4 r11.z, r0.xyzw, cb0[r5.x + 70].xyzw
        ge r6.xyw, r11.xyxz, l(0.000000, 0.000000, 0.000000, 0.000000)
        movc r6.xyw, r6.xyxw, cb0[r5.x + 72].xyxz, cb0[r5.x + 73].xyxz
        add r11.xyz, -|r11.xyzx|, l(1.000000, 1.000000, 1.000000, 0.000000)
        mul_sat r6.xyw, r6.xyxw, r11.xyxz
        mul r6.x, r6.y, r6.x
        mul r6.x, r6.w, r6.x
        lt r6.y, l(0.000000), r6.x
        if_nz r6.y
          dp3 r11.x, r3.xyzx, cb0[r5.x + 68].xyzx
          dp3 r11.y, r3.xyzx, cb0[r5.x + 69].xyzx
          dp3 r11.z, r3.xyzx, cb0[r5.x + 70].xyzx
          mul r6.x, r6.x, cb0[r5.x + 73].w
          mov r11.w, cb0[r5.x + 72].w
          sample_l_indexable(texturecubearray)(float,float,float,float) r11.xyzw, r11.xyzw, t2.xyzw, s1, r2.z
          mul r11.xyzw, r11.xyzw, cb0[r5.x + 74].xxxy
          min r5.x, r2.w, r6.x
          mad r11.xyzw, r11.xyzw, r5.xxxx, r9.xyzw
          add r5.x, r2.w, -r5.x
          ge r6.x, l(0.000000), r5.x
          if_nz r6.x
            mov r9.xyzw, r11.xyzw
            mov r2.w, r5.x
            break 
          endif 
          mov r9.xyzw, r11.xyzw
          mov r2.w, r5.x
        endif 
        iadd r3.w, r3.w, l(1)
      endloop 
    else 
      mov r9.xyzw, l(0,0,0,0)
      mov r2.w, l(1.000000)
    endif 
    add r0.x, r2.w, r9.w
    mul r0.x, r1.w, r0.x
    lt r0.y, l(0.000000), r0.x
    if_nz r0.y
      mul r0.y, r2.x, cb0[183].w
      add r0.z, -|r3.z|, r3.z
      mad r0.z, r2.w, r0.z, |r3.z|
      mad r0.z, r0.z, l(2.000000), l(2.000000)
      div r0.zw, l(0.000000, 0.000000, -1.000000, 1.000000), r0.zzzz
      mul r0.zw, r0.zzzw, r3.yyyx
      mad r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.950000, 0.950000), l(0.000000, 0.000000, 0.500000, 0.500000)
      sample_l_indexable(texture2d)(float,float,float,float) r0.yzw, r0.zwzz, t1.wxyz, s0, r0.y
      mov_sat r2.xzw, r0.yyzw
      movc r0.yzw, cb0[184].zzzz, r2.xxzw, r0.yyzw
      div r0.yzw, r0.yyzw, cb0[176].wwww
      mad r9.xyz, r0.yzwy, r0.xxxx, r9.xyzx
    endif 
    mul r0.x, r4.z, l(0.080000)
    mad r0.yzw, -r4.zzzz, l(0.000000, 0.080000, 0.080000, 0.080000), r8.xxzw
    mad r0.xyz, r4.xxxx, r0.yzwy, r0.xxxx
    dp3 r0.w, r0.xyzx, l(0.333333343, 0.333333343, 0.333333343, 0.000000)
    mul_sat r0.w, r0.w, l(50.000000)
    dp3_sat r4.w, r5.yzwy, r7.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r2.xz, r4.wyww, t0.xzyw, s0, l(0.000000)
    mad r0.xyz, r0.xyzx, r2.xxxx, r2.zzzz
    mul r0.xyz, r0.wwww, r0.xyzx
    mul r0.xyz, r0.xyzx, r9.xyzx
    mul r1.xyz, r6.zzzz, r0.xyzx
    dp3 r2.y, r1.xyzx, l(0.212639, 0.715168655, 0.0721923187, 0.000000)
  endif 
endif 
add r0.x, r2.y, r10.w
add r0.yzw, r1.xxyz, r10.xxyz
mul r0.xyzw, r0.xyzw, cb0[176].wwww
max r0.xyzw, r0.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
min o0.xyzw, r0.yzwx, l(64512.000000, 64512.000000, 64512.000000, 64512.000000)
ret 
// Approximately 629 instruction slots used