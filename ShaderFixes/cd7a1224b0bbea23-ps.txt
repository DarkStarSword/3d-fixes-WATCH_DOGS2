// asmtool.py --fix-wd2-screen-space-reflections -i -f --only-autofixed cd7a1224b0bbea23-ps.txt
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.52 on Fri Jan 06 18:26:58 2017
//
//
// Buffer Definitions: 
//
// cbuffer Global
// {
//
//   float4 EnvironmentLuminances;      // Offset:    0 Size:    16 [unused]
//   float4 FakeEarthShadowPlane;       // Offset:   16 Size:    16 [unused]
//   float4 GlobalLightsIntensity;      // Offset:   32 Size:    16 [unused]
//   float4 GlobalWeatherControl;       // Offset:   48 Size:    16 [unused]
//   float4 MaterialWetnessParams[22];  // Offset:   64 Size:   352 [unused]
//   float4 WindGlobalTurbulence;       // Offset:  416 Size:    16 [unused]
//   float4 WindVelocityTextureCoverage;// Offset:  432 Size:    16 [unused]
//   float4 WorldLoadingRingSizes[2];   // Offset:  448 Size:    32 [unused]
//   
//   struct SGlobalDebugValues
//   {
//       
//       float debugValue0;             // Offset:  480
//       float debugValue1;             // Offset:  484
//       float debugValue2;             // Offset:  488
//       float debugValue3;             // Offset:  492
//
//   } DebugValues;                     // Offset:  480 Size:    16 [unused]
//   float3 SunShadowDirection;         // Offset:  496 Size:    12 [unused]
//   float CrowdAnimationStartTime;     // Offset:  508 Size:     4 [unused]
//   float3 WindGlobalNoiseTextureChannelSel;// Offset:  512 Size:    12 [unused]
//   float GlobalReflectionTextureBlendRatio;// Offset:  524 Size:     4 [unused]
//   float3 WindGlobalNoiseTextureCoverage;// Offset:  528 Size:    12 [unused]
//   float GlobalWaterLevel;            // Offset:  540 Size:     4 [unused]
//   
//   struct SGlobalScalars
//   {
//       
//       float time;                    // Offset:  544
//       float staticReflectionIntensity;// Offset:  548
//       float gameDeltaTime;           // Offset:  552
//
//   } GlobalScalars;                   // Offset:  544 Size:    12
//   float RcpStaticReflectionExposureScale;// Offset:  556 Size:     4 [unused]
//   float2 GlobalNoiseSampler2DSquareSize;// Offset:  560 Size:     8 [unused]
//   float SandstormIntensity;          // Offset:  568 Size:     4 [unused]
//   float StaticReflectionIntensityDest;// Offset:  572 Size:     4 [unused]
//   float2 WindNoiseDeltaVector;       // Offset:  576 Size:     8 [unused]
//   float TimeOfDay;                   // Offset:  584 Size:     4 [unused]
//   float VertexAOIntensity;           // Offset:  588 Size:     4 [unused]
//   float2 WindVector;                 // Offset:  592 Size:     8 [unused]
//
// }
//
// cbuffer Viewport
// {
//
//   float4 CameraNearPlaneSize;        // Offset:    0 Size:    16
//   float4x4 DepthTextureTransform;    // Offset:   16 Size:    64 [unused]
//   float4 FSMClipPlanes;              // Offset:   80 Size:    16 [unused]
//   float4 FacettedShadowCastParams;   // Offset:   96 Size:    16 [unused]
//   float4 FogValues0;                 // Offset:  112 Size:    16 [unused]
//   float4 FogValues1;                 // Offset:  128 Size:    16 [unused]
//   float4x4 InvProjectionMatrix;      // Offset:  144 Size:    64
//   float4x4 InvProjectionMatrixDepth; // Offset:  208 Size:    64 [unused]
//   float4x3 InvViewMatrix;            // Offset:  272 Size:    48
//   float4x4 PreviousViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4x4 ProjectionMatrix;         // Offset:  384 Size:    64
//   float4 RainOcclusionFadeParams;    // Offset:  448 Size:    16 [unused]
//   float4x4 RainOcclusionProjectionMatrix;// Offset:  464 Size:    64 [unused]
//   float4 RainOcclusionShadowMapSize; // Offset:  528 Size:    16 [unused]
//   float4 ReflectionVolumeDebugColors[15];// Offset:  544 Size:   240 [unused]
//   float4 VPosOffset;                 // Offset:  784 Size:    16 [unused]
//   float4 VPosScale;                  // Offset:  800 Size:    16 [unused]
//   float4x3 ViewMatrix;               // Offset:  816 Size:    48
//   float4x4 ViewProjectionMatrix;     // Offset:  864 Size:    64 [unused]
//   float4x4 ViewRotProjectionMatrix;  // Offset:  928 Size:    64 [unused]
//   float4x4 ViewRotProjectionMatrixPure;// Offset:  992 Size:    64 [unused]
//   float4 ViewportSize;               // Offset: 1056 Size:    16
//   
//   struct SCameraDistances
//   {
//       
//       float near;                    // Offset: 1072
//       float far;                     // Offset: 1076
//       float view;                    // Offset: 1080
//       float oneOverView;             // Offset: 1084
//
//   } CameraDistances;                 // Offset: 1072 Size:    16
//   
//   struct SReflectionVolume
//   {
//       
//       float4x4 inverseTransform;     // Offset: 1088
//       float3 rcpFadeRangePositive;   // Offset: 1152
//       float textureArrayIndexAsFloat;// Offset: 1164
//       float3 rcpFadeRangeNegative;   // Offset: 1168
//       float fadeFactor;              // Offset: 1180
//       float2 multipliers;            // Offset: 1184
//       uint parallaxCorrection;       // Offset: 1192
//       float padding0;                // Offset: 1196
//
//   } ReflectionVolumes[15];           // Offset: 1088 Size:  1680
//   float3 CameraDirection;            // Offset: 2768 Size:    12 [unused]
//   float DefaultReflectionTextureArrayIndexAsFloat;// Offset: 2780 Size:     4 [unused]
//   float3 CameraPosition;             // Offset: 2784 Size:    12
//   float DynamicCubeMapReflectionTextureMaxMipIndex;// Offset: 2796 Size:     4
//   float3 CullingCameraPosition;      // Offset: 2800 Size:    12 [unused]
//   float ExposedWhitePointOverExposureScale;// Offset: 2812 Size:     4 [unused]
//   float3 FogColorVector;             // Offset: 2816 Size:    12 [unused]
//   float ExposureScale;               // Offset: 2828 Size:     4
//   float3 OppositeFogColorDelta;      // Offset: 2832 Size:    12 [unused]
//   float MaxParaboloidReflectionMipIndex;// Offset: 2844 Size:     4 [unused]
//   float3 SideFogColor;               // Offset: 2848 Size:    12 [unused]
//   float MaxStaticReflectionMipIndex; // Offset: 2860 Size:     4 [unused]
//   float3 SunFogColorDelta;           // Offset: 2864 Size:    12 [unused]
//   float MeasuredExposureScale;       // Offset: 2876 Size:     4 [unused]
//   float3 TemporalFilteringParams;    // Offset: 2880 Size:    12
//   float RaindropRippleScale;         // Offset: 2892 Size:     4 [unused]
//   float3 UncompressDepthWeights;     // Offset: 2896 Size:    12 [unused]
//   float ReflectionScaleDistanceMul;  // Offset: 2908 Size:     4 [unused]
//   float3 UncompressDepthWeightsWS;   // Offset: 2912 Size:    12 [unused]
//   float ReflectionScaleStrength;     // Offset: 2924 Size:     4 [unused]
//   float3 ViewPoint;                  // Offset: 2928 Size:    12 [unused]
//   float SkyParaboloidTextureMaxMipIndex;// Offset: 2940 Size:     4
//   float2 DefaultReflectionMultipliers;// Offset: 2944 Size:     8 [unused]
//   bool UseOnlySkyReflection;         // Offset: 2952 Size:     4
//   float2 ReflectionGIControl;        // Offset: 2960 Size:     8 [unused]
//   uint2 SelectedPixel;               // Offset: 2968 Size:     8 [unused]
//
// }
//
// cbuffer SkyBuffer
// {
//
//   struct SSkyLightingBuffer
//   {
//       
//       float4 m_lightIrradiance;      // Offset:    0
//       float4 m_lightIrradianceWithoutCloudsCoverage;// Offset:   16
//       float4 m_lightDirection;       // Offset:   32
//       float4 m_cloudLightVector;     // Offset:   48
//       float4 m_cloudIrradiance;      // Offset:   64
//       float4 m_environmentIrradianceSHRed;// Offset:   80
//       float4 m_environmentIrradianceSHGreen;// Offset:   96
//       float4 m_environmentIrradianceSHBlue;// Offset:  112
//       float4 m_environmentIrradianceAverage;// Offset:  128
//       float4 m_giDefaultProbeIrradiance[3];// Offset:  144
//       float4 m_giDefaultProbeTint[3];// Offset:  192
//       float4 m_giDirectEnvironmentIrradiance[3];// Offset:  240
//       float4 m_giBouncedEnvironmentIrradiance[4];// Offset:  288
//       float4 m_cloudAndSkyIrradianceSH[9];// Offset:  352
//       float4 m_skyOnlyIrradianceSH[9];// Offset:  496
//
//   } SkyLightStruct;                  // Offset:    0 Size:   640
//
// }
//
// cbuffer MaterialWD2Water
// {
//
//   float4 MaterialPickingID;          // Offset:    0 Size:    16 [unused]
//   float4 NormalUVTiling1;            // Offset:   16 Size:    16 [unused]
//   float4 SurfaceUVTiling1;           // Offset:   32 Size:    16 [unused]
//   float4 WaveUVTiling;               // Offset:   48 Size:    16
//   float3 WaterColor;                 // Offset:   64 Size:    12
//   float NormalIntensity;             // Offset:   76 Size:     4
//   float2 NormalScrolling1;           // Offset:   80 Size:     8 [unused]
//   float SkyLightFactor;              // Offset:   88 Size:     4
//   float SurfaceIntensity;            // Offset:   92 Size:     4 [unused]
//   float2 SurfaceScrolling1;          // Offset:   96 Size:     8 [unused]
//   float SurfaceWaveUVInfluence;      // Offset:  104 Size:     4 [unused]
//   float UseDuDv;                     // Offset:  108 Size:     4
//   float WaterExtinction;             // Offset:  112 Size:     4
//   float WaveIntensity;               // Offset:  116 Size:     4
//   float WaveSpeed;                   // Offset:  120 Size:     4
//
// }
//
// cbuffer SSR
// {
//
//   float4x4 CameraSpaceToPreviousProjectedSpace;// Offset:    0 Size:    64
//   float4x4 ProjectToPixelMatrix;     // Offset:   64 Size:    64
//   float SSRTextureMaxMipIndex;       // Offset:  128 Size:     4
//   bool GameIsPaused;                 // Offset:  132 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// Viewport__DepthVPSampler__SampObj__    sampler      NA          NA    0        1
// MaterialWD2Water__NormalTexture1__SampObj__    sampler      NA          NA    1        1
// MaterialWD2Water__WaveTexture__SampObj__    sampler      NA          NA    2        1
// ColorClamp                        sampler      NA          NA    3        1
// ColorWrap                         sampler      NA          NA    4        1
// WaterGrid__AccumulationCopyTexture__SampObj__    sampler      NA          NA    5        1
// WaterGrid__DepthCopyTexture__SampObj__    sampler      NA          NA    6        1
// WaterGrid__ExtinctionTexture__SampObj__    sampler      NA          NA    7        1
// WaterGrid__ScatteringTexture__SampObj__    sampler      NA          NA    8        1
// Viewport__SkyParaboloidTexture    texture  float4          2d    0        1
// Viewport__DynamicCubeMapReflectionTextureArray    texture  float4   cubearray    1        1
// MaterialWD2Water__NormalTexture1__TexObj__    texture  float4          2d    2        1
// MaterialWD2Water__WaveTexture__TexObj__    texture  float4          2d    3        1
// SSR__SSRDepthTexture__TexObj__    texture  float4          2d    4        1
// SSR__SSRTexture__TexObj__         texture  float4          2d    5        1
// SSR__MotionVectorTextureMS        texture  float4        2dMS    6        1
// WaterGrid__AccumulationCopyTexture__TexObj__    texture  float4          2d    7        1
// WaterGrid__DepthCopyTexture__TexObj__    texture  float4          2d    8        1
// WaterGrid__ExtinctionTexture__TexObj__    texture  float4          2d    9        1
// WaterGrid__ScatteringTexture__TexObj__    texture  float4          2d   10        1
// Global                            cbuffer      NA          NA    0        1
// Viewport                          cbuffer      NA          NA    1        1
// SkyBuffer                         cbuffer      NA          NA    2        1
// MaterialWD2Water                  cbuffer      NA          NA    3        1
// SSR                               cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyz         1     NONE   float   xyz 
// TEXCOORD                 2   xyz         2     NONE   float   xyz 
// TEXCOORD                 3   xyz         3     NONE   float   xyz 
// TEXCOORD                 4   xyz         4     NONE   float   xyz 
// TEXCOORD                 5   xyzw        5     NONE   float   xy  
// SV_Position              0   xyzw        6      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
// Pixel Shader runs at sample frequency
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[35], immediateIndexed
dcl_constantbuffer cb1[185], dynamicIndexed
dcl_constantbuffer cb2[31], immediateIndexed
dcl_constantbuffer cb3[8], immediateIndexed
dcl_constantbuffer cb4[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecubearray (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2dms(0) (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t10
dcl_input_ps linear sample v0.xyzw
dcl_input_ps linear sample v1.xyz
dcl_input_ps linear sample v2.xyz
dcl_input_ps linear sample v3.xyz
dcl_input_ps linear sample v4.xyz
dcl_input_ps linear sample v5.xy
dcl_input_ps_siv linear noperspective sample v6.xy, position
dcl_output o0.xyzw
dcl_temps 19

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r15.xyzw, l(0, 0, 0, 0), t125.xyzw


// WATCH_DOGS2 Screen Space Reflection fix inserted with DarkStarSword's asmtool.py:
// asmtool.py --fix-wd2-screen-space-reflections -i -f --only-autofixed cd7a1224b0bbea23-ps.txt

// WATCH_DOGS2 CameraPosition adjustment inserted with DarkStarSword's asmtool.py:
// asmtool.py --fix-wd2-screen-space-reflections -i -f --only-autofixed cd7a1224b0bbea23-ps.txt

mul r15.w, r15.x, r15.y
mul r17.x, r15.w, cb1[9].x
mul r17.y, r15.w, cb1[10].x
mul r17.z, r15.w, cb1[11].x
mul r17.w, r15.w, cb1[12].x
dp4 r18.x, r17.xyzw, cb1[17].xyzw
dp4 r18.y, r17.xyzw, cb1[18].xyzw
dp4 r18.z, r17.xyzw, cb1[19].xyzw
add r16.xyz, cb1[174].xyz, r18.xyz

dp3 r0.x, v1.xyzx, v1.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v1.xyzx
dp3 r0.w, v4.xyzx, v4.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, v4.xyzx
dp3 r0.w, v3.xyzx, v3.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, v3.xyzx
sample_b_indexable(texture2d)(float,float,float,float) r3.xy, v5.xyxx, t2.xyzw, s1, cb1[180].x
mad r3.xy, r3.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r0.w, r3.xyxx, r3.xyxx
min r0.w, r0.w, l(1.000000)
add r0.w, -r0.w, l(1.000000)
sqrt r4.z, r0.w
mul r4.xy, r3.xyxx, cb3[4].wwww
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r4.xyzx
mul r2.xyz, r2.xyzx, r3.yyyy
mad r1.xyz, r3.xxxx, r1.xyzx, r2.xyzx
mad r0.xyz, r3.zzzz, r0.xyzx, r1.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mul r0.w, cb0[34].x, cb3[7].z
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), cb3[3].x
mul r1.xyzw, r1.xxxx, l(1.000000, 1.000000, 1.125480, 1.125480)
div r2.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), r1.xyzw
mul r3.xyzw, r0.wwww, l(0.040000, 0.020000, -0.040000, -0.020000)
mul r2.xyzw, r2.xyzw, l(0.100000, 0.100000, 0.100000, 0.100000)
mad r2.xyzw, v2.xyxy, r2.xyzw, r3.xyzw
sample_b_indexable(texture2d)(float,float,float,float) r3.xyz, r2.xyxx, t3.xyzw, s2, cb1[180].x
sample_b_indexable(texture2d)(float,float,float,float) r2.xyz, r2.zwzz, t3.xyzw, s2, cb1[180].x
add r3.xyz, r3.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
add r2.xyz, r2.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
mul r1.xzw, r1.wwww, r2.xxyz
mad r1.xyz, r3.xyzx, r1.yyyy, r1.xzwx
mul r0.w, cb3[7].y, l(-0.017500)
mul r2.xy, r0.wwww, r1.xyxx
mul r2.z, r1.z, l(0.050000)
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r2.xyzx
dp3 r2.x, r0.zxxz, r1.xyzx
dp3 r2.y, r0.yzyy, r1.xyzx
dp3 r2.z, r0.xyzx, r1.xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul r3.xyzw, r0.xxxx, r2.xyzx
dp3 r5.x, r4.zxxz, r1.xyzx
dp3 r5.y, r4.yzyy, r1.xyzx
dp3 r5.z, r4.xyzx, r1.xyzx
dp3 r0.y, r5.xyzx, r5.xyzx
rsq r0.y, r0.y
mul r0.yz, r0.yyyy, r5.xxyx
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb3[6].w
mul r0.yz, r0.yyzy, l(0.000000, 0.100000, 0.100000, 0.000000)
and r0.yz, r0.yyzy, r0.wwww
add r1.xyz, -v2.xyzx, r16.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r1.xyzx
div r5.xyz, v0.xyzx, v0.wwww
mad r6.xy, r5.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
add r6.z, -r6.y, l(1.000000)
sample_indexable(texture2d)(float,float,float,float) r1.w, r6.xzxx, t8.yzwx, s6
add r1.w, -r1.w, l(1.000000)
add r5.xy, r0.yzyy, r6.xzxx
sample_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t8.yzwx, s6
add r2.w, -r2.w, l(1.000000)
ge r4.w, r2.w, r1.w
and r4.w, r4.w, l(0x3f800000)
add r2.w, -r1.w, r2.w
mad r5.x, r4.w, r2.w, r1.w
mad r0.yz, r0.yyzy, r4.wwww, r6.xxzx
mov_sat r6.xy, r0.yzyy
mad r6.xy, r6.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r6.xy, r6.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
add r6.z, -r5.x, l(1.000000)
mov r6.w, l(1.000000)
dp4 r7.x, r6.xyzw, cb1[9].xyzw
dp4 r7.y, r6.xyzw, cb1[10].xyzw
dp4 r7.z, r6.xyzw, cb1[11].xyzw
dp4 r7.w, r6.xyzw, cb1[12].xyzw
div r6.xyzw, r7.xyzw, r7.wwww

// WATCH_DOGS2 unprojection (NVIDIA Ansel variant) fix inserted with DarkStarSword's asmtool.py:
// asmtool.py --fix-wd2-screen-space-reflections -i -f --only-autofixed cd7a1224b0bbea23-ps.txt

add r15.w, -r6.z, -r15.y
mul r15.w, r15.w, r15.x
mad r6.x, -r15.w, cb1[9].x, r6.x

dp4 r7.x, r6.xyzw, cb1[17].xyzw
dp4 r7.y, r6.xyzw, cb1[18].xyzw
dp4 r7.z, r6.xyzw, cb1[19].xyzw
mov r5.yw, l(0,1.000000,0,1.000000)
dp2 r1.w, r5.xyxx, cb1[11].zwzz
dp2 r2.w, r5.xyxx, cb1[12].zwzz
div r1.w, -r1.w, r2.w
dp2 r2.w, r5.zwzz, cb1[11].zwzz
dp2 r4.w, r5.zwzz, cb1[12].zwzz
div r2.w, -r2.w, r4.w
add r1.w, r1.w, -r2.w
add r5.xyz, r7.xyzx, -v2.xyzx
dp3 r2.w, r5.xyzx, r5.xyzx
sqrt r2.w, r2.w
add r1.w, -r1.w, l(0.050000)
mul r1.w, |r1.w|, l(20.000000)
min r1.w, r1.w, l(1.000000)
add r1.w, -r1.w, l(1.000000)
sample_indexable(texture2d)(float,float,float,float) r5.xyz, r0.yzyy, t7.xyzw, s5
div r6.xyz, r5.xyzx, cb1[176].wwww
max r5.xyz, r5.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r5.xyz, r5.xyzx, l(64512.000000, 64512.000000, 64512.000000, 0.000000)
dp3 r0.y, r5.xyzx, l(0.212639, 0.715168655, 0.0721923187, 0.000000)
mul r0.y, r0.y, l(0.100000)
min r0.y, r0.y, l(1.000000)
mad r0.z, r0.y, l(-2.000000), l(3.000000)
mul r0.y, r0.y, r0.y
mad r0.y, -r0.z, r0.y, l(1.000000)
mul r5.xyz, r0.yyyy, r6.xyzx
mov_sat r6.x, -r4.z
mul r0.y, r2.w, l(0.010000)
min r0.y, r0.y, l(1.000000)
rsq r0.y, r0.y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
mul r6.y, r0.y, cb3[7].x
sample_b_indexable(texture2d)(float,float,float,float) r7.xyz, r6.xyxx, t10.xyzw, s8, cb1[180].x
mul r7.xyz, r7.xyzx, cb3[4].xyzx
mul r8.xyz, r7.xyzx, l(0.010000, 0.010000, 0.010000, 0.000000)
sample_b_indexable(texture2d)(float,float,float,float) r6.xyz, r6.xyxx, t9.xyzw, s7, cb1[180].x
mul r0.y, r1.w, l(0.020000)
mad r7.xyz, -r7.xyzx, l(0.010000, 0.010000, 0.010000, 0.000000), l(0.800000, 0.800000, 0.800000, 0.000000)
mad r7.xyz, r0.yyyy, r7.xyzx, r8.xyzx
dp3 r0.y, -r4.yzxy, r3.yzwy
add r0.y, r0.y, r0.y
mul r8.xyz, -r0.yyyy, r3.wyzw
dp3 r0.y, r8.xyzx, r8.xyzx
rsq r0.y, r0.y
mul r8.xyz, r0.yyyy, r8.xyzx
dp3 r0.y, r8.xyzx, r4.xyzx
add r0.y, -r0.y, l(1.000000)
mul r0.z, r0.y, r0.y
mul r0.z, r0.z, r0.z
mul r0.y, r0.z, r0.y
mad r0.y, r0.y, l(0.990000), l(0.010000)
mad r2.xyz, r2.xyzx, r0.xxxx, -v1.xyzx
mad r2.xyz, r2.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000), v1.xyzx
dp3 r0.x, -r4.xyzx, r2.xyzx
add r0.x, r0.x, r0.x
mad r8.xyz, r2.xyzx, -r0.xxxx, -r4.xyzx
mul r0.x, cb1[183].w, l(0.0412514210)
mul r0.z, cb1[174].w, l(0.0412514210)
ge r1.w, r2.z, l(0.250000)
if_nz r1.w
  dp3 r9.x, r8.xyzx, cb1[51].xyzx
  dp3 r9.y, r8.xyzx, cb1[52].xyzx
  dp3 r9.z, r8.xyzx, cb1[53].xyzx
  dp3 r1.w, r9.xyzx, r9.xyzx
  rsq r1.w, r1.w
  mul r9.xyz, r1.wwww, r9.xyzx
  mov r10.xyz, v2.xyzx
  mov r10.w, l(1.000000)
  dp4 r11.x, r10.xyzw, cb1[51].xyzw
  dp4 r11.y, r10.xyzw, cb1[52].xyzw
  dp4 r11.z, r10.xyzw, cb1[53].xyzw
  dp3 r10.x, r2.xyzx, cb1[51].xyzx
  dp3 r10.y, r2.xyzx, cb1[52].xyzx
  dp3 r10.z, r2.xyzx, cb1[53].xyzx
  mul r1.w, r11.z, l(-0.010000)
  max r1.w, r1.w, l(0.001000)
  mad r2.xyz, r10.xyzx, r1.wwww, r11.xyzx
  mad r1.w, r9.z, l(1000.000000), r2.z
  lt r1.w, l(-0.010000), r1.w
  add r4.w, -r2.z, l(-0.010000)
  div r4.w, r4.w, r9.z
  movc r1.w, r1.w, r4.w, l(1000.000000)
  mad r9.xyz, r9.xyzx, r1.wwww, r2.xyzx
  mov r2.w, l(1.000000)
  dp4 r10.y, r2.xyzw, cb4[4].xyzw
  dp4 r10.x, r2.xyzw, cb4[5].xyzw
  dp4 r1.w, r2.xyzw, cb4[7].xyzw

// ProjectToPixelMatrix - stereo correction * resolution / 2:
add r15.w, r1.w, -r15.y
mul r15.w, r15.w, r15.x
mul r15.w, r15.w, cb1[66].x
mad r10.y, r15.w, l(0.5), r10.y

  mov r9.w, l(1.000000)
  dp4 r2.x, r9.xyzw, cb4[4].xyzw
  dp4 r2.y, r9.xyzw, cb4[5].xyzw
  dp4 r2.w, r9.xyzw, cb4[7].xyzw

// ProjectToPixelMatrix - stereo correction * resolution / 2:
add r15.w, r2.w, -r15.y
mul r15.w, r15.w, r15.x
mul r15.w, r15.w, cb1[66].x
mad r2.x, r15.w, l(0.5), r2.x

  div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
  mul r9.xy, r1.wwww, r10.xyxx
  mul r10.zw, r2.wwww, r2.xxxy
  mul r4.w, r1.w, r2.z
  mul r5.w, r2.w, r9.z
  add r9.zw, cb1[66].yyyx, l(0.000000, 0.000000, -0.500000, -0.500000)
  lt r11.xy, r9.zwzz, r10.wzww
  lt r12.xy, r10.wzww, l(0.500000, 0.500000, 0.000000, 0.000000)
  or r12.xy, r11.xyxx, r12.xyxx
  movc r9.zw, r11.xxxy, -r9.zzzw, l(0,0,-0.500000,-0.500000)
  mad r9.zw, r2.yyyx, r2.wwww, r9.zzzw
  mad r2.xy, r2.yxyy, r2.wwww, -r9.xyxx
  div r2.xy, r9.zwzz, r2.xyxx
  and r2.x, r2.x, r12.x
  max r2.y, r2.y, r2.x
  movc r2.x, r12.y, r2.y, r2.x
  mad r9.zw, r10.yyyx, r1.wwww, -r10.zzzw
  mad r9.zw, r2.xxxx, r9.zzzw, r10.zzzw
  add r2.y, r1.w, -r2.w
  mad r2.y, r2.x, r2.y, r2.w
  mad r2.w, r2.z, r1.w, -r5.w
  mad r2.x, r2.x, r2.w, r5.w
  mad r10.zw, r10.yyyx, r1.wwww, -r9.zzzw
  dp2 r2.w, r10.zwzz, r10.zwzz
  lt r2.w, r2.w, l(0.000100)
  mad r10.zw, r10.yyyx, r1.wwww, l(0.000000, 0.000000, 0.010000, 0.010000)
  movc r12.xy, r2.wwww, r10.zwzz, r9.zwzz
  mad r12.zw, -r10.yyyx, r1.wwww, r12.xxxy
  lt r2.w, |r12.z|, |r12.w|
  movc r9.xy, r2.wwww, r9.xyxx, r9.yxyy
  movc r10.xyz, r2.wwww, r12.ywzy, r12.xzwx
  lt r5.w, l(0.000000), r10.y
  lt r6.w, r10.y, l(0.000000)
  iadd r5.w, -r5.w, r6.w
  itof r11.x, r5.w
  div r5.w, r11.x, r10.y
  mul r11.y, r10.z, r5.w
  mad r2.x, -r2.z, r1.w, r2.x
  add r2.y, -r1.w, r2.y
  mul r2.xy, r5.wwww, r2.xyxx
  mul r5.w, r10.x, r11.x
  ge r6.w, r2.z, l(99999.796875)
  ge r7.w, l(100000.000000), r2.z
  and r6.w, r6.w, r7.w
  mov r10.y, l(1.000000)
  mov r12.x, r4.w
  mov r12.y, r1.w
  mov r9.zw, l(0,0,-1.000000,-1.000000)
  mov r13.xy, r9.xyxx
  mov r7.w, l(0)
  mov r8.w, r6.w
  mov r14.y, r2.z
  mov r10.z, r6.w
  loop 
    mul r10.w, r11.x, r13.x
    ge r10.w, r5.w, r10.w
    ilt r11.w, r7.w, l(200)
    and r10.w, r10.w, r11.w
    not r11.w, r10.z
    and r10.w, r10.w, r11.w
    breakc_z r10.w
    mad r12.xz, r2.xxxx, l(5.000000, 0.000000, 2.500000, 0.000000), r12.xxxx
    mad r12.yw, r2.yyyy, l(0.000000, 5.000000, 0.000000, 2.500000), r12.yyyy
    div r14.x, r12.z, r12.w
    lt r10.w, r14.x, r14.y
    movc r12.zw, r10.wwww, r14.xxxy, r14.yyyx
    movc r9.zw, r2.wwww, r13.yyyx, r13.xxxy
    mul r13.zw, r9.zzzw, cb1[66].zzzw
    sample_l_indexable(texture2d)(float,float,float,float) r10.x, r13.zwzz, t4.xyzw, s0, l(0.000000)
    dp2 r10.w, r10.xyxx, cb1[11].zwzz
    dp2 r10.x, r10.xyxx, cb1[12].zwzz
    div r10.x, -r10.w, r10.x
    ge r10.w, -r10.x, r12.z
    add r10.x, -r10.x, l(-0.200000)
    ge r10.x, r12.w, r10.x
    and r10.z, r10.x, r10.w
    mad r13.xy, r11.xyxx, l(5.000000, 5.000000, 0.000000, 0.000000), r13.xyxx
    iadd r7.w, r7.w, l(1)
    mov r8.w, r10.z
    mov r14.y, r14.x
  endloop 
  if_nz r8.w
    if_z cb4[8].y
      ftoi r2.xy, r9.zwzz
      imax r2.xy, r2.xyxx, l(0, 0, 0, 0)
      ftoi r2.zw, cb1[66].xxxy
      iadd r2.zw, r2.zzzw, l(0, 0, -1, -1)
      imin r2.xy, r2.zwzz, r2.xyxx
      mov r2.zw, l(0,0,0,0)
      ldms_indexable(texture2dms)(float,float,float,float) r10.xy, r2.xyww, t6.xyzw, l(0)
      ne r9.xy, r10.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
      and r1.w, r9.y, r9.x
      if_nz r1.w
        lt r1.w, l(1.000000), r10.x
        add r4.w, r10.x, l(-2.000000)
        movc r10.x, r1.w, r4.w, r10.x
      else 
        ld_indexable(texture2d)(float,float,float,float) r2.z, r2.xyzw, t4.zwxy
        mov r2.w, l(1.000000)
        dp2 r1.w, r2.zwzz, cb1[11].zwzz
        dp2 r2.z, r2.zwzz, cb1[12].zwzz
        div r1.w, -r1.w, r2.z
        itof r2.xy, r2.xyxx
        mad r2.xy, r2.xyxx, cb1[66].zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
        mul r2.xy, r2.xyxx, cb1[0].xyxx
        mul r2.xy, r2.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
        div r1.w, r1.w, cb1[67].x
        mov r2.z, -cb1[67].x
        mul r2.xyz, r1.wwww, r2.xyzx
        mov r2.w, l(1.000000)
        dp4 r9.x, r2.xyzw, cb1[24].xyzw
        dp4 r9.y, r2.xyzw, cb1[25].xyzw
        dp4 r1.w, r2.xyzw, cb1[27].xyzw

// ProjectionMatrix - standard stereo correction:
add r15.w, r1.w, -r15.y
mad r9.x, r15.w, r15.x, r9.x

        dp4 r11.x, r2.xyzw, cb4[0].xyzw
        dp4 r11.y, r2.xyzw, cb4[1].xyzw
        dp4 r2.x, r2.xyzw, cb4[3].xyzw

// CameraSpaceToPreviousProjectedSpace - standard stereo correction:
add r15.w, r2.x, -r15.y
mad r11.x, r15.w, r15.x, r11.x

        max r2.x, r2.x, l(0.000100)
        div r2.xy, r11.xyxx, r2.xxxx
        div r2.zw, r9.xxxy, r1.wwww
        add r2.xy, -r2.xyxx, r2.zwzz
        mul r10.xz, r2.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
        mov r10.y, -r10.z
      endif 
    else 
      mov r10.xy, l(0,0,0,0)
    endif 
    mad r2.xy, r9.zwzz, cb1[66].zwzz, -r10.xyxx
    mul r9.xy, r2.xyxx, cb1[66].xyxx
    ftoi r10.xy, r9.xyxx
    mov r10.zw, l(0,0,0,0)
    ld_indexable(texture2d)(float,float,float,float) r9.x, r10.xyzw, t4.xyzw
    mov r9.y, l(1.000000)
    dp2 r1.w, r9.xyxx, cb1[11].zwzz
    dp2 r4.w, r9.xyxx, cb1[12].zwzz
    div r1.w, -r1.w, r4.w
    ge r1.w, r11.z, -r1.w
    not r4.w, r1.w
    add r9.xy, -r9.zwzz, v6.xyxx
    dp2 r5.w, r9.xyxx, r9.xyxx
    sqrt r5.w, r5.w
    ge r6.w, r5.w, l(700.000000)
    add r5.w, r5.w, l(-700.000000)
    mad r5.w, -r5.w, l(0.00333333341), l(1.000000)
    movc r5.w, r6.w, r5.w, l(1.000000)
    add r2.zw, -r2.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
    mul_sat r9.xyzw, r2.xzyw, l(10.000000, 10.000000, 10.000000, 10.000000)
    mul r2.z, r9.y, r9.x
    mul r2.z, r9.z, r2.z
    mul r2.z, r9.w, r2.z
    mul r2.z, r2.z, r5.w
    movc r1.w, r1.w, r2.z, l(1.000000)
  else 
    mov r2.xy, l(0,0,0,0)
    mov r1.w, l(0)
    mov r4.w, l(0)
  endif 
  if_z r4.w
    lt r2.z, l(0.000000), r1.w
    if_nz r2.z
      mul r2.z, cb4[8].x, l(0.0412514210)
      sample_l_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyxx, t5.xyzw, s3, r2.z
    else 
      mov r2.xyz, l(0,0,0,0)
    endif 
  else 
    mov r2.xyz, l(0,0,0,0)
    mov r1.w, l(0)
  endif 
else 
  mov r2.xyz, l(0,0,0,0)
  mov r1.w, l(0)
endif 
lt r2.w, l(0.000000), r1.w
if_nz r2.w
  div r2.xyz, r2.xyzx, cb1[176].wwww
  lt r4.w, r1.w, l(1.000000)
  if_nz r4.w
    if_z cb1[184].z
      mov r9.xyz, v2.xyzx
      mov r9.w, l(1.000000)
      mov r10.xyzw, l(0,0,0,0)
      mov r4.w, l(1.000000)
      mov r5.w, l(0)
      loop 
        uge r6.w, r5.w, l(15)
        breakc_nz r6.w
        imul null, r6.w, r5.w, l(7)
        dp4 r11.x, r9.xyzw, cb1[r6.w + 68].xyzw
        dp4 r11.y, r9.xyzw, cb1[r6.w + 69].xyzw
        dp4 r11.z, r9.xyzw, cb1[r6.w + 70].xyzw
        ge r12.xyz, r11.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
        movc r12.xyz, r12.xyzx, cb1[r6.w + 72].xyzx, cb1[r6.w + 73].xyzx
        add r11.xyz, -|r11.xyzx|, l(1.000000, 1.000000, 1.000000, 0.000000)
        mul_sat r11.xyz, r12.xyzx, r11.xyzx
        mul r7.w, r11.y, r11.x
        mul r7.w, r11.z, r7.w
        lt r8.w, l(0.000000), r7.w
        if_nz r8.w
          dp3 r11.x, r8.xyzx, cb1[r6.w + 68].xyzx
          dp3 r11.y, r8.xyzx, cb1[r6.w + 69].xyzx
          dp3 r11.z, r8.xyzx, cb1[r6.w + 70].xyzx
          mul r7.w, r7.w, cb1[r6.w + 73].w
          mov r11.w, cb1[r6.w + 72].w
          sample_l_indexable(texturecubearray)(float,float,float,float) r11.xyzw, r11.xyzw, t1.xyzw, s4, r0.z
          mul r11.xyzw, r11.xyzw, cb1[r6.w + 74].xxxy
          min r6.w, r4.w, r7.w
          mad r11.xyzw, r11.xyzw, r6.wwww, r10.xyzw
          add r6.w, r4.w, -r6.w
          ge r7.w, l(0.000000), r6.w
          if_nz r7.w
            mov r10.xyzw, r11.xyzw
            mov r4.w, r6.w
            break 
          endif 
          mov r10.xyzw, r11.xyzw
          mov r4.w, r6.w
        endif 
        iadd r5.w, r5.w, l(1)
      endloop 
    else 
      mov r10.xyzw, l(0,0,0,0)
      mov r4.w, l(1.000000)
    endif 
    add r5.w, r4.w, r10.w
    lt r6.w, l(0.000000), r5.w
    if_nz r6.w
      add r6.w, -|r8.z|, r8.z
      mad r4.w, r4.w, r6.w, |r8.z|
      mad r4.w, r4.w, l(2.000000), l(2.000000)
      div r9.xy, l(-1.000000, 1.000000, 0.000000, 0.000000), r4.wwww
      mul r9.xy, r8.yxyy, r9.xyxx
      mad r9.xy, r9.xyxx, l(0.950000, 0.950000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      sample_l_indexable(texture2d)(float,float,float,float) r9.xyz, r9.xyxx, t0.xyzw, s3, r0.x
      mov_sat r11.xyz, r9.xyzx
      movc r9.xyz, cb1[184].zzzz, r11.xyzx, r9.xyzx
      div r9.xyz, r9.xyzx, cb1[176].wwww
      mad r10.xyz, r9.xyzx, r5.wwww, r10.xyzx
    endif 
    mov_sat r1.w, r1.w
    add r9.xyz, r2.xyzx, -r10.xyzx
    mad r2.xyz, r1.wwww, r9.xyzx, r10.xyzx
  endif 
else 
  if_z cb1[184].z
    mov r9.xyz, v2.xyzx
    mov r9.w, l(1.000000)
    mov r2.xyzw, l(0,0,0,0)
    mov r1.w, l(1.000000)
    mov r4.w, l(0)
    loop 
      uge r5.w, r4.w, l(15)
      breakc_nz r5.w
      imul null, r5.w, r4.w, l(7)
      dp4 r10.x, r9.xyzw, cb1[r5.w + 68].xyzw
      dp4 r10.y, r9.xyzw, cb1[r5.w + 69].xyzw
      dp4 r10.z, r9.xyzw, cb1[r5.w + 70].xyzw
      ge r11.xyz, r10.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      movc r11.xyz, r11.xyzx, cb1[r5.w + 72].xyzx, cb1[r5.w + 73].xyzx
      add r10.xyz, -|r10.xyzx|, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul_sat r10.xyz, r11.xyzx, r10.xyzx
      mul r6.w, r10.y, r10.x
      mul r6.w, r10.z, r6.w
      lt r7.w, l(0.000000), r6.w
      if_nz r7.w
        dp3 r10.x, r8.xyzx, cb1[r5.w + 68].xyzx
        dp3 r10.y, r8.xyzx, cb1[r5.w + 69].xyzx
        dp3 r10.z, r8.xyzx, cb1[r5.w + 70].xyzx
        mul r6.w, r6.w, cb1[r5.w + 73].w
        mov r10.w, cb1[r5.w + 72].w
        sample_l_indexable(texturecubearray)(float,float,float,float) r10.xyzw, r10.xyzw, t1.xyzw, s4, r0.z
        mul r10.xyzw, r10.xyzw, cb1[r5.w + 74].xxxy
        min r5.w, r1.w, r6.w
        mad r10.xyzw, r10.xyzw, r5.wwww, r2.xyzw
        add r5.w, r1.w, -r5.w
        ge r6.w, l(0.000000), r5.w
        if_nz r6.w
          mov r2.xyzw, r10.xyzw
          mov r1.w, r5.w
          break 
        endif 
        mov r2.xyzw, r10.xyzw
        mov r1.w, r5.w
      endif 
      iadd r4.w, r4.w, l(1)
    endloop 
  else 
    mov r2.xyzw, l(0,0,0,0)
    mov r1.w, l(1.000000)
  endif 
  add r0.z, r1.w, r2.w
  lt r2.w, l(0.000000), r0.z
  if_nz r2.w
    add r2.w, -|r8.z|, r8.z
    mad r1.w, r1.w, r2.w, |r8.z|
    mad r1.w, r1.w, l(2.000000), l(2.000000)
    div r8.zw, l(0.000000, 0.000000, -1.000000, 1.000000), r1.wwww
    mul r8.xy, r8.zwzz, r8.yxyy
    mad r8.xy, r8.xyxx, l(0.950000, 0.950000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    sample_l_indexable(texture2d)(float,float,float,float) r8.xyz, r8.xyxx, t0.xyzw, s3, r0.x
    mov_sat r9.xyz, r8.xyzx
    movc r8.xyz, cb1[184].zzzz, r9.xyzx, r8.xyzx
    div r8.xyz, r8.xyzx, cb1[176].wwww
    mad r2.xyz, r8.xyzx, r0.zzzz, r2.xyzx
  endif 
endif 
mad r0.xzw, r1.xxyz, r0.wwww, cb2[2].xxyz
dp3 r1.x, r0.xzwx, r0.xzwx
rsq r1.x, r1.x
mul r0.xzw, r0.xxzw, r1.xxxx
dp3 r1.x, r3.wyzw, cb2[2].xyzx
dp3 r1.y, r3.wyzw, r4.xyzx
max r1.xy, r1.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
dp3 r0.x, r3.wyzw, r0.xzwx
max r0.x, r0.x, l(0.000000)
mul r0.x, r0.x, r0.x
mad r0.x, r0.x, l(-0.999993742), l(1.000000)
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, l(3.14159274)
mul r0.z, r1.x, r1.x
mad r0.w, -r1.x, r1.x, l(1.000000)
mul r0.w, r0.w, l(0.00000624999984)
max r0.z, r0.z, l(1.000000047E-034)
div r0.z, r0.w, r0.z
add r0.z, r0.z, l(1.000000)
sqrt r0.z, r0.z
add r0.z, r0.z, l(1.000000)
mul r0.w, r1.y, r1.y
mad r1.y, -r1.y, r1.y, l(1.000000)
mul r1.y, r1.y, l(0.00000624999984)
max r0.w, r0.w, l(1.000000047E-034)
div r0.w, r1.y, r0.w
add r0.w, r0.w, l(1.000000)
sqrt r0.w, r0.w
add r0.w, r0.w, l(1.000000)
div r0.xzw, l(0.00000624999984, 0.000000, 2.000000, 2.000000), r0.xxzw
mul r0.z, r0.w, r0.z
mul r0.x, r0.z, r0.x
mul r0.x, r0.y, r0.x
mul r0.x, r0.x, r1.x
mul r0.xzw, r0.xxxx, cb2[0].xxyz
mad r0.xzw, r0.xxzw, cb3[5].zzzz, r2.xxyz
mul r1.xyz, r3.yzwy, l(-0.488603, 0.488603, -0.488603, 0.000000)
mul r2.xyz, r1.xxxx, cb2[23].xyzx
mad r2.xyz, cb2[22].xyzx, l(0.282095, 0.282095, 0.282095, 0.000000), r2.xyzx
mad r1.xyw, r1.yyyy, cb2[24].xyxz, r2.xyxz
mad r1.xyz, r1.zzzz, cb2[25].xyzx, r1.xywx
mul r2.xyzw, r3.xyzw, r3.yzzz
mul r2.xyw, r2.xyxw, l(1.092548, -1.092548, 0.000000, -1.092548)
mad r1.xyz, r2.xxxx, cb2[26].xyzx, r1.xyzx
mad r1.xyz, r2.yyyy, cb2[27].xyzx, r1.xyzx
mad r1.w, r2.z, l(3.000000), l(-1.000000)
mul r1.w, r1.w, l(0.315392)
mad r1.xyz, r1.wwww, cb2[28].xyzx, r1.xyzx
mad r1.xyz, r2.wwww, cb2[29].xyzx, r1.xyzx
mul r1.w, r3.y, r3.y
mad r1.w, r3.w, r3.w, -r1.w
mul r1.w, r1.w, l(0.546274)
mad r1.xyz, r1.wwww, cb2[30].xyzx, r1.xyzx
mul r2.xyz, r7.xyzx, cb3[5].zzzz
mul r3.xyz, cb2[0].xyzx, l(0.318309873, 0.318309873, 0.318309873, 0.000000)
mad r1.xyz, r1.xyzx, l(6.28318548, 6.28318548, 6.28318548, 0.000000), r3.xyzx
mul r1.xyz, r1.xyzx, r2.xyzx
mad r1.xyz, r5.xyzx, r6.xyzx, r1.xyzx
add r0.xzw, r0.xxzw, -r1.xxyz
mad r0.xyz, r0.yyyy, r0.xzwx, r1.xyzx
mul r0.xyz, r0.xyzx, cb1[176].wwww
max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
min o0.xyz, r0.xyzx, l(64512.000000, 64512.000000, 64512.000000, 0.000000)
mul r0.xyz, r5.xyzx, cb1[176].wwww
max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r0.xyz, r0.xyzx, l(64512.000000, 64512.000000, 64512.000000, 0.000000)
dp3 o0.w, r0.xyzx, l(0.212639, 0.715168655, 0.0721923187, 0.000000)
ret 
// Approximately 554 instruction slots used