;------------------------------------------------------------------------------------------------------
; Logging options.
; Comment line or set value to 0 for no logging.
;------------------------------------------------------------------------------------------------------
[Logging]

; Log all API usage
calls=0

; Log Input key actions
input=0

; Super verbose massive log
debug=0

; Unbuffered logging to avoid missing anything at file end
unbuffered=0

; Force the CPU affinity to use only a single CPU for debugging multi-threaded
force_cpu_affinity=0

; Log NVAPI convergence modifications
convergence=0
; Log NVAPI separation modifications
separation=0


; ------------------------------------------------------------------------------------------------------
; Default constants to pass directly to shaders as IniParams
; ------------------------------------------------------------------------------------------------------
[Constants]
; Set x2 to 1 to disable falling leaves and other particles that can desync
; between each eye:
x2 = 0
; y1 is the crosshair mode
; 0 = auto
; 1 = on
; 2 = off
y1 = 0
; z1 is the crosshair opacity threshold for auto mode - when more opaque than
; this the crosshair will be on, when more transparent it will be off.
; The large circle is always off in auto mode.
z1 = 0.8

; x7 is used by the 3DVision2SBS custom shader. To use, find the [Present]
; section below and uncomment the 'run = CustomShader3DVision2SBS' line.
; 0 = Regular 3D Vision
; 1 = Reversed 3D Vision
; 2 = Side by Side
; 3 = Reversed Side by Side
; 4 = Top and Bottom
; 5 = Reversed Top and Bottom
x7 = 0


;------------------------------------------------------------------------------------------------------
; Custom settings override for any of [convergence, separation, x, y, z, w]
;
; Four types are supported - by default the bindings will simply load the
; configured settings, but type=hold can be specified to have a preset
; active while the button is held, type=toggle can be used to make a simple
; on/off toggle, and type=cycle can be used to cycle between several presets.
;
; Delays (type=hold only) and linear or cosine trasition periods (any key type)
; can be used to better synchonrise setting changes to the game's animations,
; or to smoothly adjust UI elements over a short period of time.
;
; Key bindings: For A-Z and 0-9 on the number row, just use that single
; character. For everything else (including mouse buttons), use the virtual key
; name (with or without the VK_ prefix) or hex code from this article:
; http://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx
;
; Keys can also be from XBox controllers using:
;   XB_LEFT_TRIGGER, XB_RIGHT_TRIGGER,
;   XB_LEFT_SHOULDER, XB_RIGHT_SHOULDER,
;   XB_LEFT_THUMB, XB_RIGHT_THUMB,
;   XB_DPAD_UP, XB_DPAD_DOWN, XB_DPAD_LEFT, XB_DPAD_RIGHT,
;   XB_A, XB_B, XB_X, XB_Y, XB_START, XB_BACK, XB_GUIDE
; By default all attached controllers are used - to associate a binding with a
; specific controller add the controller number 1-4 to the prefix, like
; XB2_LEFT_TRIGGER, though this may be more useful for hunting than playing.
;------------------------------------------------------------------------------------------------------

; Example for changing default settings
;[Key1]
;Key = z
;separation = 100.0
;convergence = 4.0
;x = 0.98

; Example to support momentary hold type overrides, like aiming.
;[Key2]
;Key = RBUTTON
;convergence = 0.1
;type = hold

; Example for a toggle override.
;[Key3]
;Key = q
;separation = 0.1
;type = toggle
;y = 0.0

; Example for a momentary hold, but with a delay followed by a smooth
; transition (ms) on hold and release to sync better with the game. Note that
; delay only works with type=hold (for now), while transitions will work with
; all types.
;[Key4]
;Key = XB_LEFT_TRIGGER
;type = hold
;y = 0.25
;delay = 100
;transition = 100
;transition_type = linear
;release_delay = 0
;release_transition = 500
;release_transition_type = cosine

; Example of a cycle transition that might be used to provide several presets
; that set both convergence and UI depth to suit different scenes in a game.
; Cosine transitions are used to smooth the changes over 1/10 of a second.
;[Key5]
;Key = Q
;type = cycle
;convergence = 1.45, 1.13, 0.98
;z           = 0.25,  0.5, 0.75
;transition = 100
;transition_type = cosine

[KeyConvergence]
Key = ~
Convergence = 3.0, 1.5
transition = 300
transition_type = cosine
type = cycle

[KeyCrosshair]
; K for Krosshair? I dunno - not many free keys in this game ;-)
Key = K
; 0 = auto
; 1 = on
; 2 = off
y1 = 1, 2, 0
type = cycle

[KeyKillLeaves]
Key = F1
x2 = 1
type = toggle

;------------------------------------------------------------------------------------------------------
; Shader hunting options.
; Default setup is to use keyboard similar to Helix presets
;------------------------------------------------------------------------------------------------------
[Hunting]

; 0: Release mode is with shader hunting disabled, optimized for speed.
; 1: Hunting mode enabled
; 2: Hunting mode "soft disabled" - can be turned on via the toggle_hunting key
hunting=0

; Highlight mode of currently selected shader / rendertarget.
; "skip" = skip shader. don't render anything using the currently selected shader.
; "original" = fall back to original shader if the currently selected shader was patched.
; "pink" = make the output hot pink to make it standout.
; "mono" = disable stereo for the selected shader / rendertarget.
; "zero" = shader output is all zero. NOTE: this has a big performance impact.
marking_mode=skip

; Key bindings: For A-Z and 0-9 on the number row, just use that single
; character. For everything else (including mouse buttons), use the virtual key
; name (with or without the VK_ prefix) or hex code from this article:
; http://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx
;
; XBox controllers are supported using the same bindings as the [Key] sections
; (see above). If the game already uses the first controller you might try
; using the second controller for hunting with e.g. XB2_LEFT_SHOULDER

; rotate through all VISIBLE pixel shaders at the current scene.
previous_pixelshader=VK_NUMPAD1
next_pixelshader=VK_NUMPAD2
mark_pixelshader=VK_NUMPAD3

; rotate through all VISIBLE vertex shaders at the current scene.
previous_vertexshader=VK_NUMPAD4
next_vertexshader=VK_NUMPAD5
mark_vertexshader=VK_NUMPAD6

; rotate through all USED index buffers at the current scene.
previous_indexbuffer=VK_NUMPAD7
next_indexbuffer=VK_NUMPAD8
mark_indexbuffer=VK_NUMPAD9

; rotate through all USED render targets at the current scene.
previous_rendertarget=VK_DIVIDE
next_rendertarget=VK_MULTIPLY
mark_rendertarget=VK_SUBTRACT

; rotate through all VISIBLE geometry shaders at the current scene.
; This is disabled since these keys are commonly pressed while alt+tabbed out
;previous_geometryshader = <
;next_geometryshader = >
;mark_geometryshader = /

; rotate through all VISIBLE domain shaders at the current scene.
; This is disabled since these keys are commonly pressed while alt+tabbed out
;previous_domainshader = [
;next_domainshader = ]
;mark_domainshader = \

; rotate through all VISIBLE hull shaders at the current scene.
; This is disabled only because it is rarely needed
;previous_hullshader = MINUS
;next_hullshader = EQUALS
;mark_hullshader = BACKSPACE

; rotate through all USED compute shaders at the current scene.
; Disabling compute shaders may cause crashes, so these are
; not enabled by default:
previous_computeshader = PAGE_UP
next_computeshader = PAGE_DOWN
mark_computeshader = HOME

; Re-enable shaders once done with hunting:
done_hunting=VK_ADD

; Screenshot as pns
take_screenshot=VK_SNAPSHOT

; reload all fixes from ShaderFixes folder
reload_fixes=F10

; Key to turn hunting itself on/off.  This will also show/hide overlay.
; Hunting must be set to either 1 or 2 to enable this toggle.
toggle_hunting=VK_NUMPAD0

; Key to reload the settings from the the d3dx.ini without restarting. This can
; be the same key as reload_fixes for convenience, or a different key may be
; used to avoid resetting the ini parameters every time the shaders are
; reloaded. Note that not all settings can be reloaded, so if something doesn't
; work as expected you may still have to restart the game:
reload_config=F10

; Hold this key to temporarily disable the fix - useful to quickly check what
; an effect looked like in the original game.
show_original=VK_F9

; snapshots to be made upon any shader Mark.  These give you snapshot when the
; shader is disabled, as a way to correlate image to shader hash.
;  mark_snapshot=0  // none
;  mark_snapshot=1  // mono, simple snapshot
;  mark_snapshot=2  // stereo snapshot
mark_snapshot=0

; Auto-repeat key rate in events per second.
repeat_rate=10


; tunable parameter to use in modified shaders as variable (StereoParams.Load(int3(1,0,0)).xyzw)
; enabling tuning results in a small performance hit because the parameter texture
;tune_enable=1
;tune_step=0.1
;tune1_up=VK_INSERT
;tune1_down=VK_DELETE
;tune2_up=X
;tune2_down=Z


; Dumps out the contents of each render target after every immediate draw call
; for the next frame. Takes up a large amount of space, so disabled by default.
analyse_frame=VK_F8

; Specifies options for the frame analysis feature. Options can be combined by
; separating them with a space.
;          log: Log draw calls and state changes (one log file per context)
;         hold: Continue analysing subsequent frames while the key is held
;  dump_rt_jps: Dumps out render targets as JPS files. These are the easiest to
;               work with and don't take up as much space as DDS files, but they
;               are not dumped for every render target and are missing some data.
;  dump_rt_dds: Dumps out render targets as DDS files. WARNING: This option may
;               require hundreds of gigabytes and a long time! Only use it if
;               you absolutely need more information than you can get otherwise.
;               Will also dump buffer type render targets & UAVs as .buf files.
;      dump_rt: Dumps render targets as JPS files when possible, or DDS when not.
;     clear_rt: Clears each render target the first time they are used in the
;               frame. Makes it easier to see what is being drawn if the game
;               doesn't clear them, but might cause some effects not to render.
;   dump_depth: Dumps depth/stencil targets as DDS files
; dump_tex_jps: Dumps textures as JPS files
; dump_tex_dds: Dumps textures as DDS files (Same warning as for dump_rt_dds)
;               Will also dump buffer type shader resource views as .buf files.
;     dump_tex: Dumps textures as JPS files when possible, or DDS when not.
;      dump_cb: Dumps constant buffers as binary .buf files
;  dump_cb_txt: Decodes constant buffers as an array of float4s
;      dump_vb: Dumps vertex buffers as binary .buf files
;  dump_vb_txt: Decodes vertex buffers as an array of float4s
;      dump_ib: Dumps index buffers as binary .buf files
;  dump_ib_txt: Decodes index buffers
; filename_reg: Normally the draw number is the first part of the filename so
;               that the files will be sorted in the order they were used in
;               the game. Sometimes it is more desirable to examine how a
;               specific output changed through the frame and this option will
;               place the register number first in the filename to allow that.
;         mono: Dump out mono textures instead of stereo. To dump both, specify
;               'mono stereo'. If neither are specified, defaults to stereo.
; analyse_options can also be specified in [ShaderOverride*] and
; [TextureOverride*] sections to set up triggers to change the options mid-way
; through a frame analysis, either for a single draw call (default), or
; permanently (by adding the 'persist' keyword).
analyse_options = log clear_rt

[ShaderOverrideAnalysis]
hash = 5f48ddf6f31ff15c
;analyse_options = persist log dump_rt clear_rt
[ShaderOverrideAnalysisSkip1]
hash=d592f5b6e1dc2478
analyse_options =
[ShaderOverrideAnalysisSkip2]
hash=80038b93c4898c8b
analyse_options =
[ShaderOverrideAnalysisSkip3]
hash=7e593a2ef69d4929
analyse_options =
[ShaderOverrideAnalysisSkip6]
hash=b56f0cd2c82267e7
analyse_options =
[ShaderOverrideAnalysisSkip7]
hash=b96895a880ee09a9
analyse_options =



;------------------------------------------------------------------------------------------------------
; Chain load other wrapper DLLs instead of system DLLs.
;------------------------------------------------------------------------------------------------------
[System]

;proxy_d3d9=d3d9_helix.dll
;proxy_d3d11=d3d11_helix.dll

; Options to use hooking instead of wrapping. Used in MGSV. Possible objects to hook include:
;   deferred_contexts
;   immediate_context
;   device
;   all - all of the above
; crash/hang workarounds:
;   except_set_shader_resources - work around crash on Win 7 with evil update
;   except_set_samplers - work around crash on Win 10
;   except_set_rasterizer_state - work around crash on Win 7 without evil update
;   skip_dxgi_factory - hack for MGSV, not recommended for other games as it
;                       may disable core 3DMigoto functionality in some cases
;   skip_dxgi_device - hack for MGSV on Win10 anniversary update
;   recommended - hook supported objects, safe workarounds enabled, skips not enabled
;hook=recommended

; Options to allow IDXGIFactory2 to be created and wrapped.  We have typically had good
; luck with returning an error for all non-dx11 requests, but some games error out
; with these checks in place.
; The allow_create_device allows D3D10 Device creation and is needed for some games.
; It has two options, allow_create_device=1, which will allow anything to go through
; without returning an error, and allow_create_device=2, which will force all requests
; to become D3D11 Devices, no matter what was passed in.
; The allow_platform_update option allows the D3D11Device1 and D3D11Context1
; interfaces introduced in Windows 8 and the platform update of Windows 7.
;
; Start with allow_check_interfaces, if that doesn't work then try allow_dxgi1_2,
; then try allow_create_device=2, lastly try allow_create_device=1
;
; Setting allow_dxgi1_2=2 may allow the Steam Overlay and Steam Controller to
; work in some games on Windows 7 and Windows 8, but could potentially disable
; core functionality in some cases, so only enable it if you need it.
;
;allow_check_interface=1
;allow_dxgi1_2=1
;allow_create_device=2
;allow_platform_update=1


;------------------------------------------------------------------------------------------------------
; Settings to force display device to a specific mode.
; Uncomment a value to force the specific setting.
;------------------------------------------------------------------------------------------------------
[Device]

; overrides screen resolution.
;width=1280
;height=720

; overrides refresh rate set by game.
;refresh_rate=60

; filters available video modes to those providing given refresh rates.
; some games don't explicitely set the refresh rate, but use the video mode.
; use this if setting refresh_rate doesn't work.
;filter_refresh_rate=24,59,60

; full_screen=1 forces creation of full screen devices and swap chains.
; use this for 3dtvplay if game won't active stereo mode.
; full_screen=2 will also disable SetWindowPos which might help in some games.
;full_screen=1

; This toggles forcing the full screen mode on and off. It will not take effect
; immediately, but will change what happens the next time the game tries to
; change the fullscreen mode. This is a specific hack to workaround a bug in
; Unity games, which crash when alt+tabbing out from exclusive mode fullscreen.
;
; To switch out of a Unity game without it crashing:
; Enable this option, Press F7, Alt+Enter, Alt+Tab
;toggle_full_screen = VK_F9

; some games explicitely disable stereo, prohibiting any stereo attempts.
; settings this to 1 ignores all stereo disabling calls and also calls NvAPI_Stereo_Enable to force stereo on.
;force_stereo=1

; almost all DX11 games deactivate window message handling.
; setting this to 1 reenables print screen handling, alt-tab key handling etc.
;allow_windowcommands=1

; Indicates where the resolution is obtained for texture hashes. Comment this
; out to never special case hashes that match the resolution or a multiple.
; Possible values are swap_chain and depth_stencil. Recommended to test which
; works for a given game (e.g. CryEngine always creates a swap chain that
; matches the native resolution so has to use depth_stencil).
get_resolution_from = swap_chain


;------------------------------------------------------------------------------------------------------
; Settings for NVidia stereo driver.
;------------------------------------------------------------------------------------------------------
[Stereo]

; games which have their own stereo renderer disable the NVidia automatic
; stereo mode and render themselves into stereo buffers (Crysis 3 for example).
; Setting this to 1 disables the game stereo renderer and enables NVidia auto stereo mechanism.
; This also forces 'false' as a return for any request for NvAPI_Stereo_IsEnabled.
automatic_mode=0

; Some games (CryEngine games, for example) lock the separation & convergence
; to a specific value, which can be undesirable. Set this to 1 to ignore these
; requests from the game to unlock the separation:
unlock_separation=0
unlock_convergence=0

; games without predefined profiles can't save stereo settings.
; enabling this options automatically creates a profile for unknown games.
; Note that there is now a more flexible means to alter the game's profile -
; refer to the [Profile] section.
create_profile=0

; sets the global surface creation heuristic for NVidia stero driver.
; 0 = NVAPI_STEREO_SURFACECREATEMODE_AUTO - use driver registry profile settings for surface creation mode.
; 1 = NVAPI_STEREO_SURFACECREATEMODE_FORCESTEREO - Always create stereo surfaces.
; 2 = NVAPI_STEREO_SURFACECREATEMODE_FORCEMONO - Always create mono surfaces.
;surface_createmode=1

; overrides surface creation mode for square surfaces.
;surface_square_createmode=1

; Force the NvAPI_Initialize to return an error so that games think stereo and NVidia is unavailable.
force_no_nvapi=0


;------------------------------------------------------------------------------------------------------
; Settings for GPU manipulations.
; Render settings override
;------------------------------------------------------------------------------------------------------
[Rendering]

; GPU program manipulations.

; Type of shader hashes in use:
;   3dmigoto = Traditional hash used by 3DMigoto (unseeded software FNV-1)
;   embedded = Use the first half of the MD5-like hash embedded within the
;              shaders to skip the hash calculation altogether.
;   bytecode = Only hash bytecode and signatures with hardware accelerated
;              CRC32C. Used to minimise duplicate shaders in certain games, but
;              potentially carries a higher risk of hash collisions between
;              unrelated shaders in some games (e.g. that only differ in
;              variable names). May occasionally avoid hash changes on game
;              updates due to changes in the game developer's build environment
;              (shader compiler version, build path embedded in debug info,
;              constants renamed, etc). Will not avoid hash changes if the
;              shader code, constant values, etc are changed.
shader_hash = embedded

; Shaders in game will be replaced by these custom shaders.
override_directory=ShaderFixes

; Automatically patched shaders will be written here if caching is enabled.
cache_directory=ShaderCache

; Shaders that are directly compiled by the game, instead of binary, go here.
storage_directory=ShaderFromGame

; cache all compiled .txt shaders into .bin. this removes loading stalls.
cache_shaders=1

; thread save data structure access. required on multithreaded rendering.
use_criticalsection=1

; Setting this option disables scissor limits
rasterizer_disable_scissor=1

; Tracks copies and updates to textures which may cause their hash to become
; out of sync with their contents - enable if texture hashes seem unreliable:
;track_texture_updates=1

; Registers where the StereoParams and IniParams textures will be assigned -
; change if the game already uses these registers. Newly decompiled shaders
; will use the new registers, but existing shaders will not be updated - best
; workflow is to remove ShaderCache after changing these and run a search and
; replace on all shaders in ShaderFixes. Set to -1 to disable if not required.
stereo_params = 125
ini_params = 120

;------------------------------------------------------------------------------------------------------
; Analyzation options.
;
; save all autofixed shaders as HLSL
export_fixed=0

; save all shaders sent to DX11 as ASM, or as HLSL text files if compiled by game.
export_shaders=0

export_binary=0

; save all shaders seen as HLSL code, autofixed or not. 1= HLSL only, 2=HLSL+OriginalASM, 3=HLSL+OriginalASM+RecompiledASM
export_hlsl=0

; stores a ShaderUsage.txt file on any marking button press.
dump_usage=0

;------------------------------------------------------------------------------------------------------
; Automatic shader fixes. Those settings here apply only on newly read shaders.
; All existing *_replace.txt or *_replace.bin files are not tampered with.
; If you change settings here, the best workflow is to delete all shaders in
; the shader cache directory and let them be fixed again.

; Stereoize all shader parameters with position semantic.
fix_sv_position=0

; Pixel depth evaluation.
;fix_ZRepair_DepthTexture1=SceneDepthTexture.x
;fix_ZRepair_Dependencies1=MinZ_MaxZRatio
;fix_ZRepair_ZPosCalc1=zTex * MinZ_MaxZRatio.z - MinZ_MaxZRatio.w
;fix_ZRepair_DepthTexture2=SceneDepthTexture.x
;fix_ZRepair_Dependencies2=
;fix_ZRepair_ZPosCalc2=zTex
;fix_ZRepair_PositionTexture=PositionTexture
;fix_ZRepair_PositionCalc=1024 * %s

; Inject depth texture if other depth sources are unavailable.
;fix_ZRepair_DepthTextureHash=8a19f087b004598f

; Correct inverse transformations in pixel shaders using evaluated depth.
;fix_InvTransform=ScreenToLight,InverseTranslatedViewProjectionMatrix

; Back projection coordinate fix.
;
; Available variables in expressions:
; stereoParams.x = Separation value in range [0..1] or [-0..-1] dependent on active eye
; stereoParams.y = Convergence value in w coordinates (1/z)
; stereoParams.z = -1/1 for left/right eye
; stereoParams.w = Separation value without eye separation
; stereoTune.x = tune value 1 (default is 1)
; stereoTune.y = tune value 2 (default is 1)
; stereoTune.z = tune value 3 (default is 1)
; stereoTune.w = tune value 4 (default is 1)
; stereoScreenRes.x = Primary swap chain backbuffer horizontal resolution
; stereoScreenRes.y = Primary swap chain backbuffer vertical resolution
; zpos = current pixel z position in pixel shader
; wpos = current pixel w position in pixel shader

; Send inverse transformations from vertex shaders to pixel shaders.
;fix_BackProjectionTransform1=ScreenToTranslatedWorldMatrix._m00,ScreenToTranslatedWorldMatrix._m02,ScreenToTranslatedWorldMatrix._m01
;fix_BackProjectionTransform2=ScreenToWorld._m00,ScreenToWorld._m02,ScreenToWorld._m01

; Position variables to correct in pixel shaders.
;fix_ObjectPosition1=PointPositionAndInverseRadius
;fix_ObjectPosition1Multiplier=1, (stereoScreenRes.x/stereoScreenRes.y)*0.5, -0.5
;fix_ObjectPosition2=SpotPositionAndInverseRadius
;fix_ObjectPosition2Multiplier=1, (stereoScreenRes.x/stereoScreenRes.y)*0.5, -0.5

; Matrix multiplications to correct in pixel shaders.
;fix_MatrixOperand1=TranslatedWorldToShadowMatrix
;fix_MatrixOperand1Multiplier=1, (stereoScreenRes.x/stereoScreenRes.y)*0.5 - viewDirection.z*0.05 + (0.02791946-stereoParams.x/stereoParams.w), 0

; autofix shader option: recompiles all vertex shaders. fixes minor differences in deferred rendering.
;recompile_all_vs=0

;------------------------------------------------------------------------------------------------------
; Shader manipulations without patches + shader filtering.
;------------------------------------------------------------------------------------------------------
;[ShaderOverride1]
;Hash=69732c4f23cb6c48
; Custom stereo separation value while rendering objects using this shader.
;Separation=0
; Custom stereo convergence value while rendering objects using this
; shader (e.g. convergence=0 will move an object to infinity).
;Convergence=0
; don't draw anything using this shader.
;Handling=skip
; advanced option: use this to override only if this shader is used rendering the given index buffer.
;IndexBufferFilter=b3e56ebc
; Use replaced shader only when there is no active depth buffer (for UI filtering)
;depth_filter = depth_inactive
; Use replaced shader only when there *IS* an active depth buffer (for UI filtering)
;depth_filter = depth_active
; Only use replaced shader when it is used in conjunction with a specific shader
; (e.g. to adjust a vertex shader ONLY when it is used with a specific pixel shader)
;partner=af7b880f07630615
; Override a value from [Constants] when this shader is used:
;x=2.0
; Pass the dimensions of the active render target and resolution (obtained with
; get_resolution_from) into the shader:
;x1=rt_width
;y1=rt_height
;z1=res_width
;w1=res_height
; Use t0 from active pixel shader for texture filtering. Will be 0 if no
; [TextureOverride*] section exists for the texture or 1 if one does. For advanced
; filtering, set a value for filter_index in the [TextureOverride] section.
;x2=ps-t0
; Override the shader model to allow using newer features like Texture2DMS:
;model=vs_5_0
; There's also support for copying textures, constant buffers, depth buffers,
; etc. from one shader to another. This is a complex topic - see this page:
;    https://github.com/bo3b/3Dmigoto/wiki/Resource-Copying


;------------------------------------------------------------------------------------------------------
; texture / render target manipulations
;------------------------------------------------------------------------------------------------------
;
; NOTE: If you are trying to match a texture the same size as the resolution (or
; a /2, x2, x4 or x8 multiple), you should confirm that the same hash is used
; on different resolutions, and adjust get_resolution_from if necessary.
;
; NOTE: If you find a texture hash seems to change inconsistently, try enabling
; track_texture_updates in the [Rendering] section.
;
;[TextureOverride1]
;Hash=c3e55ebd
; NVidia stores surface creation mode heuristics in the game profile. setting
; this option overrides the creation mode for a given texture / buffer.
; 0 = NVAPI_STEREO_SURFACECREATEMODE_AUTO - use driver registry profile settings.
; 1 = NVAPI_STEREO_SURFACECREATEMODE_FORCESTEREO - create stereo surface.
; 2 = NVAPI_STEREO_SURFACECREATEMODE_FORCEMONO - create mono surface.
;StereoMode=2

;[TextureOverride2]
;Hash = e27b9d07
; Prevent the game reading from this texture - will give the game a blank
; buffer instead. Used to prevent CryEngine games falsely culling objects. Use
; debug logging and look for Map calls to identify possible hashes.
;deny_cpu_read=1
; Expand the region copied to this texture with CopySubresourceRegion (similar
; issue to rasterizer_disable_scissor). Used to solve issues with transparent
; refraction effects (like glass) in CryEngine games.
;expand_region_copy=1


;------------------------------------------------------------------------------------------------------
; Example of settings override by mouse button configuration
; Mapping of from game provided hard coded convergence values to custom values
; Those are values for L.A. Noir
; Example of settings override by mouse button configuration
;------------------------------------------------------------------------------------------------------
;[ConvergenceMap]

;Map1=from 3e99999a to 0.3
;Map2=from 3f800000 to 1.0
;Map3=from 3f666666 to 0.9


;------------------------------------------------------------------------------------------------------
; Updates the game's driver profile on launch.
;
; Any changes here will require the user to OK a UAC prompt the first time they
; run the game, but the DLL tries to only do that if it is actually required.
;------------------------------------------------------------------------------------------------------
[Profile]
; This setting should always be added to a profile - it is required for a
; number of other settings to work, as well as allowing the convergence to be
; saved. If you are customising a profile you should **always uncomment this**:
StereoProfile = 1
;
; This setting enables stereo compute shaders, which is requires to fix a lot
; of "one eye" type rendering issues in many DX11 games. This is already set in
; the profile for this game, but set it anyway in case someone is running an
; old driver:
StereoFlagsDX10 = 0x00004000
;
; This sets the default convergence in the profile. Note that 3DMigoto will
; happily override the default value from the driver, but will only override
; the user's custom convergence if it has another reason to update the profile,
; such as a change to another setting (adding a version tag to the Comments
; setting would be one way to force an update):
StereoConvergence = 1.5
;
; This changes the green text that the driver displays, and is a good place to
; put any reminders to display to the user or just take some credit:
Comments = "3D Vision Fix by DarkStarSword"
;
; Change the rating: "0": 3D Vision Ready, "1": Excellent, "2": Good,
;                    "3": Fair, "4": Not Recommended
Compat = "0"
;
; If you have added some comments, you probably want to force the green text to
; show up when the game is next run. Note that like convergence, 3DMigoto will
; only override a user setting here if something else has also been updated
; (such as Comments), so this will usually only show up the first time a user
; runs the game after installing the fix (be sure to enable StereoProfile).
;StereoMemoEnabled = 1
;
; Disable compatibility mode to make sure users are seeing the real deal. Like
; convergence, 3DMigoto will respect the users custom settings here:
;Disable2DD = 1
;
; Put a reminder in the green text of compatibility mode that they are not
; seeing the real deal:
;2DD_Notes = "Compatibility mode is enabled. To use the fix, please disable it with Ctrl+Alt+F11"
;
; These two options change which constant buffers the driver uses to pass the
; separation and convergence to any Vertex and Domain shaders it has modified.
; The default value is 12, and you may need to change it if the game already
; uses that constant buffer for any purpose, which should be apparent as you
; will see 2D geometry on any shader that uses this. You should avoid using
; these constant buffers yourself unless you understand the nuances involved.
;
; We are setting DX10VSCBNumber here since we depend on it (water reflections:
; f1b89303bc47a053-vs.txt) and don't want to risk a driver update breaking us.
DX10VSCBNumber = 12
;DX10DSCBNumber = 12
;
; If a setting doesn't have a name or you don't know what it is (check the
; d3d11_log.txt for the names of all settings in this profile), you can use the
; hex ID (in fact, you can even paste a complete profile from Geforce Profile
; Manager - just be sure to delete any corrupt string settings if you do):
;0x1033cec2 = 0x00000002
;
; There are many more options, and we have tried to document them here -
; *please* edit this page if you figure out anything new:
; http://wiki.bo3b.net/index.php?title=Driver_Profile_Settings


;------------------------------------------------------------------------------------------------------
; Commands to run from the Present call at the start/end of each frame
;
; Useful to clear custom resources or ini params at the start of each frame, or
; to run a custom shader to do whatever you can dream up.
;------------------------------------------------------------------------------------------------------
[Present]
;run = CustomShaderDebugRTChange
;run = CustomShaderDebug2D
;run = CustomShaderDebugTransparentDepthBuffer
;run = CustomShaderDebugVolume
;run = CustomShaderDebugCB
;run = CustomShaderDebugLeaves
; Uncomment to enable a custom shader that allows the stereo output mode to be
; changed to Side-by-Side or Top-and-Bottom:
;run = CustomShader3DVision2SBS


; The following custom shader can convert 3D Vision to Side-by-Side and
; Top-and-Bottom for use with 3D TVs & projectors - to enable this uncomment
; the 'run = CustomShader3DVision2SBS' in the [Present] section, set 3D Vision
; to output "checkerboard" in the control panel (which will remove the 720p
; limitation) and enable this either via the F11 key, or by setting a default
; for x7 in the [Constants] section.
[Resource3DVision2SBSBackupTexture]
[CustomShader3DVision2SBS]
; Load a custom vertex + pixel shader:
vs = ShaderFixes/3dvision2sbsvs.hlsl
ps = ShaderFixes/3dvision2sbsps.hlsl
; Explicitly unbind other shader types for safety:
hs = null
ds = null
gs = null
; Disable the OM blend stage that could interfere with the shader:
blend = disable
; Disable front/back face culling so the vertices can be in any rotation:
cull = none
; Use a triangle strip topology so we only have to output four vertices:
topology = triangle_strip
; Clear all render + depth targets to avoid compatibility issues:
o1 = null
o2 = null
o3 = null
o4 = null
o5 = null
o6 = null
o7 = null
oD = null
; Bind the back buffer as a render target. set_viewport ensures that the view
; port is the size of the buffer so the draw call will work, and no_view_cache
; is necessary for a few games like Mad Max:
o0 = set_viewport no_view_cache bb
; Back up any textures that were in the ps-t100 slot. The CustomResource
; section will already back up a lot of state, including shaders, render
; targets, depth targets, UAVs, viewports, blend state, rasterizer state,
; primitive topology, etc. but it does not back up textures:
Resource3DVision2SBSBackupTexture = reference ps-t100
; Use the reverse stereo blit to give the shader access to the back buffers of
; both eyes:
ps-t100 = stereo2mono bb
; Some rare games (e.g. Onechanbara Z2) use MSAA back buffers, which cannot be
; directly used with the reverse stereo blit and must be resolved to non MSAA
; versions first. The symptoms will be a black screen after enabling this
; shader with F11. In that case, replace the above line with these two:
; ps-t100 = resolve_msaa bb
; ps-t100 = stereo2mono ps-t100
; Some games such as The Evil Within and Akiba's Trip constantly unbind
; StereoParams & IniParams, so we may need to explicitly rebind them now:
vs-t125 = StereoParams
ps-t125 = StereoParams
vs-t120 = IniParams
ps-t120 = IniParams
; Draw four vertices. The vertex shader will construct coordinates to cover the
; full screen using the SV_VertexID semantic so we don't need vertex buffers:
draw = 4, 0
; Restore the original texture from the ps-t100 slot:
post ps-t100 = reference Resource3DVision2SBSBackupTexture

[KeyChange3DVision2SBSOutputMode]
key = F11
; 0 = Regular 3D Vision
; 1 = Reversed 3D Vision
; 2 = Side by Side
; 3 = Reversed Side by Side
; 4 = Top and Bottom
; 5 = Reversed Top and Bottom
x7 = 1, 2, 3, 4, 5, 0
type = cycle

[KeyTest1]
key=z
x=1
type=toggle
transition=100
release_transition=100
[KeyTest2]
key=x
y=1
type=toggle
transition=100
release_transition=100
[KeyTest3]
key=c
z=1
type=toggle
transition=100
release_transition=100




;;;;;;;;;;;;;;; DEPTH BUFFER SOURCES ;;;;;;;;;;;;;;;
[ResourceViewport__DepthVPSampler__TexObj__Ref]
; This is used to grab a reference to the depth buffer from wherever it is
; first used in the frame
[ResourceViewport__DepthVPSampler__TexObj__Copy]
; ResourceViewport__DepthVPSampler__TexObj__Ref does not work when referenced
; in the crosshair shaders (I haven't checked why - maybe it's bound as an
; output at the time?), so we copy it into this resource when we hit the first
; HUD shader and use the copy.
max_copies_per_frame = 1
[ResourceViewport]

[ShaderOverrideDepthSource02b64fd179f952f0]
hash = 02b64fd179f952f0
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource0324010bd4dc79f9]
hash = 0324010bd4dc79f9
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb1
[ShaderOverrideDepthSource040250321a4a4113]
hash = 040250321a4a4113
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource069f5cf0b70e8db8]
hash = 069f5cf0b70e8db8
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource0711c9e0bdc4ae1e]
hash = 0711c9e0bdc4ae1e
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource0769d56af881d1ac]
hash = 0769d56af881d1ac
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource08056b559c8f0ac1]
hash = 08056b559c8f0ac1
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource085b30fa6655f973]
hash = 085b30fa6655f973
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource096febf7b3e6d775]
hash = 096febf7b3e6d775
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb1
[ShaderOverrideDepthSource0a564bcbd59a97e6]
hash = 0a564bcbd59a97e6
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t3
ResourceViewport = ref ps-cb1
[ShaderOverrideDepthSource0b7de4531e1c02c8]
hash = 0b7de4531e1c02c8
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
analyse_options =
[ShaderOverrideDepthSource0cba36a9ee7bdf1d]
hash = 0cba36a9ee7bdf1d
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource0ce72a0c3fb55442]
hash = 0ce72a0c3fb55442
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource0dc1f685e48f6604]
hash = 0dc1f685e48f6604
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource0e1300486a0587e1]
hash = 0e1300486a0587e1
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource1252a7afde493789]
hash = 1252a7afde493789
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb1
[ShaderOverrideDepthSource12639cdb3b3b9566]
hash = 12639cdb3b3b9566
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource13b2f2f4e8ba9d1d]
hash = 13b2f2f4e8ba9d1d
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource14c2c1824d024aab]
hash = 14c2c1824d024aab
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource16ee1b5419891a06]
hash = 16ee1b5419891a06
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource1703cfce97997ab9]
hash = 1703cfce97997ab9
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource17e204713968a8de]
hash = 17e204713968a8de
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource181e417b360cd7eb]
hash = 181e417b360cd7eb
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource18455e80ada8f1e2]
hash = 18455e80ada8f1e2
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource19ae45e0bfcdb885]
hash = 19ae45e0bfcdb885
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource1a019c24547403ad]
hash = 1a019c24547403ad
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource1a9dead3fcbf681e]
hash = 1a9dead3fcbf681e
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource1aa112a7aa959074]
hash = 1aa112a7aa959074
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource1aa5b9fef3f61e27]
hash = 1aa5b9fef3f61e27
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource1f3a42cd41afd8fc]
hash = 1f3a42cd41afd8fc
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource203cad0ae4ea658a]
hash = 203cad0ae4ea658a
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource209eafbe7ff83714]
hash = 209eafbe7ff83714
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource20af220b7e15ed9f]
hash = 20af220b7e15ed9f
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource214fcfb9e187cb0d]
hash = 214fcfb9e187cb0d
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource22d12266a8bf995e]
hash = 22d12266a8bf995e
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource23e4caf197da836e]
hash = 23e4caf197da836e
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb1
[ShaderOverrideDepthSource251daf8cff65f9d3]
hash = 251daf8cff65f9d3
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource266ec78da7083087]
hash = 266ec78da7083087
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource282143f8afa27d37]
hash = 282143f8afa27d37
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb1
[ShaderOverrideDepthSource2961f6f1d5721308]
hash = 2961f6f1d5721308
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource29ece7392f177013]
hash = 29ece7392f177013
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource2a2595a6ee1f75be]
hash = 2a2595a6ee1f75be
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource2a38e49c254e1652]
hash = 2a38e49c254e1652
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource2aaaba63de1577fe]
hash = 2aaaba63de1577fe
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource2b772771c25d60e0]
hash = 2b772771c25d60e0
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb1
[ShaderOverrideDepthSource2bec54e86dc1118f]
hash = 2bec54e86dc1118f
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb1
[ShaderOverrideDepthSource2c5ee32ebe22fded]
hash = 2c5ee32ebe22fded
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource2c5fc182bb9df5f9]
hash = 2c5fc182bb9df5f9
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource2dfcb52fc6fcd48b]
hash = 2dfcb52fc6fcd48b
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource2e004becaa853e4c]
hash = 2e004becaa853e4c
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource2f25e97d7d464b62]
hash = 2f25e97d7d464b62
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource2f86f37d3b3c71d3]
hash = 2f86f37d3b3c71d3
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource2fa1a9b18aee3184]
hash = 2fa1a9b18aee3184
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource312d6a869fec5064]
hash = 312d6a869fec5064
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource3177c234f5f1549e]
hash = 3177c234f5f1549e
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource318ea3d72fe7168f]
hash = 318ea3d72fe7168f
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource31d28d65faf2708c]
hash = 31d28d65faf2708c
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource324318b30c0c2a19]
hash = 324318b30c0c2a19
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb1
[ShaderOverrideDepthSource350993a3de775916]
hash = 350993a3de775916
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource354e531f3ff431ff]
hash = 354e531f3ff431ff
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource360896f5498e4f0c]
hash = 360896f5498e4f0c
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource392b0e01d1e8fc9f]
hash = 392b0e01d1e8fc9f
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource3cea09c0ddf83e30]
hash = 3cea09c0ddf83e30
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource3d60765fde4368f1]
hash = 3d60765fde4368f1
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource4193ef83095f1c6d]
hash = 4193ef83095f1c6d
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource41a6e152af8f0c71]
hash = 41a6e152af8f0c71
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource44885fee9522b07a]
hash = 44885fee9522b07a
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource44f8928dae99a449]
hash = 44f8928dae99a449
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource4c4ce7361d714d39]
hash = 4c4ce7361d714d39
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource50d6d60950804be7]
hash = 50d6d60950804be7
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource51fc420e7989a523]
hash = 51fc420e7989a523
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource55462b57b479c9ca]
hash = 55462b57b479c9ca
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource5648d04c28d832c5]
hash = 5648d04c28d832c5
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource5672f1aa4c0690b9]
hash = 5672f1aa4c0690b9
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource585e15d26f89b5ea]
hash = 585e15d26f89b5ea
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource5b25c27961182f2e]
hash = 5b25c27961182f2e
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource5c9710a64283ac9b]
hash = 5c9710a64283ac9b
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource5cfa6a7c8e34901f]
hash = 5cfa6a7c8e34901f
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource5da769de4456b301]
hash = 5da769de4456b301
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource5e5a01ce9cb14516]
hash = 5e5a01ce9cb14516
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource60b13423e73bf834]
hash = 60b13423e73bf834
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource61107f9c5b87737b]
hash = 61107f9c5b87737b
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource64116ff5307b8e6b]
hash = 64116ff5307b8e6b
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource66cc6bd5b2ecbd07]
hash = 66cc6bd5b2ecbd07
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource6857b6f9c39993d7]
hash = 6857b6f9c39993d7
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource68c0a4ff8abdf054]
hash = 68c0a4ff8abdf054
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource68d9ac0e3407eb5d]
hash = 68d9ac0e3407eb5d
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource6ab2f07612e06f45]
hash = 6ab2f07612e06f45
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource6b1dda973cff7399]
hash = 6b1dda973cff7399
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource6c46fb6400a2faef]
hash = 6c46fb6400a2faef
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource6e6e118e037e8188]
hash = 6e6e118e037e8188
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource6ea8727ad9fe41c1]
hash = 6ea8727ad9fe41c1
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb1
[ShaderOverrideDepthSource71f63367e3ef3c49]
hash = 71f63367e3ef3c49
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource73666271aa8ac5bb]
hash = 73666271aa8ac5bb
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource744b633ec33c19be]
hash = 744b633ec33c19be
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource750c2bc5bc0d5112]
hash = 750c2bc5bc0d5112
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb1
[ShaderOverrideDepthSource75c58bdf7cc389f1]
hash = 75c58bdf7cc389f1
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource76da36213044a0d6]
hash = 76da36213044a0d6
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource779dcea930968d91]
hash = 779dcea930968d91
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource78523f9ee58d5b41]
hash = 78523f9ee58d5b41
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource7861056b7b8df464]
hash = 7861056b7b8df464
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource7886b73bf0daaa13]
hash = 7886b73bf0daaa13
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource78c12ea736d46604]
hash = 78c12ea736d46604
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource78f4e71ac15a9666]
hash = 78f4e71ac15a9666
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource7a14e69ac3b2acba]
hash = 7a14e69ac3b2acba
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource7b24758854e22bfd]
hash = 7b24758854e22bfd
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource7b7fdaf0d70b883a]
hash = 7b7fdaf0d70b883a
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource7c4e193033f468fe]
hash = 7c4e193033f468fe
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource7d7a37c2d1954ff2]
hash = 7d7a37c2d1954ff2
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource809cfe646028ec9e]
hash = 809cfe646028ec9e
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource813c18574cdfe8fd]
hash = 813c18574cdfe8fd
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource81c57185151ccd2f]
hash = 81c57185151ccd2f
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource83b5bfa48433a52a]
hash = 83b5bfa48433a52a
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource8981938d3be287e8]
hash = 8981938d3be287e8
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource8985c99e88df5eba]
hash = 8985c99e88df5eba
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource8aa3686e48510743]
hash = 8aa3686e48510743
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource8abf53b8d388443a]
hash = 8abf53b8d388443a
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource8cf6c62f4877b6f8]
hash = 8cf6c62f4877b6f8
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource8d46fe570bc324bc]
hash = 8d46fe570bc324bc
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource8e13bc6665237837]
hash = 8e13bc6665237837
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource8e4e427e0a6c6916]
hash = 8e4e427e0a6c6916
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource8e72ddb94ab929bd]
hash = 8e72ddb94ab929bd
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource90183bbc97e81a06]
hash = 90183bbc97e81a06
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource93a8018f99c76c2b]
hash = 93a8018f99c76c2b
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource9413102f610ca775]
hash = 9413102f610ca775
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource9798ff464d8adc96]
hash = 9798ff464d8adc96
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource97993509b5be0426]
hash = 97993509b5be0426
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource99f72b3ce54dcba1]
hash = 99f72b3ce54dcba1
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource9b3dd640eca43f22]
hash = 9b3dd640eca43f22
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource9d6c7c026928c9a5]
hash = 9d6c7c026928c9a5
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource9df10397788c83ac]
hash = 9df10397788c83ac
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb1
[ShaderOverrideDepthSource9e25077a186f9243]
hash = 9e25077a186f9243
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource9e491e87ab2d316a]
hash = 9e491e87ab2d316a
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource9efedbbaaa1986b4]
hash = 9efedbbaaa1986b4
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource9f02a894fe873519]
hash = 9f02a894fe873519
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource9f26045c958d70dc]
hash = 9f26045c958d70dc
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSource9fe3b11bfd39e609]
hash = 9fe3b11bfd39e609
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcea01d55a43936f1ab]
hash = a01d55a43936f1ab
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcea400f033d0215e45]
hash = a400f033d0215e45
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcea46675494c62a00d]
hash = a46675494c62a00d
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcea486ad9cb9742927]
hash = a486ad9cb9742927
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcea74c412f8e30f50e]
hash = a74c412f8e30f50e
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb1
[ShaderOverrideDepthSourcea9a1abc7e36b9920]
hash = a9a1abc7e36b9920
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceab29a1dcadc4fd03]
hash = ab29a1dcadc4fd03
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceab55c0515643ced3]
hash = ab55c0515643ced3
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceac73f764dae59c9d]
hash = ac73f764dae59c9d
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceae660151f57a17d1]
hash = ae660151f57a17d1
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceb1396e3f02ff00ff]
hash = b1396e3f02ff00ff
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb1
[ShaderOverrideDepthSourceb22b0aa79d64a6c8]
hash = b22b0aa79d64a6c8
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceb30352625f25d6bc]
hash = b30352625f25d6bc
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceb3ec960193a2632b]
hash = b3ec960193a2632b
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceb428377d353f8b28]
hash = b428377d353f8b28
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceb50fc10b458b51d0]
hash = b50fc10b458b51d0
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceb5aa755b7da96b23]
hash = b5aa755b7da96b23
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceb6cbf5a824f05e55]
hash = b6cbf5a824f05e55
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceba51796ca9915799]
hash = ba51796ca9915799
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcebc83d9692dae904d]
hash = bc83d9692dae904d
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcec004038136cf461e]
hash = c004038136cf461e
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcec07232b6f23bc125]
hash = c07232b6f23bc125
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcec12d79d31d55478b]
hash = c12d79d31d55478b
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb1
[ShaderOverrideDepthSourcec340d5d597037b67]
hash = c340d5d597037b67
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcec3b1c733ac620277]
hash = c3b1c733ac620277
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcec503f9ee4b4e4c0a]
hash = c503f9ee4b4e4c0a
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcec5128febcbf4cbfb]
hash = c5128febcbf4cbfb
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcec5913e7cf876e748]
hash = c5913e7cf876e748
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcec916befac61e3393]
hash = c916befac61e3393
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcec9d0530100658326]
hash = c9d0530100658326
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceca1e70c80fb378fe]
hash = ca1e70c80fb378fe
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceca221c2742aea111]
hash = ca221c2742aea111
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcecb63199077c2381e]
hash = cb63199077c2381e
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcece7253be32ce24a1]
hash = ce7253be32ce24a1
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcecec771392f00a391]
hash = cec771392f00a391
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcecedfa15fc58d14b5]
hash = cedfa15fc58d14b5
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcecf64ad0faad8b411]
hash = cf64ad0faad8b411
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcecfb5278b1e1b24ab]
hash = cfb5278b1e1b24ab
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourced00b877c255e5d0d]
hash = d00b877c255e5d0d
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourced024142ef0a06d9d]
hash = d024142ef0a06d9d
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourced06a740aebdfe85a]
hash = d06a740aebdfe85a
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourced08957cc598af0b9]
hash = d08957cc598af0b9
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourced0a63b87624b2535]
hash = d0a63b87624b2535
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourced2c7655907543118]
hash = d2c7655907543118
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourced334d19d192fa85b]
hash = d334d19d192fa85b
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourced4b0bb6fade7265c]
hash = d4b0bb6fade7265c
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourced504b369f877863e]
hash = d504b369f877863e
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourced542fdd10978c947]
hash = d542fdd10978c947
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourced5849c826a29e619]
hash = d5849c826a29e619
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb1
[ShaderOverrideDepthSourced940759f1fcb616e]
hash = d940759f1fcb616e
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb1
[ShaderOverrideDepthSourceda3b7220692ea586]
hash = da3b7220692ea586
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcedbc93c4ff1e8e06f]
hash = dbc93c4ff1e8e06f
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcedbffc611b2937755]
hash = dbffc611b2937755
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcedd6ba387a33663e6]
hash = dd6ba387a33663e6
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcee24948678968c668]
hash = e24948678968c668
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcee39f580d2470c243]
hash = e39f580d2470c243
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcee3db458d204c17ab]
hash = e3db458d204c17ab
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcee5143050bce0d6f4]
hash = e5143050bce0d6f4
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcee5c743164cbd2c90]
hash = e5c743164cbd2c90
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcee6669e438db8afee]
hash = e6669e438db8afee
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcee8299ed90696914d]
hash = e8299ed90696914d
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceeaa1464b5202cdeb]
hash = eaa1464b5202cdeb
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceeb496dea0d8446ff]
hash = eb496dea0d8446ff
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t0
ResourceViewport = ref ps-cb1
[ShaderOverrideDepthSourceec95a91884103fa0]
hash = ec95a91884103fa0
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceecbee4901c3fafc1]
hash = ecbee4901c3fafc1
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceed1aaa7dc84e9406]
hash = ed1aaa7dc84e9406
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceed9e5ba553e542da]
hash = ed9e5ba553e542da
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceee5e8ad52483257a]
hash = ee5e8ad52483257a
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceef7b164e4be2097b]
hash = ef7b164e4be2097b
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceefd45829939ce625]
hash = efd45829939ce625
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcef160b95bd268bf6e]
hash = f160b95bd268bf6e
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcef1ee6262cc726f3a]
hash = f1ee6262cc726f3a
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb1
[ShaderOverrideDepthSourcef62a23ed8f7cd2c0]
hash = f62a23ed8f7cd2c0
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcef673defc76f652d7]
hash = f673defc76f652d7
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcef9f9561d1de11541]
hash = f9f9561d1de11541
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcefa52775aafa37075]
hash = fa52775aafa37075
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcefcd7d4266a2b63b9]
hash = fcd7d4266a2b63b9
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
analyse_options =
[ShaderOverrideDepthSourcefcdb11842e9c9f49]
hash = fcdb11842e9c9f49
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcefd3ee27931b97f30]
hash = fd3ee27931b97f30
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourcefee597b6e06779e4]
hash = fee597b6e06779e4
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceff03f395f88ef896]
hash = ff03f395f88ef896
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0
[ShaderOverrideDepthSourceff2e3d5f93ccc500]
hash = ff2e3d5f93ccc500
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t2
ResourceViewport = ref ps-cb1
[ShaderOverrideDepthSourceffc8cc25b02fa8d5]
hash = ffc8cc25b02fa8d5
ResourceViewport__DepthVPSampler__TexObj__Ref = ref ps-t1
ResourceViewport = ref ps-cb0


;;;;;;;;;;;; HUD ;;;;;;;;;;
[ShaderOverrideCrosshair1]
hash = a3c7aa3deb9b3c19
ResourceViewport__DepthVPSampler__TexObj__Copy = copy ResourceViewport__DepthVPSampler__TexObj__Ref
vs-t110 = ref ResourceViewport__DepthVPSampler__TexObj__Copy
vs-cb13 = ref ResourceViewport
post vs-t110 = null
post vs-cb13 = null
;analyse_options = dump_rt dump_tex
x1 = ps-t0
[TextureOverrideCrosshairLargeCircle]
hash = 3c65245f
[TextureOverrideCrosshairCameraCorners]
hash = f9604929
[TextureOverrideCrosshairCameraFocus]
hash = 6178de6a
[ResourceBak]
[ShaderOverrideCrosshair2]
hash = 1dae0b5e61f23273
ResourceViewport__DepthVPSampler__TexObj__Copy = copy ResourceViewport__DepthVPSampler__TexObj__Ref
vs-t110 = ref ResourceViewport__DepthVPSampler__TexObj__Copy
vs-cb13 = ref ResourceViewport
post vs-t110 = null
post vs-cb13 = null
;analyse_options = dump_rt dump_tex dump_depth
x1 = ps-t0
; Unbind the depth buffer while drawing the HUD as it was confusing the driver
; heuristics:
ResourceBak = ref oD
oD = null
post oD = ref ResourceBak
[TextureOverrideCrosshairSmallCircle]
hash = 17e7112e
[TextureOverrideCrosshairRedCircle]
hash = 2affaff1



;;;;;;;;;;;;;;;;; DEBUGGING TRICKS ;;;;;;;;;;;;
[ResourceDebugRTBefore]
max_copies_per_frame=1
[ResourceDebugRTAfter]
[ResourceDebug2D]
[ResourceDebugTransparentDepthBuffer]
[ResourceDebugVolume]
[ResourceDebugCB]

[ResourceDebugCBFont]
; Note that this font has the size of each character embedded in the unused
; space of the final character, which the geometry shader uses to render each
; character the correct width. This font was generated with gen_bm_font.py,
; then converted to DDS (because our PNG loading seems to be broken o_O):
filename = ShaderFixes\LiberationSans-Bold.dds

;[CustomShaderDebugRTChange]
;vs = ShaderFixes\full_screen.hlsl
;ps = ShaderFixes\debug_rt_change.hlsl
;blend = disable
;cull = none
;topology = triangle_strip
;o0 = bb
;ps-t100 = ResourceDebugRTBefore
;ps-t101 = ResourceDebugRTAfter
;Draw = 4, 0
;post ps-t100 = null
;post ps-t101 = null

;[CustomShaderDebug2D]
;vs = ShaderFixes\full_screen.hlsl
;ps = ShaderFixes\debug_2d.hlsl
;blend = disable
;cull = none
;topology = triangle_strip
;o0 = bb
;ps-t100 = ResourceDebug2D
;Draw = 4, 0
;post ps-t100 = null

;[CustomShaderDebugTransparentDepthBuffer]
;vs = ShaderFixes\full_screen.hlsl
;ps = ShaderFixes\debug_transparent_zbuffer.hlsl
;blend = disable
;cull = none
;topology = triangle_strip
;o0 = bb
;ps-t100 = ResourceDebugTransparentDepthBuffer
;Draw = 4, 0
;post ps-t100 = null

;[CustomShaderDebugVolume]
;vs = ShaderFixes\full_screen.hlsl
;ps = ShaderFixes\debug_volume.hlsl
;blend = ADD ONE INV_SRC_ALPHA
;cull = none
;topology = triangle_strip
;o0 = bb
;ps-t100 = ResourceDebugVolume
;Draw = 4, 0
;post ps-t100 = null
;post ps-t101 = null

;[CustomShaderDebugCB]
;; The vertex shader passes constant buffer indexes to the geometry shader:
;vs = ShaderFixes/debug_cb_vs.hlsl
;; The geometry shader generates the text for a given constant buffer index:
;gs = ShaderFixes/debug_cb_gs.hlsl
;; The pixel shader draws the font:
;ps = ShaderFixes/debug_cb_ps.hlsl
;cull = none
;; Enable alpha blending. To change the text colour, edit the pixel shader:
;blend = add one inv_src_alpha
;; Use points as the primitive from the vertex shader to the geometry shader:
;topology = point_list
;o0 = bb
;; Pass the constant buffer to view into the geometry shader:
;gs-cb13 = ResourceDebugCB
;; Font is passed into the pixel shader (to draw it) *and* the geometry shader
;; (as the character sizes are encoded in the final character of the font):
;gs-t100 = ResourceDebugCBFont
;ps-t100 = ResourceDebugCBFont
;; The game never used a geometry shader, so 3DMigoto never bound
;; StereoParams, do so now:
;gs-t125 = StereoParams
;; Change this number to set how many entries are drawn:
;draw = 40, 0
;; I didn't back these up because I doubt they will be in use and this shader
;; won't be enabled in production, but it's still good practice to clear them:
;post gs-cb13 = null
;post gs-t100 = null
;post ps-t100 = null

;[ResourceDebugLeaves]
;max_copies_per_frame = 1
;[CustomShaderDebugLeaves]
;vs = ShaderFixes/debug_cb_vs.hlsl
;gs = ShaderFixes/debug_leaves.hlsl
;ps = ShaderFixes/debug_cb_ps.hlsl
;cull = none
;blend = add one inv_src_alpha
;topology = point_list
;o0 = bb
;gs-t110 = ResourceDebugLeaves
;gs-t100 = ResourceDebugCBFont
;ps-t100 = ResourceDebugCBFont
;gs-t125 = StereoParams
;draw = 66, 0
;post gs-t110 = null
;post gs-t100 = null
;post ps-t100 = null

;[ShaderOverrideVolumeFogMoonlightAndCombine]
;hash = 7e8b8bc146135fe5
;;post ResourceDebugVolume = ref cs-u0
;;w7 = 1000
;;--------------------------------
;; Light volume:
;;ResourceDebugVolume = ref cs-t0
;;w7 = 0.05
;;--------------------------------
;; Density volume:
;;ResourceDebugVolume = ref cs-t3
;;ResourceDebugCB = copy cs-cb2
;
;;[ShaderOverrideVolumeFogFinalCS]
;;hash = 551d99c65fb6a977
;;ResourceDebugVolume = ref cs-t0
;;w7 = 1000
;
;[ShaderOverrideVolumeFogToRT]
;hash = 3fe44398211693ee
; foggy night:
;hash = aa20b3b53cdc9158
;ResourceDebugRTBefore = copy o0
;post ResourceDebugRTAfter = copy o0
;;ResourceDebugVolume = ref ps-t1
;;w7 = 1

;;;;;;;; ENVIRONMENTAL REFLECTIONS ;;;;;;;;;

[TextureOverrideViewport__DynamicCubeMapReflectionTextureArray]
; Force to mono to fix slight uneven environment reflection in each eyes -
; because the background of this is always mono, but lights rendered onto
; it are rendered in stereo by default, which looks odd.
hash = dd075df0
StereoMode = 2


;;;;;;;;;;; LEAVES ;;;;;;;;;;;;;
; The leaves falling from the trees get out of sync when Stereo compute shaders
; and/or SLI are enabled. This is due to the leaf physics compute shader using
; a stereo depth buffer, which leads to physics desync. To fix this, we unbind
; the depth buffer from cs-t3, effectively stopping the leaves from interacting
; with the world, and keeping them in sync. It does mean they don't settle on
; the ground, but I doubt anyone will notice.
;
; Alternative solutions that did not work:
; - cs-t3 = mono copy cs-t3 (driver heuristics ignored this and did it stereo)
; - cs-t3 = stereo2mono cs-t3 (not working in this game for some reason)
; - disable stereo compute shaders (ignored in SLI (driver bug?), breaks fog)
; - restrict stereo compute shaders to same resources as graphics (no effect)
; - force the leaf structured buffer to mono at time of creation (no hash to match)
; - ask the driver not to stereoise this paricular CS (no API to do this)
; - replace the leaf buffer with our own mono buffer (driver seems to be
;   ignorring the creation mode, and even if it wasn't this would need 3DMigoto
;   support to match original buffer as there are multiple active at a time)
;
; If examining this, remember the SGraphicParticle structured buffer must be
; cleared to resync the physics (including spawning new leaves). One way to do
; this is to set 'analyse_options = clear_rt' globally then run frame analysis.
;
; Also disable cs-t2 and cs-t4 - these are mostly mono depth buffers (for cs-t2
; that is probably a bug since it is from the POV of the camera, but cs-t4 is
; probably supposed to be mono since it is an overhead view), but include some
; stereo elements that could cause desync.
[ShaderOverrideLeavesCS1]
hash = 74cb1f2b7151ee43
;post ResourceDebugLeaves = copy cs-u2
;ResourceDebug2D = copy cs-t3
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideLeavesCS2]
hash = 4e62c7a3e80110e1
;post ResourceDebugLeaves = copy cs-u2
;ResourceDebug2D = copy cs-t3
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
;[ShaderOverrideLeavesVS]
;hash = 9d5d1148865fba3c
; Other confetti vertex shaders:
;  1e268d726dd6a755
;  9d5d1148865fba3c
;  a6202d18c17c5f05
;  c6172e37e82b9f89
;  ef6214f0aa717ed8
;ResourceDebugLeaves = copy vs-t0
;
; Additional "confetti" shaders found by grep - disable the depth buffer in all these:
[ShaderOverrideConfettiCS3]
hash = 039546c2a7463737
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS4]
hash = 07b4b9c65569e40e
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS5]
hash = 0daf8568fc1e47cf
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS6]
hash = 0e6cd8fdb9156acc
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS7]
hash = 141e0b727420956d
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS8]
hash = 1c7bc2d04554a55a
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS9]
hash = 1f16ec2cf283cf42
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS10]
hash = 24f6a49db650aac5
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS11]
hash = 26eec96ee76c9df2
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS12]
hash = 2a932b96002db902
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS13]
hash = 35339aa1f031737f
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS14]
hash = 376234c3de6c4aab
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS15]
hash = 3a03511a8365927c
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS16]
hash = 401386cb07e94226
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS17]
hash = 43dbadbaf9dda984
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS18]
hash = 44cc457e1b567d94
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS19]
hash = 4d990ad5d4cff0fa
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS20]
hash = 51f73632aed15863
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS21]
hash = 530d90b412f4d249
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS22]
hash = 54a7da91cd4fb19f
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS23]
hash = 5876ebb14f44bd07
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS24]
hash = 651927eaa94490a6
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS25]
hash = 6998bc56b5d13ea5
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS26]
hash = 6d42452a334ed5c7
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS27]
hash = 6fd15eb10c8b6adc
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS28]
hash = 71289a9a81c6ab89
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS29]
hash = 75323bd1232a47af
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS30]
hash = 75cff65b6b09f6d3
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS31]
hash = 7d42a6d0152b88be
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS32]
hash = 7eab60a31027f540
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS33]
hash = 91c20f463bbbb6ae
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS34]
hash = 9a482d515eadab88
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS35]
hash = 9fe9fbc131c1f61b
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS36]
hash = a563ef5f7128f29a
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS37]
hash = a6495214d95252e1
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS38]
hash = aba3f5fb5fe45250
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS39]
hash = ac4c0b87f7b07dd9
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS40]
hash = ac971df6c2fe936f
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS41]
hash = b39cce73b9608f8c
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS42]
hash = b748c07ff56a201b
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS43]
hash = b9ba9778cd8e1c6b
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS44]
hash = b9ed18f92f8936a5
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS45]
hash = c59946065ffcb092
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS46]
hash = c5fa78fdffe5885d
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS47]
hash = c6e877603af09944
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS48]
hash = ca12b5891a7bf35a
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS49]
hash = d24dac32b287662e
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS50]
hash = de9cd7532050a9ea
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS51]
hash = e3f0475f96a752cb
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null
[ShaderOverrideConfettiCS52]
hash = e719ad50345a4a95
ResourceDebugTransparentDepthBuffer = ref cs-t2 unless_null
cs-t2 = null
cs-t3 = null
cs-t4 = null


;;;;;;;;;;;;;;;; BLUE GLITCH FIX ;;;;;;;;;;;;;;;;;
; As the camera passes through the boundary of a light volume this shader is
; supposed to instantaneously switch which side of the boundary it is drawing -
; the shader stops drawing one side and the game gives it the geometry for the
; other. But, in 3D there is a gap where the shader will stop drawing the
; volume in one eye and not have the geometry for the other side yet - this
; leads to the screen turning blue in one eye as later shaders think the entire
; screen is in shade.
;
; Fixing this is tricky - unstereoising the shader so that it switches at the
; right point leaves a blue seam at the light volume boundary, and we can't
; easily correct for this. The solution below is to disable back face culling
; so that the shader will continue to draw the light volume even once the
; camera is on the wrong side. We use the fact that 3DMigoto's custom shader
; feature allows us to duplicate the draw call with some of the render state
; overridden to disable culling, then use handling=skip to prevent the original
; draw call from happening.
;
; This reveals a second issue where the volume is clipped at the near clipping
; plane, resulting in another blue seam. To fix this we edit the shader and set
; Z = W, so that the rasterizer will never clip it.
[ShaderOverrideAnalyseBlueGlitch]
hash = 1447dd1e16fb2c17
;ResourceDebugRTBefore = copy o0
;post ResourceDebugRTAfter = copy o0
run = CustomShaderFixTheGlitch
handling = skip


[CustomShaderFixTheGlitch]
cull = none
;ResourceDebugRTBefore = copy o0
;post ResourceDebugRTAfter = copy o0
w1 = 1
draw = from_caller
post w1 = 1

[ShaderOverrideWaypointMarkersMinimapPS]
; Waypoint marker VS is used for both minimap (icons, waypoints) and the
; overlay on the road. We want to return the minimap icons to screen depth, but
; leave the markers on the road at their original correct depth. They use
; different pixel shaders, so match based on the active pixel shader:
; VS hash = f04ddad1f29f69a9
; PS road hash = d5a0fc16ecac2088
; PS minimap hash:
hash = 0632b4741fa82155
z6 = 1
post z6 = 0

[ShaderOverridePoolsFountainsEtc]
hash = f1b89303bc47a053
; We are neutralising the driver's stereo correction by declaring cb12 inside
; the shader. Unbind it now just in case the driver wasn't going to stereoise
; the shader and there was some garbage in it:
vs-cb12 = null
[ShaderOverrideHalo1]
hash = 11930fb9ebc68406
vs-cb12 = null
[ShaderOverrideHalo2]
hash = 34ab57a0ef779c80
vs-cb12 = null
[ShaderOverrideHalo3]
hash = 66fb680f6d0a9ec2
vs-cb12 = null
[ShaderOverrideHalo4]
hash = b0f4797f148bf0b4
vs-cb12 = null
